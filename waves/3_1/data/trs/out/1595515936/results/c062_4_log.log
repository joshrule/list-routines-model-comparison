    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.30s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c062_4.json out/1595515936/results/c062_4_best.csv out/1595515936/results/c062_4_predictions.csv out/1595515936/results/c062_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 9, 2, 8, 0, 6]), o: IntList([1, 9, 2, 8, 0]) }
#   Datum { i: IntList([6, 8, 9, 3, 7, 5, 2, 1]), o: IntList([6, 8, 9, 3, 7, 5, 2]) }
#   Datum { i: IntList([6, 8, 3, 7, 7, 3, 7, 7, 6, 3]), o: IntList([6, 8, 3, 7, 7, 3, 7, 7, 6]) }
#   Datum { i: IntList([4, 2, 0, 3, 4, 0, 0, 3, 4]), o: IntList([4, 2, 0, 3, 4, 0, 0, 3]) }
#   Datum { i: IntList([2, 5, 2, 7]), o: IntList([2, 5, 2]) }
#   Datum { i: IntList([9, 9]), o: IntList([9]) }
#   Datum { i: IntList([1, 9, 8]), o: IntList([1, 9]) }
#   Datum { i: IntList([1, 3, 8, 5, 7, 6, 0, 9, 2, 4]), o: IntList([1, 3, 8, 5, 7, 6, 0, 9, 2]) }
#   Datum { i: IntList([1, 2, 5, 4, 5, 4, 7]), o: IntList([1, 2, 5, 4, 5, 4]) }
#   Datum { i: IntList([7, 6, 0, 7, 3]), o: IntList([7, 6, 0, 7]) }
#   Datum { i: IntList([8]), o: IntList([]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c062,0,4,1,970693,970695,888489,600.001358405,602.82096416
c062,0,4,2,221923,224123,217663,1200.0018147340002,1203.548429991
c062,0,4,3,92901,93928,93375,1800.0098159190002,1804.078116774
c062,0,4,4,54415,55215,54959,2400.011710604,2404.539665032
c062,0,4,5,40181,40941,40705,3000.012598921,3005.013692709
c062,0,4,6,35916,36564,36309,3600.015724499,3605.458316004
c062,0,4,7,33523,34297,34143,4200.024349083,4205.832874915
c062,0,4,8,32038,32750,32405,4800.0265517259995,4806.356257281
c062,0,4,9,25855,26587,26321,5400.028140560999,5406.776776358
c062,0,4,10,22660,23354,23112,6000.040098390999,6007.235597495
c062,0,4,11,20424,21074,20840,6600.047335906999,6607.859405423
# search time: 6600.047s
# total time: 6608.079s
c062,1,4,1,950338,950340,883221,600.00223843,600.342048113
c062,1,4,2,214467,215349,209180,1200.005558146,1200.668918869
c062,1,4,3,91871,92836,92283,1800.007739002,1800.946095283
c062,1,4,4,55417,56126,55912,2400.022803891,2401.183159911
c062,1,4,5,38611,39357,39115,3000.0311492729998,3001.375112419
c062,1,4,6,34297,34942,34676,3600.0342259179997,3601.592814204
c062,1,4,7,32969,33738,33534,4200.039268596,4201.808119181
c062,1,4,8,32019,32842,32490,4800.04658891,4802.030731875
c062,1,4,9,26200,26918,26628,5400.057313492,5402.3709951
c062,1,4,10,22139,22699,22474,6000.05868185,6002.622993823
c062,1,4,11,20697,21343,21153,6600.072214852999,6602.861016349
# search time: 6600.072s
# total time: 13211.278s
c062,2,4,1,939585,939587,877307,600.002691686,600.226749951
c062,2,4,2,214090,215550,209159,1200.004771599,1200.429333498
c062,2,4,3,92593,93655,93047,1800.0048383469998,1800.588553612
c062,2,4,4,50675,51221,50989,2400.00834257,2400.775336057
c062,2,4,5,42623,43377,43139,3000.011606104,3000.927662786
c062,2,4,6,40206,40865,40611,3600.021954752,3601.063081077
c062,2,4,7,37719,38484,38329,4200.037088211,4201.218278815
c062,2,4,8,36725,37452,37081,4800.050096359,4801.387305838
c062,2,4,9,29388,30164,29862,5400.067796963001,5401.600623146
c062,2,4,10,24421,25124,24871,6000.070893872001,6001.847351611
c062,2,4,11,23097,23744,23453,6600.073340496001,6602.081766647
# search time: 6600.073s
# total time: 19813.709s
c062,3,4,1,1067446,1067448,974628,600.000089396,600.196357612
c062,3,4,2,247583,249640,242713,1200.0007234260001,1200.347298515
c062,3,4,3,105413,106541,105859,1800.004516338,1800.473040859
c062,3,4,4,62953,63599,63389,2400.007144727,2400.587690206
c062,3,4,5,45936,46562,46357,3000.0188100640003,3000.734122009
c062,3,4,6,41146,41879,41649,3600.021016519,3600.831398587
c062,3,4,7,43933,44624,44387,4200.0258167110005,4200.937118652
c062,3,4,8,42544,43183,42741,4800.028110906001,4801.07047822
c062,3,4,9,33689,34424,34109,5400.035459279001,5401.194021799
c062,3,4,10,29559,30298,29939,6000.038707906001,6001.325673346
c062,3,4,11,27227,27862,27557,6600.0410083880015,6601.464721109
# search time: 6600.041s
# total time: 26415.548s
c062,4,4,1,1171175,1171177,1090775,600.003922496,600.195747559
c062,4,4,2,284292,286270,278121,1200.004042756,1200.337800535
c062,4,4,3,123228,124171,123338,1800.008427516,1800.446466197
c062,4,4,4,70022,70791,70461,2400.011513266,2400.573897528
c062,4,4,5,51788,52475,52183,3000.01630579,3000.688447785
c062,4,4,6,47151,47836,47599,3600.029969353,3600.808196524
c062,4,4,7,43952,44651,44443,4200.03077645,4200.901340434
c062,4,4,8,43156,43830,43396,4800.0362585660005,4800.998102552
c062,4,4,9,34339,35112,34797,5400.037160233001,5401.153153307
c062,4,4,10,29823,30432,30127,6000.046579907001,6001.299992024
c062,4,4,11,27824,28535,28195,6600.048128714001,6601.449756368
# search time: 6600.048s
# total time: 33017.394s
