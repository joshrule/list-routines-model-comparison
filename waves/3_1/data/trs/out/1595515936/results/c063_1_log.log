    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.35s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c063_1.json out/1595515936/results/c063_1_best.csv out/1595515936/results/c063_1_predictions.csv out/1595515936/results/c063_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([2, 2, 2, 2]), o: IntList([2]) }
#   Datum { i: IntList([0, 2, 0]), o: IntList([2, 0]) }
#   Datum { i: IntList([3, 8, 8, 7, 7, 7, 8, 8]), o: IntList([7, 7, 8, 8]) }
#   Datum { i: IntList([3, 8, 4, 4]), o: IntList([]) }
#   Datum { i: IntList([0, 9, 7, 1, 1, 5, 4, 3, 6, 6]), o: IntList([9, 7, 1, 1, 5, 4, 3, 6, 6]) }
#   Datum { i: IntList([4, 1, 1, 4, 1, 1, 3]), o: IntList([1, 3]) }
#   Datum { i: IntList([0, 5, 0, 5, 5, 7]), o: IntList([5, 0, 5, 5, 7]) }
#   Datum { i: IntList([2, 6, 2, 6, 6, 6]), o: IntList([6, 6, 6]) }
#   Datum { i: IntList([0, 3, 9, 4, 6, 6, 7, 8, 2]), o: IntList([3, 9, 4, 6, 6, 7, 8, 2]) }
#   Datum { i: IntList([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), o: IntList([3, 3, 3, 3, 3, 3]) }
#   Datum { i: IntList([1, 7, 9, 9, 8, 4, 1, 7, 8]), o: IntList([9, 9, 8, 4, 1, 7, 8]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c063,0,1,1,1013520,1013522,927957,600.000560344,602.560388956
c063,0,1,2,429197,431190,418555,1200.000950686,1203.269459346
c063,0,1,3,269408,270600,266927,1800.003996818,1803.676376554
c063,0,1,4,121990,122788,122055,2400.0070873199998,2404.023239274
c063,0,1,5,134264,135044,131645,3000.0072947629997,3004.323614324
c063,0,1,6,73414,74133,72057,3600.0082854139996,3604.606249443
c063,0,1,7,74099,74833,73387,4200.009349209,4204.88446249
c063,0,1,8,48604,49329,47838,4800.011466737,4805.202838008
c063,0,1,9,53910,54660,53402,5400.024170115999,5405.520420365
c063,0,1,10,35372,36147,35098,6000.025854238,6005.818036543
c063,0,1,11,29777,30486,29550,6600.027332666999,6606.166497482
# search time: 6600.027s
# total time: 6606.397s
c063,1,1,1,960304,960306,894691,600.005638141,600.478280328
c063,1,1,2,409467,410181,398483,1200.006499138,1200.779278734
c063,1,1,3,262888,264136,260444,1800.007121832,1800.996502191
c063,1,1,4,123747,124525,123751,2400.009583786,2401.180670365
c063,1,1,5,135328,136175,132664,3000.013116295,3001.34566322
c063,1,1,6,72866,73681,71685,3600.0155672130004,3601.506928356
c063,1,1,7,72164,72961,71535,4200.021785281,4201.651026837
c063,1,1,8,48775,49398,47917,4800.022815756,4801.807076054
c063,1,1,9,53534,54362,53183,5400.023849906001,5401.984924835
c063,1,1,10,35561,36376,35258,6000.036270848001,6002.152226685
c063,1,1,11,29699,30514,29574,6600.042880517,6602.331719858
# search time: 6600.043s
# total time: 13209.058s
c063,2,1,1,977608,977610,916012,600.000248055,600.228399804
c063,2,1,2,412996,414951,402991,1200.000365266,1200.419605911
c063,2,1,3,262208,263280,259602,1800.0012192,1800.549323033
c063,2,1,4,117721,118543,117754,2400.006534915,2400.666591397
c063,2,1,5,144093,144753,141120,3000.01036758,3000.786560791
c063,2,1,6,83105,83892,81518,3600.0137274910003,3600.892427806
c063,2,1,7,81871,82701,81099,4200.0167904420005,4201.004198925
c063,2,1,8,54726,55535,53901,4800.017361797,4801.132816506
c063,2,1,9,61154,61837,60477,5400.018178968,5401.212497872
c063,2,1,10,39885,40482,39156,6000.0355815170005,6001.330274748
c063,2,1,11,33888,34522,33446,6600.035878432001,6601.438572207
# search time: 6600.036s
# total time: 19810.835s
c063,3,1,1,1146442,1146444,1054567,600.000082999,600.208556391
c063,3,1,2,475422,477852,463796,1200.0010041290002,1200.376605231
c063,3,1,3,295890,297096,292882,1800.0031155740003,1800.502277772
c063,3,1,4,138722,139551,138624,2400.0077134360004,2400.596385755
c063,3,1,5,150949,151690,147789,3000.009622283,3000.690262308
c063,3,1,6,85626,86368,83911,3600.012719919,3600.763411556
c063,3,1,7,94991,95765,93948,4200.015739829,4200.865408061
c063,3,1,8,64057,64908,62972,4800.024556774,4800.965488491
c063,3,1,9,70904,71598,70024,5400.026374378001,5401.063574756
c063,3,1,10,46650,47414,45935,6000.039012497001,6001.213941026
c063,3,1,11,39261,39954,38719,6600.042571874001,6601.337488712
# search time: 6600.043s
# total time: 26412.558s
c063,4,1,1,1262944,1262946,1178442,600.000097165,600.248894597
c063,4,1,2,525306,527053,512336,1200.0008142370002,1200.398977242
c063,4,1,3,346690,347991,342313,1800.0017144570002,1800.521756321
c063,4,1,4,162973,163841,162568,2400.0043244500002,2400.60466561
c063,4,1,5,168473,169304,165086,3000.0094856060005,3000.710509251
c063,4,1,6,96017,96842,94335,3600.0096320160005,3600.783676166
c063,4,1,7,94254,95076,93198,4200.010833691001,4200.8670804
c063,4,1,8,65113,66007,64299,4800.016089976,4800.977190813
c063,4,1,9,70337,71111,69464,5400.0197213110005,5401.038772468
c063,4,1,10,46247,47027,45639,6000.027300977001,6001.112492214
c063,4,1,11,39381,39954,38681,6600.030718872001,6601.239473279
# search time: 6600.031s
# total time: 33014.371s
