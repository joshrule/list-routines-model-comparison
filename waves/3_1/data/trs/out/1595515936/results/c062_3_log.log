    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.39s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c062_3.json out/1595515936/results/c062_3_best.csv out/1595515936/results/c062_3_predictions.csv out/1595515936/results/c062_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 6, 0, 7, 3]), o: IntList([7, 6, 0, 7]) }
#   Datum { i: IntList([1, 3, 8, 5, 7, 6, 0, 9, 2, 4]), o: IntList([1, 3, 8, 5, 7, 6, 0, 9, 2]) }
#   Datum { i: IntList([1, 2, 5, 4, 5, 4, 7]), o: IntList([1, 2, 5, 4, 5, 4]) }
#   Datum { i: IntList([1, 9, 2, 8, 0, 6]), o: IntList([1, 9, 2, 8, 0]) }
#   Datum { i: IntList([6, 8, 9, 3, 7, 5, 2, 1]), o: IntList([6, 8, 9, 3, 7, 5, 2]) }
#   Datum { i: IntList([2, 5, 2, 7]), o: IntList([2, 5, 2]) }
#   Datum { i: IntList([4, 2, 0, 3, 4, 0, 0, 3, 4]), o: IntList([4, 2, 0, 3, 4, 0, 0, 3]) }
#   Datum { i: IntList([9, 9]), o: IntList([9]) }
#   Datum { i: IntList([1, 9, 8]), o: IntList([1, 9]) }
#   Datum { i: IntList([6, 8, 3, 7, 7, 3, 7, 7, 6, 3]), o: IntList([6, 8, 3, 7, 7, 3, 7, 7, 6]) }
#   Datum { i: IntList([8]), o: IntList([]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c062,0,3,1,990958,990960,921836,600.000554277,602.516249377
c062,0,3,2,260891,262864,255555,1200.002181339,1203.188260215
c062,0,3,3,86760,87712,87239,1800.0069013319999,1803.725054129
c062,0,3,4,64141,64804,64509,2400.0091700489997,2404.07795224
c062,0,3,5,47153,47885,47675,3000.022194936,3004.511518635
c062,0,3,6,35228,35907,35547,3600.029455993,3605.007912994
c062,0,3,7,33120,33717,33394,4200.060096398,4205.588243016
c062,0,3,8,26397,27126,26930,4800.084287932,4806.054507715
c062,0,3,9,25246,25944,25792,5400.099880303,5406.397856711
c062,0,3,10,24817,25513,25212,6000.135021303,6006.973460986
c062,0,3,11,21183,21817,21579,6600.171097133,6607.568523919
# search time: 6600.171s
# total time: 6607.897s
c062,1,3,1,975971,975973,908883,600.000638729,600.405924477
c062,1,3,2,262254,264258,256817,1200.001019151,1200.720005684
c062,1,3,3,88307,89306,88842,1800.007004387,1800.975401159
c062,1,3,4,61186,62066,61883,2400.012294653,2401.167505755
c062,1,3,5,48838,49622,49400,3000.016367729,3001.371518459
c062,1,3,6,36211,36897,36565,3600.0319552580004,3601.674454862
c062,1,3,7,33176,33785,33470,4200.033875409001,4201.916745917
c062,1,3,8,26399,27076,26914,4800.037538282001,4802.1257414
c062,1,3,9,25686,26443,26227,5400.090130928002,5402.401497669
c062,1,3,10,25037,25830,25479,6000.091333595002,6002.623982389
c062,1,3,11,20514,21087,20887,6600.093975977002,6602.858914572
# search time: 6600.094s
# total time: 13211.077s
c062,2,3,1,993860,993862,910172,600.002344403,600.303585199
c062,2,3,2,258116,260112,252868,1200.00365792,1200.501449105
c062,2,3,3,88562,89635,89072,1800.008657093,1800.643783131
c062,2,3,4,62224,62922,62512,2400.009402008,2400.777900887
c062,2,3,5,48483,49152,48930,3000.019719727,3000.89748479
c062,2,3,6,40123,40821,40439,3600.021866667,3601.040891478
c062,2,3,7,35488,36163,35804,4200.0431352939995,4201.253893287
c062,2,3,8,28948,29543,29339,4800.053247239,4801.431953947
c062,2,3,9,26896,27576,27436,5400.053599622999,5401.56592245
c062,2,3,10,26795,27493,27170,6000.072250412999,6001.735218159
c062,2,3,11,22783,23379,23101,6600.080403455999,6601.930549053
# search time: 6600.080s
# total time: 19813.239s
c062,3,3,1,1072288,1072290,1001175,600.000063375,600.268006279
c062,3,3,2,278288,280242,272199,1200.000854334,1200.436915635
c062,3,3,3,94739,95828,95259,1800.005954499,1800.547736346
c062,3,3,4,67470,68212,67899,2400.010483429,2400.63612063
c062,3,3,5,49531,50200,49949,3000.017078165,3000.822523877
c062,3,3,6,43710,44407,44013,3600.0220402679997,3600.954249418
c062,3,3,7,42839,43475,43055,4200.027297521,4201.098853478
c062,3,3,8,33938,34599,34356,4800.033362714,4801.241527947
c062,3,3,9,33214,33797,33558,5400.042288305,5401.358950038
c062,3,3,10,32206,32865,32498,6000.043864337999,6001.503712293
c062,3,3,11,26218,26865,26610,6600.048932997999,6601.620840418
# search time: 6600.049s
# total time: 26415.301s
c062,4,3,1,1271200,1271202,1184226,600.002394465,600.292615516
c062,4,3,2,328996,330972,321742,1200.004610677,1200.474962592
c062,4,3,3,116860,117837,116995,1800.0117744990002,1800.577927208
c062,4,3,4,83284,84036,83572,2400.021227436,2400.685534676
c062,4,3,5,60524,61265,61009,3000.026289751,3000.816273274
c062,4,3,6,47279,47972,47586,3600.034629518,3600.9650482
c062,4,3,7,42277,43002,42567,4200.050438356,4201.102534546
c062,4,3,8,33655,34304,34144,4800.059409844,4801.23970364
c062,4,3,9,32284,32956,32738,5400.065649886999,5401.343474606
c062,4,3,10,32731,33475,33082,6000.070065307999,6001.46486233
c062,4,3,11,26930,27557,27242,6600.092395881999,6601.67370058
# search time: 6600.092s
# total time: 33017.530s
