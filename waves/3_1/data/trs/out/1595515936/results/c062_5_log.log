    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.44s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c062_5.json out/1595515936/results/c062_5_best.csv out/1595515936/results/c062_5_predictions.csv out/1595515936/results/c062_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([9, 9]), o: IntList([9]) }
#   Datum { i: IntList([1, 9, 8]), o: IntList([1, 9]) }
#   Datum { i: IntList([1, 3, 8, 5, 7, 6, 0, 9, 2, 4]), o: IntList([1, 3, 8, 5, 7, 6, 0, 9, 2]) }
#   Datum { i: IntList([6, 8, 9, 3, 7, 5, 2, 1]), o: IntList([6, 8, 9, 3, 7, 5, 2]) }
#   Datum { i: IntList([4, 2, 0, 3, 4, 0, 0, 3, 4]), o: IntList([4, 2, 0, 3, 4, 0, 0, 3]) }
#   Datum { i: IntList([1, 2, 5, 4, 5, 4, 7]), o: IntList([1, 2, 5, 4, 5, 4]) }
#   Datum { i: IntList([1, 9, 2, 8, 0, 6]), o: IntList([1, 9, 2, 8, 0]) }
#   Datum { i: IntList([2, 5, 2, 7]), o: IntList([2, 5, 2]) }
#   Datum { i: IntList([6, 8, 3, 7, 7, 3, 7, 7, 6, 3]), o: IntList([6, 8, 3, 7, 7, 3, 7, 7, 6]) }
#   Datum { i: IntList([7, 6, 0, 7, 3]), o: IntList([7, 6, 0, 7]) }
#   Datum { i: IntList([8]), o: IntList([]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c062,0,5,1,1048586,1048588,976200,600.000024773,602.675872148
c062,0,5,2,555707,556650,538244,1200.000454178,1203.066971216
c062,0,5,3,269336,271128,265885,1800.002050354,1803.416160778
c062,0,5,4,84413,85219,84645,2400.008951504,2403.648858403
c062,0,5,5,56285,57003,56653,3000.021362893,3003.908523078
c062,0,5,6,42247,43041,42775,3600.027153066,3604.160527034
c062,0,5,7,33547,34207,33967,4200.033264273,4204.377131118
c062,0,5,8,29415,30068,29841,4800.038052983,4804.699303826
c062,0,5,9,26563,27292,27139,5400.060335783,5405.056609569
c062,0,5,10,22235,22809,22635,6000.096237416999,6005.415879591
c062,0,5,11,20606,21308,21128,6600.107118614,6605.763607043
# search time: 6600.107s
# total time: 6606.096s
c062,1,5,1,1033210,1033212,947554,600.000062648,600.414631952
c062,1,5,2,641914,644093,615760,1200.000765705,1200.641322929
c062,1,5,3,267620,269733,264411,1800.001031511,1800.810410682
c062,1,5,4,83994,84898,84291,2400.003099337,2400.949654011
c062,1,5,5,56217,56951,56628,3000.00498771,3001.088146766
c062,1,5,6,41867,42683,42340,3600.007661399,3601.247609139
c062,1,5,7,33200,33901,33684,4200.015109837,4201.367013573
c062,1,5,8,29249,29882,29666,4800.020186706,4801.560088866
c062,1,5,9,26619,27256,27106,5400.02069565,5401.713600572
c062,1,5,10,22171,22878,22698,6000.048448271999,6001.883200737
c062,1,5,11,20480,21146,20991,6600.108702408999,6602.163097637
# search time: 6600.109s
# total time: 13208.529s
c062,2,5,1,1040316,1040318,955769,600.000858373,600.219201103
c062,2,5,2,578722,580889,559473,1200.002044511,1200.382866204
c062,2,5,3,256052,256556,251444,1800.0036855629999,1800.525155175
c062,2,5,4,83836,84708,84130,2400.006006826,2400.619416687
c062,2,5,5,55847,56595,56288,3000.010097773,3000.732208177
c062,2,5,6,44710,45468,45186,3600.014080136,3600.848296545
c062,2,5,7,37185,37865,37619,4200.022229716,4200.96407802
c062,2,5,8,32297,32820,32457,4800.02246323,4801.070915136
c062,2,5,9,30212,30817,30602,5400.030390455,5401.192168607
c062,2,5,10,24621,25257,24960,6000.045859182,6001.412330831
c062,2,5,11,22460,23141,22901,6600.054391324,6601.570916224
# search time: 6600.054s
# total time: 19810.316s
c062,3,5,1,1174260,1174262,1077223,600.000034829,600.193162127
c062,3,5,2,663507,665718,638845,1200.000379426,1200.334502421
c062,3,5,3,302571,304514,298547,1800.0016248800002,1800.442511974
c062,3,5,4,96763,97661,96992,2400.006757334,2400.53615951
c062,3,5,5,64161,65046,64600,3000.0073124620003,3000.617844807
c062,3,5,6,52432,53177,52802,3600.007860817,3600.686694205
c062,3,5,7,43893,44768,44386,4200.00987989,4200.783679785
c062,3,5,8,37841,38536,38223,4800.01861035,4800.902274178
c062,3,5,9,34309,34872,34636,5400.0236914609995,5400.988206313
c062,3,5,10,28474,29164,28950,6000.03420482,6001.091783302
c062,3,5,11,25798,26492,26231,6600.034664944,6601.256003661
# search time: 6600.035s
# total time: 26411.926s
c062,4,5,1,1377304,1377306,1270847,600.004131153,600.244298328
c062,4,5,2,729019,731060,701912,1200.004135703,1200.394185465
c062,4,5,3,343729,345767,338884,1800.0054179869999,1800.492763767
c062,4,5,4,110995,111976,111183,2400.007492633,2400.563445936
c062,4,5,5,73454,74327,73897,3000.0082301029997,3000.629562987
c062,4,5,6,55454,56200,55742,3600.008781816,3600.756691394
c062,4,5,7,45197,45853,45502,4200.018790149,4200.910511369
c062,4,5,8,38260,39046,38693,4800.021698842,4800.992322527
c062,4,5,9,35375,36002,35732,5400.025723095,5401.081071576
c062,4,5,10,29246,29925,29672,6000.047712984,6001.177994534
c062,4,5,11,27185,27849,27624,6600.058663034,6601.320080585
# search time: 6600.059s
# total time: 33013.601s
