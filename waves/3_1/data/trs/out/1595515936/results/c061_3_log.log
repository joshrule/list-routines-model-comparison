    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.38s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c061_3.json out/1595515936/results/c061_3_best.csv out/1595515936/results/c061_3_predictions.csv out/1595515936/results/c061_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 8, 4, 0, 3]), o: IntList([3]) }
#   Datum { i: IntList([9, 2, 2, 5, 6, 2]), o: IntList([2]) }
#   Datum { i: IntList([1, 7, 5, 6, 9, 8]), o: IntList([8]) }
#   Datum { i: IntList([2, 0, 1]), o: IntList([1]) }
#   Datum { i: IntList([7, 7, 7]), o: IntList([7]) }
#   Datum { i: IntList([9, 3, 2, 4]), o: IntList([4]) }
#   Datum { i: IntList([6, 6]), o: IntList([6]) }
#   Datum { i: IntList([1, 1, 5]), o: IntList([5]) }
#   Datum { i: IntList([0, 0, 0, 0]), o: IntList([0]) }
#   Datum { i: IntList([4, 3]), o: IntList([3]) }
#   Datum { i: IntList([8, 2, 7, 6, 1, 8, 5, 9]), o: IntList([9]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c061,0,3,1,967893,967895,886576,600.000214125,602.569493821
c061,0,3,2,394291,396304,384032,1200.000805482,1203.436678563
c061,0,3,3,239078,240099,230870,1800.003214115,1804.048893103
c061,0,3,4,169689,170518,164137,2400.00669622,2404.590942
c061,0,3,5,138775,139490,134086,3000.008768711,3005.094682041
c061,0,3,6,122442,123182,119690,3600.011374971,3605.611691507
c061,0,3,7,97009,97845,93830,4200.0157946849995,4206.008282472
c061,0,3,8,91226,92037,88762,4800.023153347999,4806.460178037
c061,0,3,9,80450,81320,78217,5400.023707502999,5406.877110852
c061,0,3,10,63808,64506,61939,6000.026013829999,6007.347284401
c061,0,3,11,58548,59251,57049,6600.0333728059995,6607.816117958
# search time: 6600.033s
# total time: 6608.160s
c061,1,3,1,956185,956187,888679,600.002827408,600.275349447
c061,1,3,2,396900,398754,386405,1200.002889461,1200.56171318
c061,1,3,3,237534,238552,229297,1800.0029081789999,1800.813395761
c061,1,3,4,170313,171085,164960,2400.004318248,2400.996848878
c061,1,3,5,141532,142325,136619,3000.0069930199998,3001.169569309
c061,1,3,6,125909,126729,122967,3600.011499962,3601.393827257
c061,1,3,7,94852,95586,91668,4200.01221177,4201.616154266
c061,1,3,8,90825,91508,88303,4800.019042774,4801.848678135
c061,1,3,9,79434,80235,77037,5400.019454831,5402.066828792
c061,1,3,10,62945,63719,61205,6000.027452575,6002.306284354
c061,1,3,11,56685,57351,55070,6600.038364591001,6602.559498195
# search time: 6600.038s
# total time: 13211.006s
c061,2,3,1,956419,956421,875975,600.004254781,600.218108429
c061,2,3,2,390914,393197,380899,1200.0067102130001,1200.405287715
c061,2,3,3,229457,230525,221687,1800.0087830440002,1800.570718293
c061,2,3,4,166100,166921,160859,2400.009680092,2400.721077733
c061,2,3,5,137898,138685,133261,3000.011623943,3000.845703321
c061,2,3,6,135695,136544,132749,3600.0142869009997,3601.018455841
c061,2,3,7,105658,106462,102172,4200.01549492,4201.163486869
c061,2,3,8,99324,100063,96582,4800.016122657,4801.320081557
c061,2,3,9,89521,90353,86941,5400.021728113999,5401.485402808
c061,2,3,10,70117,70883,68090,6000.023778559999,6001.659610653
c061,2,3,11,66223,67043,64518,6600.0297963269995,6601.83744878
# search time: 6600.030s
# total time: 19813.289s
c061,3,3,1,1061815,1061817,969320,600.00018484,600.214708261
c061,3,3,2,419362,421528,408629,1200.00077749,1200.401601277
c061,3,3,3,261042,262061,251885,1800.001141151,1800.582226316
c061,3,3,4,184341,185173,178252,2400.001742903,2400.728102319
c061,3,3,5,154295,155012,148826,3000.008445083,3000.867216672
c061,3,3,6,156466,157246,152574,3600.008517468,3600.984065034
c061,3,3,7,128661,129491,124296,4200.012582533,4201.106019735
c061,3,3,8,120231,121039,116897,4800.0157933,4801.234573685
c061,3,3,9,107814,108650,104552,5400.0229805300005,5401.380986788
c061,3,3,10,82101,82898,79475,6000.025731521,6001.517188474
c061,3,3,11,75709,76562,73677,6600.029772661001,6601.657815759
# search time: 6600.030s
# total time: 26415.318s
c061,4,3,1,1242482,1242484,1137039,600.000282371,600.26806229
c061,4,3,2,514086,516416,501039,1200.000321148,1200.45751245
c061,4,3,3,304137,305264,293603,1800.001344557,1800.571034626
c061,4,3,4,216055,216837,208795,2400.001790141,2400.681908126
c061,4,3,5,181742,182474,175318,3000.0043563100003,3000.792059644
c061,4,3,6,158581,159453,155012,3600.0053402920003,3600.965521124
c061,4,3,7,122777,123711,118830,4200.0081869450005,4201.064064694
c061,4,3,8,114502,115307,111376,4800.009811943,4801.187849932
c061,4,3,9,99237,100045,96247,5400.013487470001,5401.321725109
c061,4,3,10,75885,76685,73624,6000.017493852,6001.447235532
c061,4,3,11,70608,71266,68439,6600.018710761,6601.57443369
# search time: 6600.019s
# total time: 33017.685s
