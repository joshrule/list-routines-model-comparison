    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.34s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c063_2.json out/1595515936/results/c063_2_best.csv out/1595515936/results/c063_2_predictions.csv out/1595515936/results/c063_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 8, 4, 4]), o: IntList([]) }
#   Datum { i: IntList([2, 2, 2, 2]), o: IntList([2]) }
#   Datum { i: IntList([4, 1, 1, 4, 1, 1, 3]), o: IntList([1, 3]) }
#   Datum { i: IntList([0, 5, 0, 5, 5, 7]), o: IntList([5, 0, 5, 5, 7]) }
#   Datum { i: IntList([0, 3, 9, 4, 6, 6, 7, 8, 2]), o: IntList([3, 9, 4, 6, 6, 7, 8, 2]) }
#   Datum { i: IntList([1, 7, 9, 9, 8, 4, 1, 7, 8]), o: IntList([9, 9, 8, 4, 1, 7, 8]) }
#   Datum { i: IntList([3, 8, 8, 7, 7, 7, 8, 8]), o: IntList([7, 7, 8, 8]) }
#   Datum { i: IntList([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), o: IntList([3, 3, 3, 3, 3, 3]) }
#   Datum { i: IntList([0, 2, 0]), o: IntList([2, 0]) }
#   Datum { i: IntList([2, 6, 2, 6, 6, 6]), o: IntList([6, 6, 6]) }
#   Datum { i: IntList([0, 9, 7, 1, 1, 5, 4, 3, 6, 6]), o: IntList([9, 7, 1, 1, 5, 4, 3, 6, 6]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c063,0,2,1,1018971,1018973,948703,600.000013158,602.418852359
c063,0,2,2,731324,733396,672137,1200.000734879,1203.336775032
c063,0,2,3,353145,354321,340706,1800.001728877,1803.725493517
c063,0,2,4,180242,181126,174263,2400.00262892,2404.021080472
c063,0,2,5,104465,105281,101292,3000.00321341,3004.26027583
c063,0,2,6,62057,62925,60864,3600.01616834,3604.530327952
c063,0,2,7,45062,45920,44512,4200.021215808,4204.746773446
c063,0,2,8,40968,41618,40585,4800.0264978390005,4805.015438816
c063,0,2,9,34942,35646,34749,5400.034189357,5405.373569213
c063,0,2,10,32886,33542,32636,6000.045009046,6005.673884081
c063,0,2,11,35459,36259,35540,6600.04542441,6606.04061065
# search time: 6600.045s
# total time: 6606.280s
c063,1,2,1,1020152,1020154,934519,600.001676158,600.270727779
c063,1,2,2,740388,742688,679379,1200.002289008,1200.630997905
c063,1,2,3,355744,356623,343689,1800.0034554449999,1800.839190258
c063,1,2,4,180918,181810,175184,2400.0061300439997,2400.993058023
c063,1,2,5,104965,105622,101707,3000.0149948559997,3001.116554105
c063,1,2,6,62355,63144,61098,3600.021573616,3601.301147332
c063,1,2,7,45190,45932,44495,4200.028976471,4201.447002568
c063,1,2,8,41511,42197,41152,4800.030367501,4801.594834821
c063,1,2,9,34603,35314,34422,5400.049473723,5401.84620818
c063,1,2,10,32232,32971,32054,6000.058380976,6001.968031169
c063,1,2,11,35080,35819,35072,6600.063107663,6602.144671861
# search time: 6600.063s
# total time: 13208.837s
c063,2,2,1,974469,974471,912657,600.000192031,600.202403439
c063,2,2,2,737092,738934,675859,1200.000260945,1200.453664161
c063,2,2,3,354748,356013,342492,1800.000510405,1800.598346779
c063,2,2,4,177607,178606,172208,2400.00058989,2400.694275509
c063,2,2,5,108784,109624,105624,3000.004216676,3000.779567598
c063,2,2,6,67623,68482,66245,3600.011958406,3600.896610532
c063,2,2,7,49961,50649,49089,4200.021217453,4200.96729749
c063,2,2,8,44796,45572,44399,4800.031059598,4801.099942981
c063,2,2,9,37836,38457,37440,5400.041313768,5401.220193079
c063,2,2,10,35500,36158,35157,6000.044207024,6001.327648415
c063,2,2,11,38342,38978,38164,6600.059346571,6601.493266416
# search time: 6600.059s
# total time: 19810.798s
c063,3,2,1,1162148,1162150,1075936,600.00152583,600.204491519
c063,3,2,2,806831,809323,742583,1200.002063758,1200.417829685
c063,3,2,3,380136,381285,368658,1800.0026433980001,1800.559057929
c063,3,2,4,191056,192004,185390,2400.0034997400003,2400.657381683
c063,3,2,5,112309,113071,108928,3000.009232575,3000.742642654
c063,3,2,6,75649,76435,73929,3600.0147909790003,3600.833988703
c063,3,2,7,57649,58303,56626,4200.018564022001,4200.914083451
c063,3,2,8,53189,53920,52558,4800.030673561001,4801.04743099
c063,3,2,9,44787,45543,44400,5400.035901785001,5401.181422807
c063,3,2,10,41986,42754,41626,6000.042871106001,6001.291389781
c063,3,2,11,44984,45769,44904,6600.059614644001,6601.403638205
# search time: 6600.060s
# total time: 26412.469s
c063,4,2,1,1352332,1352334,1249406,600.000498184,600.210098262
c063,4,2,2,950740,953143,873881,1200.000773038,1200.412738309
c063,4,2,3,455416,456624,441298,1800.0016402810002,1800.551230554
c063,4,2,4,227311,228274,219898,2400.0061704610002,2400.646239127
c063,4,2,5,131141,132011,127195,3000.009401743,3000.72179712
c063,4,2,6,83198,83923,81226,3600.018401147,3600.799518262
c063,4,2,7,60756,61491,59373,4200.019509785,4200.866628974
c063,4,2,8,55492,56163,54660,4800.02774669,4800.950199349
c063,4,2,9,46381,47084,45825,5400.030819078,5401.028339358
c063,4,2,10,43196,43918,42661,6000.03765982,6001.114504918
c063,4,2,11,45527,46258,45315,6600.046557877,6601.208896854
# search time: 6600.047s
# total time: 33014.151s
