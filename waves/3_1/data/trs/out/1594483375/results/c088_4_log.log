    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.11s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c088_4.json out/1594483375/results/c088_4_best.csv out/1594483375/results/c088_4_predictions.csv out/1594483375/results/c088_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([84, 86, 3, 84, 3, 89]), o: IntList([84, 3, 86, 84, 3, 89]) }
#   Datum { i: IntList([56, 9, 34, 56, 90, 59, 6, 8, 6]), o: IntList([56, 34, 9, 56, 90, 59, 6, 8, 6]) }
#   Datum { i: IntList([76, 51, 51, 24, 2, 7, 48, 91, 67, 24]), o: IntList([24, 51, 51, 76, 2, 7, 48, 91, 67, 24]) }
#   Datum { i: IntList([19, 1, 99, 19, 20, 99, 20]), o: IntList([19, 99, 1, 19, 20, 99, 20]) }
#   Datum { i: IntList([74, 4, 40, 74]), o: IntList([74, 40, 4, 74]) }
#   Datum { i: IntList([96, 96, 8, 96, 51]), o: IntList([96, 8, 96, 96, 51]) }
#   Datum { i: IntList([17, 41, 41, 85, 25, 2, 17, 25, 17, 10]), o: IntList([85, 41, 41, 17, 25, 2, 17, 25, 17, 10]) }
#   Datum { i: IntList([66, 16, 16, 38, 11, 85, 88]), o: IntList([38, 16, 16, 66, 11, 85, 88]) }
#   Datum { i: IntList([95, 31, 31, 4, 39, 5, 32, 0]), o: IntList([4, 31, 31, 95, 39, 5, 32, 0]) }
#   Datum { i: IntList([15, 53, 53, 95]), o: IntList([95, 53, 53, 15]) }
#   Datum { i: IntList([5, 77, 77, 52, 6, 35, 90, 57, 27]), o: IntList([52, 77, 77, 5, 6, 35, 90, 57, 27]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c088,0,4,1,785563,785564,694332,600.005175623,603.571935274
c088,0,4,2,249166,249331,242296,1200.018854814,1205.122267321
c088,0,4,3,132662,132832,129092,1800.021139662,1806.233087196
c088,0,4,4,63610,63766,62169,2400.023547538,2407.656523429
c088,0,4,5,64737,64903,62453,3000.028606789,3008.582767414
c088,0,4,6,44894,45061,43877,3600.044695957,3609.975685696
c088,0,4,7,39510,39671,38701,4200.045701616,4211.345476005
c088,0,4,8,29607,29776,29090,4800.065736208,4812.958989168
c088,0,4,9,34634,34807,33608,5400.073623497,5413.637995449
c088,0,4,10,22035,22200,21767,6000.084741486,6015.501735651
c088,0,4,11,28683,28857,27911,6600.099975361,6616.315530372
# search time: 6600.100s
# total time: 6616.736s
c088,1,4,1,733766,733767,651303,600.006059972,600.397921977
c088,1,4,2,244305,244473,237511,1200.006162676,1201.048573782
c088,1,4,3,134828,134997,131111,1800.0068854810002,1801.526284581
c088,1,4,4,60881,61044,59423,2400.009263509,2402.288631458
c088,1,4,5,63056,63226,60954,3000.016393046,3002.70723969
c088,1,4,6,44399,44570,43441,3600.021499831,3603.518241924
c088,1,4,7,38755,38924,38001,4200.03981917,4204.516313943
c088,1,4,8,29801,29964,29269,4800.065466332,4805.263116279
c088,1,4,9,34466,34633,33427,5400.077411957,5405.737606444
c088,1,4,10,22357,22525,22029,6000.104683465999,6006.42158914
c088,1,4,11,28218,28390,27600,6600.109601928999,6606.79507831
# search time: 6600.110s
# total time: 13223.779s
c088,2,4,1,726956,726957,649731,600.000255718,600.275054822
c088,2,4,2,240982,241148,234660,1200.0022351540001,1200.957975526
c088,2,4,3,120404,120564,117129,1800.00331796,1801.227309487
c088,2,4,4,60056,60219,58598,2400.007832437,2401.770422139
c088,2,4,5,63109,63274,60899,3000.0101838650003,3002.017401253
c088,2,4,6,43960,44124,42941,3600.0139377670002,3602.424983174
c088,2,4,7,38456,38625,37708,4200.0160857050005,4202.919595456
c088,2,4,8,29723,29887,29218,4800.017134419,4803.472920381
c088,2,4,9,33505,33673,32359,5400.035827386,5403.746656242
c088,2,4,10,22132,22294,21784,6000.063671554,6004.868792126
c088,2,4,11,27521,27682,26623,6600.078158071001,6605.123785143
# search time: 6600.078s
# total time: 19829.374s
c088,3,4,1,756306,756307,647139,600.000726165,600.16138775
c088,3,4,2,242300,242472,235548,1200.003526067,1200.493408037
c088,3,4,3,129857,130030,126348,1800.004126743,1800.770841913
c088,3,4,4,60734,60908,59292,2400.008055809,2401.057432253
c088,3,4,5,63254,63429,61097,3000.010905191,3001.217441134
c088,3,4,6,43378,43552,42465,3600.0183153479998,3601.570785561
c088,3,4,7,38287,38456,37590,4200.031984634,4201.975968892
c088,3,4,8,29592,29766,29089,4800.050859864,4802.421978821
c088,3,4,9,33199,33371,32111,5400.057292908999,5402.601443112
c088,3,4,10,22157,22333,21880,6000.091835513999,6003.182925727
c088,3,4,11,26630,26808,25975,6600.098540253,6603.395565633
# search time: 6600.099s
# total time: 26433.247s
c088,4,4,1,754713,754714,672495,600.000287388,600.245975718
c088,4,4,2,244473,244650,237808,1200.008383081,1200.516484949
c088,4,4,3,133033,133211,129355,1800.0105471489999,1800.726879354
c088,4,4,4,59854,60026,58469,2400.019261612,2401.021766664
c088,4,4,5,63923,64101,61663,3000.028394729,3001.184527051
c088,4,4,6,43429,43606,42444,3600.029072026,3601.449961711
c088,4,4,7,38799,38968,37971,4200.050161952,4201.758373968
c088,4,4,8,28812,28988,28355,4800.065580247,4802.131791738
c088,4,4,9,32888,33060,31796,5400.06850089,5402.345489685
c088,4,4,10,21676,21848,21394,6000.086584246,6002.817036636
c088,4,4,11,28151,28324,27486,6600.088504654,6602.907512503
# search time: 6600.089s
# total time: 33036.640s
