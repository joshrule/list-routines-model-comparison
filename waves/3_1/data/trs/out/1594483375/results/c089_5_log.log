    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.19s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c089_5.json out/1594483375/results/c089_5_best.csv out/1594483375/results/c089_5_predictions.csv out/1594483375/results/c089_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([90, 7, 14, 59, 53, 24, 25]), o: IntList([59, 7, 14, 90, 53, 24, 25]) }
#   Datum { i: IntList([28, 99, 6, 43, 41, 28]), o: IntList([28, 6, 99, 43, 41, 28]) }
#   Datum { i: IntList([96, 8, 51, 44, 20]), o: IntList([44, 8, 51, 96, 20]) }
#   Datum { i: IntList([58, 65, 32, 63]), o: IntList([58, 32, 65, 63]) }
#   Datum { i: IntList([78, 97, 77, 93, 64, 3, 38, 18, 0, 24]), o: IntList([78, 77, 97, 93, 64, 3, 38, 18, 0, 24]) }
#   Datum { i: IntList([23, 5, 98, 7, 4, 1, 42, 16]), o: IntList([7, 5, 98, 23, 4, 1, 42, 16]) }
#   Datum { i: IntList([45, 25, 54, 3, 54, 0, 56, 92, 55, 1]), o: IntList([3, 25, 54, 45, 54, 0, 56, 92, 55, 1]) }
#   Datum { i: IntList([57, 62, 7, 87, 35, 2, 70, 51, 33]), o: IntList([57, 7, 62, 87, 35, 2, 70, 51, 33]) }
#   Datum { i: IntList([44, 94, 66, 61, 88, 6, 1, 46, 84]), o: IntList([44, 66, 94, 61, 88, 6, 1, 46, 84]) }
#   Datum { i: IntList([71, 86, 86, 52, 27, 27, 71, 52]), o: IntList([52, 86, 86, 71, 27, 27, 71, 52]) }
#   Datum { i: IntList([13, 69, 48, 34, 8, 60]), o: IntList([13, 48, 69, 34, 8, 60]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c089,0,5,1,744477,744478,660739,600.002106906,603.839674647
c089,0,5,2,207606,207772,202667,1200.002631629,1205.561710008
c089,0,5,3,143737,143906,142826,1800.011963469,1806.741006418
c089,0,5,4,109309,109478,108546,2400.01408128,2407.882531214
c089,0,5,5,94023,94203,91094,3000.015527142,3008.57081175
c089,0,5,6,64869,65037,62815,3600.02183312,3609.201201581
c089,0,5,7,54195,54358,52704,4200.02202884,4209.832729614
c089,0,5,8,37907,38074,37703,4800.038486017999,4810.769062339
c089,0,5,9,30668,30840,30462,5400.045860482999,5411.561908079
c089,0,5,10,26022,26193,25882,6000.063178911999,6012.286770343
c089,0,5,11,24350,24521,24224,6600.077631855999,6613.253168478
# search time: 6600.078s
# total time: 6613.682s
c089,1,5,1,669309,669310,587968,600.000049618,600.339420035
c089,1,5,2,203527,203698,198517,1200.002117261,1201.013729293
c089,1,5,3,142856,143033,142138,1800.003558848,1801.515811137
c089,1,5,4,110470,110646,109502,2400.004007734,2401.964099001
c089,1,5,5,92501,92675,89468,3000.006523954,3002.311882107
c089,1,5,6,65477,65647,63595,3600.011063171,3602.600440375
c089,1,5,7,53791,53964,52249,4200.03449294,4202.874392547
c089,1,5,8,38574,38749,38314,4800.034906695,4803.286938845
c089,1,5,9,32460,32630,32186,5400.046145555,5403.640046339
c089,1,5,10,27612,27794,27424,6000.055235604001,6003.962266107
c089,1,5,11,24009,24189,23886,6600.072029878001,6604.288679235
# search time: 6600.072s
# total time: 13218.235s
c089,2,5,1,837816,837817,713446,600.000238556,600.221266545
c089,2,5,2,215179,215355,210243,1200.000590748,1200.597761328
c089,2,5,3,141687,141860,140869,1800.001435596,1800.944297986
c089,2,5,4,109824,109999,108880,2400.008235868,2401.238124603
c089,2,5,5,92560,92737,89550,3000.015441926,3001.478130067
c089,2,5,6,64924,65088,63118,3600.0230980690003,3601.682642593
c089,2,5,7,52653,52824,51156,4200.03120818,4201.851334754
c089,2,5,8,38209,38375,37886,4800.038876419,4802.080254942
c089,2,5,9,30251,30419,30028,5400.0436316430005,5402.301488264
c089,2,5,10,25416,25587,25267,6000.091327698001,6002.625815737
c089,2,5,11,23756,23927,23638,6600.108070534001,6602.905508421
# search time: 6600.108s
# total time: 19821.981s
c089,3,5,1,696524,696525,622802,600.001019052,600.243427085
c089,3,5,2,215518,215687,210464,1200.0040742239999,1200.51309706
c089,3,5,3,137813,137987,137122,1800.0051649539998,1800.816174556
c089,3,5,4,109736,109900,108753,2400.0061927079996,2401.02877807
c089,3,5,5,93168,93330,90154,3000.0070097889998,3001.202571203
c089,3,5,6,64920,65087,63143,3600.012509153,3601.35406856
c089,3,5,7,53111,53276,51591,4200.012925449,4201.501745282
c089,3,5,8,36619,36784,36449,4800.02271165,4801.806813228
c089,3,5,9,32325,32486,32011,5400.025470351,5401.988342463
c089,3,5,10,25675,25839,25525,6000.03523818,6002.130745206
c089,3,5,11,24057,24217,23921,6600.0408583220005,6602.341036098
# search time: 6600.041s
# total time: 26424.590s
c089,4,5,1,655283,655284,573880,600.000280612,600.182147709
c089,4,5,2,204836,205001,200004,1200.001755948,1200.419429838
c089,4,5,3,141250,141416,140477,1800.052144846,1800.638628396
c089,4,5,4,107104,107281,106382,2400.056336528,2400.85486653
c089,4,5,5,92875,93047,89848,3000.059599707,3000.999257253
c089,4,5,6,64875,65038,62955,3600.066581051,3601.147643709
c089,4,5,7,52317,52479,50852,4200.067158575,4201.28779739
c089,4,5,8,38102,38267,37802,4800.073017617,4801.426490301
c089,4,5,9,32361,32527,32066,5400.076538823,5401.605052172
c089,4,5,10,25656,25823,25504,6000.085184177,6001.757368572
c089,4,5,11,22695,22863,22599,6600.111503299,6601.99924497
# search time: 6600.112s
# total time: 33027.142s
