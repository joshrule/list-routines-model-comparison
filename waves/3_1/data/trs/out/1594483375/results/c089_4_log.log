    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.16s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c089_4.json out/1594483375/results/c089_4_best.csv out/1594483375/results/c089_4_predictions.csv out/1594483375/results/c089_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([28, 99, 6, 43, 41, 28]), o: IntList([28, 6, 99, 43, 41, 28]) }
#   Datum { i: IntList([71, 86, 86, 52, 27, 27, 71, 52]), o: IntList([52, 86, 86, 71, 27, 27, 71, 52]) }
#   Datum { i: IntList([58, 65, 32, 63]), o: IntList([58, 32, 65, 63]) }
#   Datum { i: IntList([45, 25, 54, 3, 54, 0, 56, 92, 55, 1]), o: IntList([3, 25, 54, 45, 54, 0, 56, 92, 55, 1]) }
#   Datum { i: IntList([44, 94, 66, 61, 88, 6, 1, 46, 84]), o: IntList([44, 66, 94, 61, 88, 6, 1, 46, 84]) }
#   Datum { i: IntList([96, 8, 51, 44, 20]), o: IntList([44, 8, 51, 96, 20]) }
#   Datum { i: IntList([23, 5, 98, 7, 4, 1, 42, 16]), o: IntList([7, 5, 98, 23, 4, 1, 42, 16]) }
#   Datum { i: IntList([57, 62, 7, 87, 35, 2, 70, 51, 33]), o: IntList([57, 7, 62, 87, 35, 2, 70, 51, 33]) }
#   Datum { i: IntList([78, 97, 77, 93, 64, 3, 38, 18, 0, 24]), o: IntList([78, 77, 97, 93, 64, 3, 38, 18, 0, 24]) }
#   Datum { i: IntList([90, 7, 14, 59, 53, 24, 25]), o: IntList([59, 7, 14, 90, 53, 24, 25]) }
#   Datum { i: IntList([13, 69, 48, 34, 8, 60]), o: IntList([13, 48, 69, 34, 8, 60]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c089,0,4,1,807042,807043,724815,600.001173394,603.666095906
c089,0,4,2,239579,239749,233192,1200.0040020239999,1205.211741767
c089,0,4,3,126691,126863,125970,1800.005109659,1806.332935027
c089,0,4,4,105368,105535,104540,2400.007816417,2407.214524208
c089,0,4,5,66269,66442,64476,3000.016429105,3008.022043507
c089,0,4,6,51402,51570,50940,3600.040459849,3608.822153323
c089,0,4,7,45325,45496,44998,4200.044034256,4209.608377264
c089,0,4,8,39180,39345,38746,4800.054433482,4810.131991534
c089,0,4,9,32050,32218,31690,5400.061634072999,5410.773141174
c089,0,4,10,26884,27053,26660,6000.064790398999,6011.529112208
c089,0,4,11,23848,24016,23638,6600.073343758999,6612.463739979
# search time: 6600.073s
# total time: 6612.738s
c089,1,4,1,826336,826337,708031,600.002155365,600.281116038
c089,1,4,2,239130,239301,232444,1200.006177641,1200.961696068
c089,1,4,3,127652,127828,126979,1800.0069372799999,1801.502532888
c089,1,4,4,108959,109132,108124,2400.008285266,2401.888389395
c089,1,4,5,69272,69449,67345,3000.012105381,3002.246090971
c089,1,4,6,53769,53947,53277,3600.0149597,3602.618007237
c089,1,4,7,47831,48002,47516,4200.015361472,4203.047101745
c089,1,4,8,40349,40527,39967,4800.019598824,4803.442252031
c089,1,4,9,33514,33690,33181,5400.023053747001,5403.714033078
c089,1,4,10,28434,28611,28201,6000.095994605001,6004.155260386
c089,1,4,11,25453,25632,25258,6600.106457048001,6604.661559485
# search time: 6600.106s
# total time: 13217.952s
c089,2,4,1,787546,787547,708235,600.000877513,600.313800701
c089,2,4,2,242018,242189,235313,1200.002375326,1200.713507966
c089,2,4,3,126347,126523,125595,1800.003138054,1801.05648864
c089,2,4,4,105389,105562,104726,2400.0050486259997,2401.351030707
c089,2,4,5,69855,70028,67897,3000.0061923329995,3001.548836834
c089,2,4,6,52044,52220,51644,3600.0152287599994,3601.85455705
c089,2,4,7,47459,47637,47119,4200.018814837,4202.164227334
c089,2,4,8,39957,40132,39557,4800.031157372,4802.383439273
c089,2,4,9,33374,33549,33025,5400.034880302,5402.55999
c089,2,4,10,27940,28110,27643,6000.039536879,6002.718282422
c089,2,4,11,23735,23911,23577,6600.042251542,6602.906570605
# search time: 6600.042s
# total time: 19821.565s
c089,3,4,1,913275,913276,785395,600.000027749,600.216486068
c089,3,4,2,239111,239285,232699,1200.000995096,1200.511653521
c089,3,4,3,121272,121442,120565,1800.0028373290002,1800.769324851
c089,3,4,4,102347,102522,101767,2400.004724488,2400.955539729
c089,3,4,5,67183,67360,65259,3000.005069179,3001.136825417
c089,3,4,6,51378,51554,50883,3600.0095696040003,3601.345167335
c089,3,4,7,46344,46514,45978,4200.011261397,4201.464516487
c089,3,4,8,38952,39124,38514,4800.013230085,4801.62230311
c089,3,4,9,30286,30457,30019,5400.013978064,5401.803189602
c089,3,4,10,25474,25645,25285,6000.0154397080005,6001.981307857
c089,3,4,11,24025,24204,23840,6600.018048686001,6602.102595547
# search time: 6600.018s
# total time: 26423.974s
c089,4,4,1,750805,750806,666441,600.009724253,600.224176923
c089,4,4,2,245600,245774,239116,1200.02224316,1200.492360362
c089,4,4,3,129991,130172,129231,1800.027644406,1800.682272438
c089,4,4,4,108281,108457,107432,2400.0316680309998,2400.820500847
c089,4,4,5,69370,69546,67428,3000.035118338,3000.985008565
c089,4,4,6,52067,52233,51633,3600.04250968,3601.130882638
c089,4,4,7,47389,47577,46976,4200.0476365859995,4201.251506864
c089,4,4,8,40033,40214,39636,4800.061904472,4801.419456928
c089,4,4,9,32805,32983,32486,5400.0668922429995,5401.55965846
c089,4,4,10,26149,26321,25955,6000.068571164,6001.709124271
c089,4,4,11,24222,24398,24088,6600.071827568,6601.815287113
# search time: 6600.072s
# total time: 33026.338s
