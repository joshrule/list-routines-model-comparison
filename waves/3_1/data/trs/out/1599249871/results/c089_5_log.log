    Finished release [optimized + debuginfo] target(s) in 0.03s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c089_5.json out/1599249871/results/c089_5_best.csv out/1599249871/results/c089_5_predictions.csv out/1599249871/results/c089_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([90, 7, 14, 59, 53, 24, 25]), o: IntList([59, 7, 14, 90, 53, 24, 25]) }
#   Datum { i: IntList([28, 99, 6, 43, 41, 28]), o: IntList([28, 6, 99, 43, 41, 28]) }
#   Datum { i: IntList([96, 8, 51, 44, 20]), o: IntList([44, 8, 51, 96, 20]) }
#   Datum { i: IntList([58, 65, 32, 63]), o: IntList([58, 32, 65, 63]) }
#   Datum { i: IntList([78, 97, 77, 93, 64, 3, 38, 18, 0, 24]), o: IntList([78, 77, 97, 93, 64, 3, 38, 18, 0, 24]) }
#   Datum { i: IntList([23, 5, 98, 7, 4, 1, 42, 16]), o: IntList([7, 5, 98, 23, 4, 1, 42, 16]) }
#   Datum { i: IntList([45, 25, 54, 3, 54, 0, 56, 92, 55, 1]), o: IntList([3, 25, 54, 45, 54, 0, 56, 92, 55, 1]) }
#   Datum { i: IntList([57, 62, 7, 87, 35, 2, 70, 51, 33]), o: IntList([57, 7, 62, 87, 35, 2, 70, 51, 33]) }
#   Datum { i: IntList([44, 94, 66, 61, 88, 6, 1, 46, 84]), o: IntList([44, 66, 94, 61, 88, 6, 1, 46, 84]) }
#   Datum { i: IntList([71, 86, 86, 52, 27, 27, 71, 52]), o: IntList([52, 86, 86, 71, 27, 27, 71, 52]) }
#   Datum { i: IntList([13, 69, 48, 34, 8, 60]), o: IntList([13, 48, 69, 34, 8, 60]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c089,0,5,1,813730,813732,748224,600.000198432,604.286504321
c089,0,5,2,129486,131649,128394,1200.00304852,1205.070709834
c089,0,5,3,78727,79631,79059,1800.003876793,1805.576825787
c089,0,5,4,59813,60613,59959,2400.009504322,2406.012357032
c089,0,5,5,54232,54958,53174,3000.012580796,3006.394129873
c089,0,5,6,35175,36028,34981,3600.018326206,3606.691056147
c089,0,5,7,27755,28582,27860,4200.020298518,4206.923792488
c089,0,5,8,18580,18977,18738,4800.040921082,4807.187115171
c089,0,5,9,14920,15673,15435,5400.0501519829995,5407.625758267
c089,0,5,10,12899,13510,13332,6000.078324902999,6007.986656295
c089,0,5,11,10961,11490,11346,6600.104901668999,6608.278703158
# search time: 6600.105s
# total time: 6608.664s
c089,1,5,1,761143,761145,691691,600.000917128,600.708621467
c089,1,5,2,114253,116274,113251,1200.006053258,1201.131293674
c089,1,5,3,65890,66806,66282,1800.009911516,1801.412610663
c089,1,5,4,50043,50711,50162,2400.010324407,2401.631552916
c089,1,5,5,47450,48300,46716,3000.011593198,3001.808426928
c089,1,5,6,29200,30005,29098,3600.018661824,3601.960646253
c089,1,5,7,23705,24423,23859,4200.052479136,4202.168059404
c089,1,5,8,16170,16904,16654,4800.065443943,4802.323768872
c089,1,5,9,16028,16751,16275,5400.068663637,5402.494257851
c089,1,5,10,13373,14094,13782,6000.103080008,6002.81864879
c089,1,5,11,9715,10334,10228,6600.120075131,6603.158713377
# search time: 6600.120s
# total time: 13212.143s
c089,2,5,1,713238,713240,658770,600.001500428,600.321023145
c089,2,5,2,107703,109458,106629,1200.0034657699998,1200.609199836
c089,2,5,3,66140,66932,66433,1800.0045270339997,1800.838083053
c089,2,5,4,50056,50785,50300,2400.0094369229996,2401.01669326
c089,2,5,5,46135,46838,45363,3000.0190412129996,3001.194917247
c089,2,5,6,28351,29099,28371,3600.0369729739996,3601.32178867
c089,2,5,7,23349,24070,23489,4200.039506569,4201.419771519
c089,2,5,8,15749,16534,16367,4800.045703289,4801.553740052
c089,2,5,9,13048,13737,13521,5400.058058006,5401.727389175
c089,2,5,10,11320,11912,11779,6000.066120689,6001.873473875
c089,2,5,11,9390,10109,10014,6600.123732562,6602.019698613
# search time: 6600.124s
# total time: 19814.460s
c089,3,5,1,701783,701785,661858,600.000348927,600.434163875
c089,3,5,2,104792,106752,104052,1200.0084004300002,1200.67305565
c089,3,5,3,62715,63555,63276,1800.014671721,1800.84653352
c089,3,5,4,49118,49741,49058,2400.019926898,2401.000114788
c089,3,5,5,46744,47452,45818,3000.031140133,3001.131315307
c089,3,5,6,28819,29709,28945,3600.034104251,3601.251421538
c089,3,5,7,23724,24384,23748,4200.042209734,4201.353103999
c089,3,5,8,15398,16130,15880,4800.062892963,4801.490448658
c089,3,5,9,13190,13416,13212,5400.0686101950005,5401.61567672
c089,3,5,10,11041,11701,11560,6000.119254542001,6001.838467568
c089,3,5,11,9348,9997,9851,6600.122386864001,6601.962930993
# search time: 6600.122s
# total time: 26416.736s
c089,4,5,1,700273,700275,649494,600.000265762,600.263420026
c089,4,5,2,103630,106039,103322,1200.002807461,1200.419220577
c089,4,5,3,64912,65717,65231,1800.004553082,1800.541394263
c089,4,5,4,48846,49512,48981,2400.010502861,2400.684909204
c089,4,5,5,44469,45250,43679,3000.023281684,3000.818259464
c089,4,5,6,28642,29437,28643,3600.029684311,3600.917925442
c089,4,5,7,23340,23961,23422,4200.036293305,4201.009451282
c089,4,5,8,16000,16738,16557,4800.037260207,4801.092390799
c089,4,5,9,13059,13753,13567,5400.067229282,5401.260654832
c089,4,5,10,11051,11503,11334,6000.097765586,6001.35591509
c089,4,5,11,9953,10559,10443,6600.125367388,6601.442547975
# search time: 6600.125s
# total time: 33018.581s
