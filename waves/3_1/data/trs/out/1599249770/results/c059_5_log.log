    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.05s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c059_5.json out/1599249770/results/c059_5_best.csv out/1599249770/results/c059_5_predictions.csv out/1599249770/results/c059_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([0, 5, 3, 8, 1, 9, 4, 6, 2]), o: IntList([0, 5, 3, 6, 1, 9, 4, 8, 2]) }
#   Datum { i: IntList([6, 1, 8, 5, 2, 3, 7, 9, 0, 4]), o: IntList([6, 1, 8, 9, 2, 3, 7, 5, 0, 4]) }
#   Datum { i: IntList([1, 0, 7, 8, 6, 4, 2, 6, 1, 9]), o: IntList([1, 0, 7, 6, 6, 4, 2, 8, 1, 9]) }
#   Datum { i: IntList([9, 5, 5, 9, 3, 7, 6, 3, 9, 3]), o: IntList([9, 5, 5, 3, 3, 7, 6, 9, 9, 3]) }
#   Datum { i: IntList([7, 3, 4, 0, 1, 6, 8, 1, 5]), o: IntList([7, 3, 4, 1, 1, 6, 8, 0, 5]) }
#   Datum { i: IntList([8, 3, 9, 2, 7, 4, 6, 3]), o: IntList([8, 3, 9, 3, 7, 4, 6, 2]) }
#   Datum { i: IntList([6, 7, 2, 6, 5, 4, 4, 0]), o: IntList([6, 7, 2, 0, 5, 4, 4, 6]) }
#   Datum { i: IntList([8, 9, 9, 6, 5, 2, 4, 0, 0]), o: IntList([8, 9, 9, 0, 5, 2, 4, 6, 0]) }
#   Datum { i: IntList([3, 1, 1, 5, 1, 0, 7, 0, 7]), o: IntList([3, 1, 1, 0, 1, 0, 7, 5, 7]) }
#   Datum { i: IntList([5, 2, 4, 3, 7, 0, 8, 6]), o: IntList([5, 2, 4, 6, 7, 0, 8, 3]) }
#   Datum { i: IntList([5, 2, 8, 8, 8, 8, 2, 5]), o: IntList([5, 2, 8, 5, 8, 8, 2, 8]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c059,0,5,1,888229,888231,833039,600.003521543,603.172152584
c059,0,5,2,136288,137982,133757,1200.003654585,1203.944786875
c059,0,5,3,71569,72416,69659,1800.0129024070002,1804.459621957
c059,0,5,4,52513,53184,51291,2400.0203945850003,2405.003637121
c059,0,5,5,31696,32491,31794,3000.044739575,3006.157074487
c059,0,5,6,27951,28694,27579,3600.0539138870004,3606.952624719
c059,0,5,7,23270,23896,23338,4200.058885408001,4208.039640885
c059,0,5,8,22690,23396,22780,4800.071481625,4809.103480634
c059,0,5,9,20091,20767,20138,5400.093301076,5410.286408735
c059,0,5,10,17629,18415,17874,6000.137618044,6011.522749786
c059,0,5,11,15917,16505,15995,6600.201191438,6612.770422778
# search time: 6600.201s
# total time: 6612.988s
c059,1,5,1,841871,841873,793433,600.000324221,600.416449941
c059,1,5,2,135381,136101,132180,1200.000663619,1200.755217635
c059,1,5,3,71563,72433,69880,1800.004148816,1801.018283076
c059,1,5,4,52589,53456,52213,2400.009658301,2401.262642247
c059,1,5,5,30474,31214,30610,3000.026790948,3002.001220329
c059,1,5,6,27840,28507,27499,3600.0320487299996,3602.3403828
c059,1,5,7,23374,23941,23329,4200.037585218999,4202.967663522
c059,1,5,8,22599,23289,22711,4800.075627961999,4803.483652236
c059,1,5,9,19728,20403,19805,5400.086593198999,5403.984894583
c059,1,5,10,17474,18153,17525,6000.143321604999,6004.459306311
c059,1,5,11,15812,16466,15924,6600.143868145999,6605.024903347
# search time: 6600.144s
# total time: 13218.220s
c059,2,5,1,871928,871930,806040,600.000975557,600.287783806
c059,2,5,2,133379,134867,130983,1200.003705092,1200.494252188
c059,2,5,3,69735,70683,68122,1800.006968291,1800.631534826
c059,2,5,4,51049,51865,50206,2400.014462574,2400.847058448
c059,2,5,5,30210,31040,30427,3000.0383599369998,3001.332946073
c059,2,5,6,28609,29296,28297,3600.043114622,3601.523366745
c059,2,5,7,22696,23334,22875,4200.047862556,4202.053105815
c059,2,5,8,22310,22872,22227,4800.060118649,4802.416009319
c059,2,5,9,19322,20015,19441,5400.064303811,5402.734919787
c059,2,5,10,16868,17619,17098,6000.075589756,6003.261876676
c059,2,5,11,15436,16079,15578,6600.082874761,6603.668193011
# search time: 6600.083s
# total time: 19822.146s
c059,3,5,1,853507,853509,782311,600.000462708,600.284071761
c059,3,5,2,131317,133642,129709,1200.0116344409998,1200.45004594
c059,3,5,3,69289,70165,67502,1800.0157138149998,1800.586411878
c059,3,5,4,50807,51768,50305,2400.035008369,2400.775872516
c059,3,5,5,30304,31117,30490,3000.039514424,3001.030879416
c059,3,5,6,28778,29467,28502,3600.058754098,3601.167987297
c059,3,5,7,22855,23460,22917,4200.101288069,4201.511046821
c059,3,5,8,21827,22467,21853,4800.111666125999,4801.763056746
c059,3,5,9,19380,20041,19453,5400.122872028,5402.071681568
c059,3,5,10,16867,17601,17105,6000.1452675069995,6002.40969257
c059,3,5,11,15289,15917,15396,6600.154598706,6602.789246871
# search time: 6600.155s
# total time: 26425.142s
c059,4,5,1,844853,844855,800418,600.000433089,600.234921653
c059,4,5,2,130574,132780,128908,1200.0028671730001,1200.367788612
c059,4,5,3,69845,70893,68810,1800.0103308850003,1800.505649266
c059,4,5,4,49856,50709,49011,2400.012509741,2400.617665501
c059,4,5,5,29249,30093,29407,3000.035619823,3000.834445003
c059,4,5,6,28550,29276,28321,3600.0513901560003,3600.974959333
c059,4,5,7,21784,22400,21921,4200.0868699,4201.421679033
c059,4,5,8,21489,22149,21594,4800.089161662,4801.692038202
c059,4,5,9,18896,19567,19037,5400.097376343,5401.87250411
c059,4,5,10,16593,17326,16800,6000.13264954,6002.186465731
c059,4,5,11,15380,16027,15533,6600.156742288,6602.46623351
# search time: 6600.157s
# total time: 33027.858s
