    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.53s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c009_3.json out/1599249770/results/c009_3_best.csv out/1599249770/results/c009_3_predictions.csv out/1599249770/results/c009_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 2, 4, 4, 4, 8, 8]), o: IntList([6, 2, 4, 4, 4, 8]) }
#   Datum { i: IntList([7]), o: IntList([7]) }
#   Datum { i: IntList([5, 8, 8, 9, 9, 5, 8, 5]), o: IntList([5, 8, 8, 9, 9, 5]) }
#   Datum { i: IntList([6, 7, 0]), o: IntList([6, 7, 0]) }
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1, 1, 1, 1]) }
#   Datum { i: IntList([9, 4, 9, 9, 4, 9, 9]), o: IntList([9, 4, 9, 9, 4, 9]) }
#   Datum { i: IntList([3, 2, 1, 4, 3, 0, 4]), o: IntList([3, 2, 1, 4, 3, 0]) }
#   Datum { i: IntList([]), o: IntList([]) }
#   Datum { i: IntList([5, 3, 7, 3, 8, 7, 8, 7]), o: IntList([5, 3, 7, 3, 8, 7]) }
#   Datum { i: IntList([6, 6]), o: IntList([6, 6]) }
#   Datum { i: IntList([0, 5, 2, 2, 2]), o: IntList([0, 5, 2, 2, 2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c009,0,3,1,910342,910344,843315,600.000881816,603.28996818
c009,0,3,2,176825,178906,173653,1200.003043708,1204.144376757
c009,0,3,3,147995,148992,146387,1800.0066401069998,1804.597853252
c009,0,3,4,83960,84761,83959,2400.0071208219997,2405.047049916
c009,0,3,5,81222,81908,79204,3000.0083790179997,3005.41041299
c009,0,3,6,68215,69032,66645,3600.0104835429997,3605.737604145
c009,0,3,7,53714,54549,52833,4200.012706386,4206.19473733
c009,0,3,8,33828,34684,33940,4800.015397677,4806.655109196
c009,0,3,9,46579,47226,44666,5400.022848226,5407.163932785
c009,0,3,10,43093,43897,41405,6000.040737523,6007.591230162
c009,0,3,11,40428,41114,38716,6600.040752047999,6607.892620591
# search time: 6600.041s
# total time: 6608.327s
c009,1,3,1,939311,939313,892756,600.000124695,600.59836736
c009,1,3,2,174312,176348,171347,1200.012079592,1200.928255868
c009,1,3,3,144837,145881,143025,1800.0174888669999,1801.151422038
c009,1,3,4,82342,83158,82356,2400.022505435,2401.377011959
c009,1,3,5,81830,82605,79788,3000.0301993089997,3001.576584282
c009,1,3,6,68157,69020,66677,3600.031988465,3601.796110438
c009,1,3,7,52592,53570,51818,4200.036161665,4202.068591672
c009,1,3,8,35009,35856,35081,4800.041459723,4802.301315416
c009,1,3,9,45602,46319,43770,5400.055315908,5402.565772715
c009,1,3,10,41785,42614,40191,6000.060487952,6002.803329351
c009,1,3,11,39276,39864,37571,6600.0648830049995,6602.973732681
# search time: 6600.065s
# total time: 13211.900s
c009,2,3,1,834071,834073,764900,600.005034725,600.334867362
c009,2,3,2,171896,173953,168838,1200.008954875,1200.594616391
c009,2,3,3,145122,146139,143192,1800.014659964,1800.791443625
c009,2,3,4,77573,78437,77768,2400.024424722,2400.964035583
c009,2,3,5,81508,82201,79426,3000.02475441,3001.110051204
c009,2,3,6,66836,67811,65420,3600.0309859,3601.262018955
c009,2,3,7,52116,53005,51196,4200.043060494,4201.46099424
c009,2,3,8,35182,35936,35148,4800.054274586,4801.674807985
c009,2,3,9,45487,46072,43585,5400.061889085,5401.84837289
c009,2,3,10,42649,43323,40832,6000.06486683,6001.98297649
c009,2,3,11,39496,40187,37751,6600.077778787,6602.133579541
# search time: 6600.078s
# total time: 19814.359s
c009,3,3,1,830500,830502,762639,600.000032401,600.553177207
c009,3,3,2,170394,172598,167635,1200.0035752449999,1200.730406532
c009,3,3,3,142424,143452,140931,1800.005798444,1800.865078216
c009,3,3,4,80102,80912,80161,2400.0073502679998,2401.001620188
c009,3,3,5,80620,81413,78777,3000.0133438109997,3001.127508828
c009,3,3,6,67648,68643,66309,3600.0143757779997,3601.240408981
c009,3,3,7,51712,52603,51025,4200.031137071,4201.419867454
c009,3,3,8,34731,35384,34618,4800.039176838,4801.553614261
c009,3,3,9,44582,45242,42751,5400.0481629979995,5401.699682436
c009,3,3,10,41175,41894,39480,6000.05586031,6001.839424384
c009,3,3,11,39684,40486,38161,6600.065218611,6602.02289603
# search time: 6600.065s
# total time: 26416.733s
c009,4,3,1,844418,844420,774828,600.000763692,600.27678505
c009,4,3,2,170852,173174,167954,1200.005356858,1200.486823648
c009,4,3,3,145265,146191,143262,1800.006171689,1800.603613199
c009,4,3,4,77056,77654,76949,2400.012386131,2400.710474265
c009,4,3,5,82168,82708,79958,3000.020848366,3000.818265866
c009,4,3,6,67637,68554,66237,3600.026419769,3600.92663366
c009,4,3,7,53405,54227,52486,4200.033047964,4201.052273266
c009,4,3,8,33479,34312,33549,4800.052441927,4801.201332826
c009,4,3,9,44909,45546,43149,5400.059156195999,5401.35332361
c009,4,3,10,43171,43937,41396,6000.079174275999,6001.495416817
c009,4,3,11,40946,41696,39254,6600.093025376999,6601.645605662
# search time: 6600.093s
# total time: 33018.777s
