    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.48s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c004_4.json out/1599249770/results/c004_4_best.csv out/1599249770/results/c004_4_predictions.csv out/1599249770/results/c004_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 4]), o: IntList([]) }
#   Datum { i: IntList([0, 3, 2, 9, 4, 6, 8, 4, 8]), o: IntList([8]) }
#   Datum { i: IntList([5, 6, 0, 2, 9, 7, 3, 2, 1, 8]), o: IntList([3]) }
#   Datum { i: IntList([9, 9]), o: IntList([]) }
#   Datum { i: IntList([5, 9, 8, 8, 5, 0, 0, 2]), o: IntList([0]) }
#   Datum { i: IntList([0]), o: IntList([]) }
#   Datum { i: IntList([9, 6, 1, 0, 6, 4, 7]), o: IntList([7]) }
#   Datum { i: IntList([3, 7, 3]), o: IntList([]) }
#   Datum { i: IntList([0, 1, 0, 6, 9, 1, 1, 0]), o: IntList([1]) }
#   Datum { i: IntList([4, 4, 4]), o: IntList([]) }
#   Datum { i: IntList([5, 3, 4, 3, 4, 4, 5]), o: IntList([5]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c004,0,4,1,963578,963580,911659,600.006709105,603.264233957
c004,0,4,2,780780,782755,723859,1200.0087290430001,1204.046908444
c004,0,4,3,248378,249818,239739,1800.009628883,1804.464864867
c004,0,4,4,153155,154048,147040,2400.010300323,2404.841155054
c004,0,4,5,142428,143255,137212,3000.011167318,3005.190462602
c004,0,4,6,102197,102992,98646,3600.020940437,3605.612125691
c004,0,4,7,92855,93718,89182,4200.022225783,4206.080114034
c004,0,4,8,78993,79803,76163,4800.027346197,4806.611087462
c004,0,4,9,70262,70878,67840,5400.035229235,5407.078419665
c004,0,4,10,55446,56288,53651,6000.039223178,6007.587804834
c004,0,4,11,52318,52925,50416,6600.051534198999,6608.125602966
# search time: 6600.052s
# total time: 6608.643s
c004,1,4,1,911325,911327,860247,600.002420748,600.455444025
c004,1,4,2,773487,774660,717681,1200.0024555179998,1200.855295263
c004,1,4,3,249929,251224,240838,1800.0026493759997,1801.202594776
c004,1,4,4,150408,151253,144493,2400.005020095,2401.450022708
c004,1,4,5,143046,143976,137830,3000.0054442769997,3001.665517845
c004,1,4,6,100214,101052,96852,3600.017500127,3601.946513978
c004,1,4,7,91773,92549,88139,4200.025114313999,4202.216417112
c004,1,4,8,77558,78456,74839,4800.027216187,4802.496106736
c004,1,4,9,70188,70972,67842,5400.028921843,5402.768864151
c004,1,4,10,52685,53290,50837,6000.040605755999,6003.115715717
c004,1,4,11,50665,51316,48982,6600.042544188,6603.404667809
# search time: 6600.043s
# total time: 13212.564s
c004,2,4,1,925100,925102,851707,600.003286659,600.577542659
c004,2,4,2,783082,785165,725572,1200.004132217,1200.961731528
c004,2,4,3,247577,249085,238952,1800.0061079329998,1801.137539434
c004,2,4,4,153340,154366,147367,2400.010392819,2401.300839883
c004,2,4,5,140575,141403,135280,3000.016926134,3001.44208376
c004,2,4,6,97285,98097,94013,3600.017964506,3601.61384476
c004,2,4,7,92666,93372,88986,4200.018975798001,4201.797438728
c004,2,4,8,76463,77284,73777,4800.027773244001,4802.041662416
c004,2,4,9,69529,70280,67224,5400.028689097001,5402.203484428
c004,2,4,10,54843,55610,53059,6000.031119281001,6002.404449583
c004,2,4,11,51641,52281,49872,6600.038178365001,6602.654501952
# search time: 6600.038s
# total time: 19815.528s
c004,3,4,1,931883,931885,861101,600.000700974,600.365688353
c004,3,4,2,761586,763710,709342,1200.004054475,1200.658076919
c004,3,4,3,245368,246803,236521,1800.005468634,1800.78620749
c004,3,4,4,151654,152549,145726,2400.009690584,2400.918297578
c004,3,4,5,142206,143034,136802,3000.011909172,3001.023713531
c004,3,4,6,98429,99269,95088,3600.014020054,3601.163187328
c004,3,4,7,90626,91570,87117,4200.014400336,4201.300234656
c004,3,4,8,75823,76611,73132,4800.015705286,4801.444533479
c004,3,4,9,69147,69868,66737,5400.025711747,5401.586897219
c004,3,4,10,54907,55650,52973,6000.043089869,6001.748888549
c004,3,4,11,52343,53097,50647,6600.045900151,6601.890973819
# search time: 6600.046s
# total time: 26418.050s
c004,4,4,1,935063,935065,859698,600.000356712,600.326033936
c004,4,4,2,778593,780845,722253,1200.001321913,1200.605315364
c004,4,4,3,245935,246834,236989,1800.00183178,1800.803570357
c004,4,4,4,153253,154172,147162,2400.0036817239998,2400.910888868
c004,4,4,5,145107,145941,139601,3000.0038796579997,3000.99400866
c004,4,4,6,100260,101087,96793,3600.004368426,3601.098198417
c004,4,4,7,90974,91852,87444,4200.009034048,4201.227634595
c004,4,4,8,77401,78097,74674,4800.01620247,4801.328032032
c004,4,4,9,71831,72663,69365,5400.0194702240005,5401.445562292
c004,4,4,10,55025,55781,53205,6000.027123131001,6001.572802929
c004,4,4,11,52325,53028,50573,6600.032671236001,6601.667693413
# search time: 6600.033s
# total time: 33020.122s
