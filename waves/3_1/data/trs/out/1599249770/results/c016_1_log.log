    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.68s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c016_1.json out/1599249770/results/c016_1_best.csv out/1599249770/results/c016_1_predictions.csv out/1599249770/results/c016_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 1, 0, 2]), o: IntList([1, 8, 0, 2]) }
#   Datum { i: IntList([6, 1, 2, 4, 3, 5, 3, 9, 0, 7]), o: IntList([6, 8, 2, 4, 3, 5, 3, 9, 0, 7]) }
#   Datum { i: IntList([5, 5, 5]), o: IntList([5, 8, 5]) }
#   Datum { i: IntList([8, 1, 9, 6, 0, 7, 5]), o: IntList([8, 8, 9, 6, 0, 7, 5]) }
#   Datum { i: IntList([9, 2]), o: IntList([9, 8]) }
#   Datum { i: IntList([5, 9, 4, 4, 5, 0]), o: IntList([5, 8, 4, 4, 5, 0]) }
#   Datum { i: IntList([3, 6, 1, 4, 0, 5, 2, 7]), o: IntList([3, 8, 1, 4, 0, 5, 2, 7]) }
#   Datum { i: IntList([9, 1, 8, 7, 2, 1, 0, 5, 7]), o: IntList([9, 8, 8, 7, 2, 1, 0, 5, 7]) }
#   Datum { i: IntList([1, 1, 2, 2, 9, 9, 2]), o: IntList([1, 8, 2, 2, 9, 9, 2]) }
#   Datum { i: IntList([2, 6, 7, 3, 1]), o: IntList([2, 8, 7, 3, 1]) }
#   Datum { i: IntList([6, 6, 4, 4, 6, 6, 6, 4, 6, 4]), o: IntList([6, 8, 4, 4, 6, 6, 6, 4, 6, 4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c016,0,1,1,957653,957655,884593,600.001817078,603.252918311
c016,0,1,2,252505,254890,247065,1200.002406171,1203.905993646
c016,0,1,3,96268,97323,95109,1800.005411704,1804.337850623
c016,0,1,4,99571,100491,97207,2400.008400807,2404.656385115
c016,0,1,5,65202,66068,63771,3000.0093752969997,3004.931997683
c016,0,1,6,45615,46306,45110,3600.018802794,3605.348432598
c016,0,1,7,53828,54570,52578,4200.022635582,4205.762235101
c016,0,1,8,43500,44364,42892,4800.02355932,4806.242253426
c016,0,1,9,34760,35531,34215,5400.04318102,5406.681348175
c016,0,1,10,29587,30254,29179,6000.0624041579995,6007.148039344
c016,0,1,11,26977,27639,26775,6600.069796135,6607.607560667
# search time: 6600.070s
# total time: 6608.065s
c016,1,1,1,860831,860833,811026,600.000470176,600.49648155
c016,1,1,2,248206,249054,240982,1200.00103136,1200.782456738
c016,1,1,3,105933,107013,103962,1800.0065284010002,1800.993532061
c016,1,1,4,98111,98997,95028,2400.0103378850004,2401.163794322
c016,1,1,5,69102,69898,67597,3000.017154897,3001.337059438
c016,1,1,6,45801,46576,45193,3600.020007292,3601.553668432
c016,1,1,7,53066,53898,52074,4200.0225067030005,4201.770580336
c016,1,1,8,42524,43306,41922,4800.032162862,4801.968321501
c016,1,1,9,33443,34204,33184,5400.03866121,5402.237955462
c016,1,1,10,29205,29865,28949,6000.045824587,6002.495125896
c016,1,1,11,25756,26381,25577,6600.049838749001,6602.861456209
# search time: 6600.050s
# total time: 13211.409s
c016,2,1,1,874575,874577,822839,600.011533963,600.333614641
c016,2,1,2,250001,250745,243005,1200.0116033620002,1200.555263575
c016,2,1,3,104158,105320,102305,1800.0158577820002,1800.690339289
c016,2,1,4,93799,94663,90500,2400.017965673,2400.800986802
c016,2,1,5,67493,68503,66165,3000.018251716,3000.905031534
c016,2,1,6,46942,47667,46329,3600.026163026,3601.057449281
c016,2,1,7,54000,54778,52848,4200.029761258,4201.211346089
c016,2,1,8,43273,44136,42674,4800.046160397,4801.383555216
c016,2,1,9,34672,35322,34155,5400.058636633,5401.616354252
c016,2,1,10,27944,28741,27817,6000.075066738,6001.81975074
c016,2,1,11,26180,26940,26124,6600.075143997,6602.01571058
# search time: 6600.075s
# total time: 19813.769s
c016,3,1,1,882098,882100,811549,600.000044516,600.295100079
c016,3,1,2,241564,243834,236249,1200.001456105,1200.487062687
c016,3,1,3,93126,94154,91914,1800.0034658549998,1800.624654496
c016,3,1,4,98523,99325,95451,2400.0052367099997,2400.736777814
c016,3,1,5,64028,64931,62685,3000.005300543,3000.815929625
c016,3,1,6,46112,46791,45531,3600.01684193,3600.998227442
c016,3,1,7,54134,54969,53004,4200.027736891,4201.154932033
c016,3,1,8,43706,44464,43054,4800.031772606,4801.308014845
c016,3,1,9,33883,34629,33460,5400.043707245,5401.46794491
c016,3,1,10,29009,29726,28633,6000.057762486001,6001.625083142
c016,3,1,11,26295,27046,26219,6600.069309388001,6601.727347312
# search time: 6600.069s
# total time: 26415.830s
c016,4,1,1,892839,892841,827101,600.000871927,600.286058548
c016,4,1,2,239576,240492,233215,1200.002903388,1200.430418256
c016,4,1,3,94485,95536,93161,1800.004332612,1800.52908653
c016,4,1,4,93781,94582,88158,2400.008733815,2400.634468823
c016,4,1,5,63670,64732,62498,3000.019380086,3000.740081737
c016,4,1,6,45257,45934,44558,3600.038980914,3600.864464111
c016,4,1,7,54597,55366,53479,4200.05193658,4200.981286924
c016,4,1,8,42769,43515,42029,4800.05614852,4801.086721708
c016,4,1,9,34105,34835,33684,5400.060136255,5401.215500821
c016,4,1,10,28700,29435,28475,6000.0624143919995,6001.329520939
c016,4,1,11,27063,27823,26894,6600.087376744,6601.422422631
# search time: 6600.087s
# total time: 33017.588s
