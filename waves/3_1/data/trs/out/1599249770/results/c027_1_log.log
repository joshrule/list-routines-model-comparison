    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.83s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c027_1.json out/1599249770/results/c027_1_best.csv out/1599249770/results/c027_1_predictions.csv out/1599249770/results/c027_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([0, 0, 9, 0]), o: IntList([0, 9, 0]) }
#   Datum { i: IntList([8, 8, 4, 1, 8, 4, 1, 4]), o: IntList([8, 4, 1, 8, 4, 1, 4]) }
#   Datum { i: IntList([6, 4, 6, 2, 3, 3]), o: IntList([6, 4, 2, 3, 3]) }
#   Datum { i: IntList([1, 2, 5, 1, 3, 2, 5]), o: IntList([1, 2, 1, 3, 2, 5]) }
#   Datum { i: IntList([9, 9, 7, 7, 7, 6, 6, 7, 2]), o: IntList([9, 7, 7, 7, 6, 6, 7, 2]) }
#   Datum { i: IntList([6, 5, 8, 0, 4, 8, 1, 9, 3, 2]), o: IntList([6, 5, 0, 4, 8, 1, 9, 3, 2]) }
#   Datum { i: IntList([5, 7, 6, 1, 0, 8, 3]), o: IntList([5, 7, 1, 0, 8, 3]) }
#   Datum { i: IntList([6, 6, 1]), o: IntList([6, 1]) }
#   Datum { i: IntList([9, 4, 0, 5, 9, 4, 5, 0, 0]), o: IntList([9, 4, 5, 9, 4, 5, 0, 0]) }
#   Datum { i: IntList([5, 5, 7, 7, 2]), o: IntList([5, 7, 7, 2]) }
#   Datum { i: IntList([2, 3, 9, 9, 8, 3, 8, 6]), o: IntList([2, 3, 9, 8, 3, 8, 6]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c027,0,1,1,933747,933749,856139,600.000421871,602.95625383
c027,0,1,2,373353,375485,356073,1200.006316906,1203.340172379
c027,0,1,3,241693,243220,220958,1800.00842728,1803.621311493
c027,0,1,4,61132,61891,61321,2400.009887783,2404.184948572
c027,0,1,5,69494,70207,68276,3000.020840996,3004.470852844
c027,0,1,6,44524,45487,44310,3600.035355894,3604.84527576
c027,0,1,7,43937,44637,43209,4200.041664648,4205.084086733
c027,0,1,8,29751,30489,29592,4800.057899667,4805.497142245
c027,0,1,9,35941,36560,35395,5400.080731961,5405.778224578
c027,0,1,10,27227,27955,26989,6000.12225484,6006.288716813
c027,0,1,11,23500,24232,23547,6600.190023991,6606.803804448
# search time: 6600.190s
# total time: 6607.064s
c027,1,1,1,927437,927439,855323,600.004086122,600.421025246
c027,1,1,2,375170,376673,361287,1200.0049713439998,1200.614368042
c027,1,1,3,212849,214355,204787,1800.0076826969998,1800.740348285
c027,1,1,4,62076,63387,62827,2400.008947616,2400.975798215
c027,1,1,5,67859,68558,66459,3000.0130133410003,3001.100904846
c027,1,1,6,49220,50154,48805,3600.017270538,3601.253314802
c027,1,1,7,42138,42850,41510,4200.028130951,4201.391688506
c027,1,1,8,31868,32681,31683,4800.034472569,4801.565586676
c027,1,1,9,33318,34077,33029,5400.075221161,5401.744207778
c027,1,1,10,25723,26424,25573,6000.093932815,6001.958959577
c027,1,1,11,22061,22787,22171,6600.145486446,6602.221461449
# search time: 6600.145s
# total time: 13209.631s
c027,2,1,1,909253,909255,845401,600.001402067,600.290014214
c027,2,1,2,354795,356068,339724,1200.006396649,1200.43870495
c027,2,1,3,212357,213747,200785,1800.011654404,1800.540971558
c027,2,1,4,62422,63624,63017,2400.012121849,2400.738427164
c027,2,1,5,67443,68280,66216,3000.0126473689998,3000.850840772
c027,2,1,6,49218,50119,48709,3600.015693214,3600.948571176
c027,2,1,7,40767,41588,40233,4200.024077162,4201.064338146
c027,2,1,8,31247,31985,31094,4800.028824764,4801.186631413
c027,2,1,9,33178,33782,32681,5400.038573254,5401.292524426
c027,2,1,10,25640,26289,25485,6000.056128751,6001.469351571
c027,2,1,11,21670,22380,21790,6600.065989405,6601.579488655
# search time: 6600.066s
# total time: 19811.598s
c027,3,1,1,911187,911189,839483,600.000044212,600.251143661
c027,3,1,2,351295,353521,340376,1200.014516409,1200.392599225
c027,3,1,3,221738,223753,212660,1800.0219275949999,1800.487351071
c027,3,1,4,61043,62503,61931,2400.023388052,2400.597490144
c027,3,1,5,67667,68361,66248,3000.0251662339997,3000.673499995
c027,3,1,6,49917,50733,49372,3600.0280593649995,3600.776903752
c027,3,1,7,41873,42652,41343,4200.031661227,4200.862207965
c027,3,1,8,31761,32476,31685,4800.032257389,4800.949699188
c027,3,1,9,34450,35210,34063,5400.037214501,5401.036650404
c027,3,1,10,25272,25967,25132,6000.041802901,6001.131272179
c027,3,1,11,21846,22596,21994,6600.052745743999,6601.247863553
# search time: 6600.053s
# total time: 26413.013s
c027,4,1,1,871984,871986,803589,600.000116543,600.222273581
c027,4,1,2,401483,403839,380849,1200.000825401,1200.382981769
c027,4,1,3,184905,186012,176156,1800.005003633,1800.47294771
c027,4,1,4,60409,61338,60761,2400.011168518,2400.579512529
c027,4,1,5,67131,67860,65883,3000.015753632,3000.650983315
c027,4,1,6,48846,49732,48380,3600.0302187439997,3600.741332649
c027,4,1,7,42132,42852,41507,4200.044315593999,4200.836301453
c027,4,1,8,31182,31886,31052,4800.065832722999,4800.915400414
c027,4,1,9,33145,33869,32690,5400.091329663999,5401.041364012
c027,4,1,10,25158,25833,25000,6000.103142357999,6001.129289642
c027,4,1,11,21776,22437,21828,6600.137584322999,6601.248514443
# search time: 6600.138s
# total time: 33014.584s
