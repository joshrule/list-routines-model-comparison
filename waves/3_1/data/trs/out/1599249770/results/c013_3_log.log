    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.88s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c013_3.json out/1599249770/results/c013_3_best.csv out/1599249770/results/c013_3_predictions.csv out/1599249770/results/c013_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([8, 5, 5, 8, 8, 5, 5, 5]), o: IntList([5, 8, 8, 5, 5]) }
#   Datum { i: IntList([9, 9, 4, 4, 9, 3, 1, 1, 9]), o: IntList([4, 4, 9, 3, 1]) }
#   Datum { i: IntList([6, 4, 2, 4, 0, 0, 8, 7, 5]), o: IntList([2, 4, 0, 0, 8]) }
#   Datum { i: IntList([3, 2, 0, 3, 4, 4, 6, 6]), o: IntList([0, 3, 4, 4, 6]) }
#   Datum { i: IntList([9, 8, 7, 4, 1, 3, 2, 0, 6, 5]), o: IntList([7, 4, 1, 3, 2]) }
#   Datum { i: IntList([7, 8, 6, 6, 9, 5, 4, 1, 9, 4]), o: IntList([6, 6, 9, 5, 4]) }
#   Datum { i: IntList([3, 7, 9, 1, 3, 0, 5]), o: IntList([9, 1, 3, 0, 5]) }
#   Datum { i: IntList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), o: IntList([0, 0, 0, 0, 0]) }
#   Datum { i: IntList([7, 4, 4, 4, 4, 7, 7, 7, 7]), o: IntList([4, 4, 4, 7, 7]) }
#   Datum { i: IntList([9, 0, 5, 2, 1, 2, 6, 0, 6]), o: IntList([5, 2, 1, 2, 6]) }
#   Datum { i: IntList([4, 0, 6, 8, 8, 1, 6, 4, 0]), o: IntList([6, 8, 8, 1, 6]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c013,0,3,1,872558,872560,821807,600.00034961,603.32961448
c013,0,3,2,188246,189000,183789,1200.0040870829998,1204.205287156
c013,0,3,3,93816,94794,92810,1800.005229376,1804.792401846
c013,0,3,4,57629,58337,56830,2400.006685625,2405.654365757
c013,0,3,5,48745,49527,48222,3000.007960531,3006.666969283
c013,0,3,6,40593,41395,40200,3600.023249916,3607.729274033
c013,0,3,7,34999,35759,34467,4200.056537136,4208.366920628
c013,0,3,8,31739,32479,31524,4800.0612646399995,4809.451750074
c013,0,3,9,26749,27468,26764,5400.096499615,5410.63927893
c013,0,3,10,24366,25000,24282,6000.1146802719995,6011.719671283
c013,0,3,11,20597,21314,20606,6600.126261801999,6613.01234535
# search time: 6600.126s
# total time: 6613.248s
c013,1,3,1,851721,851723,784653,600.000568648,600.478739522
c013,1,3,2,185558,187231,181943,1200.001488118,1200.914070385
c013,1,3,3,94764,95694,93726,1800.005062355,1801.165934262
c013,1,3,4,57449,58277,56657,2400.012094459,2401.624614252
c013,1,3,5,48005,48802,47631,3000.0222204369998,3002.119653359
c013,1,3,6,41118,41808,40461,3600.028443636,3602.66178025
c013,1,3,7,35442,36180,34901,4200.032387597999,4202.967530302
c013,1,3,8,31729,32526,31719,4800.049482772999,4803.546205906
c013,1,3,9,25325,26003,25321,5400.056873277999,5403.949324763
c013,1,3,10,23551,24015,23396,6000.065093540999,6004.599086917
c013,1,3,11,20421,21055,20369,6600.065807456,6605.232212877
# search time: 6600.066s
# total time: 13218.807s
c013,2,3,1,849173,849175,783242,600.000340758,600.294375385
c013,2,3,2,182215,184391,179073,1200.0020286029999,1200.539839877
c013,2,3,3,91416,92417,90466,1800.0050304069998,1800.735235575
c013,2,3,4,55286,55996,54109,2400.01001681,2401.027340709
c013,2,3,5,47588,48453,47359,3000.023010857,3001.410925957
c013,2,3,6,39942,40754,39533,3600.050415848,3601.832831642
c013,2,3,7,35329,36145,34749,4200.067221558,4202.084020167
c013,2,3,8,31508,32156,31293,4800.071391554,4802.388043711
c013,2,3,9,25932,26584,25916,5400.080086031,5402.797561525
c013,2,3,10,23333,24000,23318,6000.084241433,6003.089989806
c013,2,3,11,20074,20783,20032,6600.094176631,6603.516885097
# search time: 6600.094s
# total time: 19822.506s
c013,3,3,1,834862,834864,773129,600.000434313,600.247558149
c013,3,3,2,182203,184567,179423,1200.002488668,1200.404016496
c013,3,3,3,91312,92340,90547,1800.0090828030002,1800.543453986
c013,3,3,4,56075,56668,55334,2400.010500398,2400.734619795
c013,3,3,5,48941,49744,48726,3000.023678568,3001.062946302
c013,3,3,6,39804,40629,39305,3600.0256037139998,3601.279448896
c013,3,3,7,36158,36913,35260,4200.039992698999,4201.450594481
c013,3,3,8,31232,31880,31075,4800.045352132,4801.795956615
c013,3,3,9,25776,26477,25802,5400.062404750999,5402.137346804
c013,3,3,10,23607,24332,23627,6000.105138300999,6002.467376868
c013,3,3,11,20265,21009,20254,6600.110881758999,6602.816195593
# search time: 6600.111s
# total time: 26425.573s
c013,4,3,1,830558,830560,783656,600.000155751,600.21983266
c013,4,3,2,183906,186083,181098,1200.00251707,1200.38406486
c013,4,3,3,92401,93396,91314,1800.007392354,1800.507209422
c013,4,3,4,55141,55826,53839,2400.009448587,2400.686193611
c013,4,3,5,49018,49941,48752,3000.012582733,3000.866903901
c013,4,3,6,39920,40904,39725,3600.023781002,3601.062376342
c013,4,3,7,34835,35554,34385,4200.03082774,4201.272148479
c013,4,3,8,31343,32055,31220,4800.043337666,4801.521232667
c013,4,3,9,26173,26874,26152,5400.043707232,5401.824426769
c013,4,3,10,23584,24235,23570,6000.053673275,6002.096234159
c013,4,3,11,20863,21498,20709,6600.06560413,6602.395960614
# search time: 6600.066s
# total time: 33028.265s
