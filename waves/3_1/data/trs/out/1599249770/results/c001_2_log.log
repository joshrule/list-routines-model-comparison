    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.21s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c001_2.json out/1599249770/results/c001_2_best.csv out/1599249770/results/c001_2_predictions.csv out/1599249770/results/c001_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([2, 4, 3, 2]), o: IntList([3]) }
#   Datum { i: IntList([9, 6, 9, 8, 6]), o: IntList([9]) }
#   Datum { i: IntList([0, 0, 0, 0, 0]), o: IntList([0]) }
#   Datum { i: IntList([8, 1, 8]), o: IntList([8]) }
#   Datum { i: IntList([5, 7, 5, 7, 5]), o: IntList([5]) }
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1]) }
#   Datum { i: IntList([7, 9, 3, 4]), o: IntList([3]) }
#   Datum { i: IntList([7, 7, 7]), o: IntList([7]) }
#   Datum { i: IntList([5, 3, 6]), o: IntList([6]) }
#   Datum { i: IntList([2, 2, 2, 8]), o: IntList([2]) }
#   Datum { i: IntList([0, 6, 4, 4, 0, 6, 4]), o: IntList([4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c001,0,2,1,956325,956327,901289,600.000106626,603.134981042
c001,0,2,2,397331,399468,387571,1200.000520085,1203.904899961
c001,0,2,3,238809,239950,230344,1800.00098367,1804.371676571
c001,0,2,4,201296,202595,192044,2400.00171575,2404.802899887
c001,0,2,5,175122,175912,168118,3000.002412366,3005.182612237
c001,0,2,6,147067,148143,140935,3600.002725118,3605.557378591
c001,0,2,7,126982,128113,121937,4200.008910189,4205.943795134
c001,0,2,8,112570,113551,107919,4800.009720542,4806.332180739
c001,0,2,9,90330,91223,86420,5400.014243281,5406.893234442
c001,0,2,10,87512,88216,83350,6000.014996473999,6007.44524318
c001,0,2,11,77134,78112,73906,6600.018991714999,6608.041994168
# search time: 6600.019s
# total time: 6608.476s
c001,1,2,1,869736,869738,821937,600.000617937,600.371156633
c001,1,2,2,377287,379184,368359,1200.00195637,1200.682391493
c001,1,2,3,241517,242600,232860,1800.002579377,1800.890549805
c001,1,2,4,197818,198992,188705,2400.015446046,2401.110301148
c001,1,2,5,176491,177288,169263,3000.01718287,3001.318381684
c001,1,2,6,146880,148054,140918,3600.020099177,3601.528516856
c001,1,2,7,125524,126513,120558,4200.021874702,4201.740869397
c001,1,2,8,111122,111991,106695,4800.023948152,4801.973331324
c001,1,2,9,90925,91811,86992,5400.027983175,5402.252809862
c001,1,2,10,85280,86063,81483,6000.031603478001,6002.549397269
c001,1,2,11,75491,76527,72406,6600.033851900001,6602.848161609
# search time: 6600.034s
# total time: 13211.787s
c001,2,2,1,911764,911766,860464,600.002185057,600.326063073
c001,2,2,2,389630,390708,379344,1200.002529666,1200.557152558
c001,2,2,3,242551,243558,233691,1800.0031710800001,1800.739046457
c001,2,2,4,198527,199735,189642,2400.0032363970004,2400.888699712
c001,2,2,5,177284,178149,169879,3000.0072938680005,3001.066753299
c001,2,2,6,144512,145539,138540,3600.0089182830006,3601.214036329
c001,2,2,7,127600,128670,122254,4200.009520255001,4201.370864997
c001,2,2,8,109709,110669,105125,4800.026368945001,4801.545396216
c001,2,2,9,92444,93453,88574,5400.0285617690015,5401.771825103
c001,2,2,10,86653,87430,82797,6000.032945405002,6002.008506165
c001,2,2,11,74400,75398,71433,6600.039432458001,6602.21053505
# search time: 6600.039s
# total time: 19814.377s
c001,3,2,1,915232,915234,843695,600.000704167,600.267342359
c001,3,2,2,376212,378458,367827,1200.00206536,1200.465562082
c001,3,2,3,239888,240893,231000,1800.0098660009999,1800.610459293
c001,3,2,4,204143,205246,194437,2400.011770019,2400.750525952
c001,3,2,5,171085,171863,163962,3000.015405104,3000.864401103
c001,3,2,6,140930,141969,135302,3600.0160759749997,3600.984567677
c001,3,2,7,123162,124192,118033,4200.0198641609995,4201.114170246
c001,3,2,8,110260,111246,105801,4800.028608856999,4801.231648497
c001,3,2,9,89492,90369,85639,5400.033952909,5401.385842361
c001,3,2,10,84635,85530,80958,6000.036769431,6001.535061655
c001,3,2,11,76185,77017,72892,6600.041653554,6601.698013365
# search time: 6600.042s
# total time: 26416.638s
c001,4,2,1,850489,850491,797103,600.000401398,600.281890263
c001,4,2,2,386184,388263,377038,1200.00091894,1200.429378646
c001,4,2,3,234675,235772,226277,1800.0163386210002,1800.547181069
c001,4,2,4,200317,201488,191048,2400.020079031,2400.665814193
c001,4,2,5,172727,173570,165615,3000.036317488,3000.800690017
c001,4,2,6,144122,145196,138276,3600.043534287,3600.912557367
c001,4,2,7,126724,127701,121563,4200.044055669,4201.051516723
c001,4,2,8,109091,109989,104324,4800.047807537,4801.174491611
c001,4,2,9,90468,91487,86651,5400.063416773,5401.330570554
c001,4,2,10,86112,87007,82330,6000.064636384001,6001.465811674
c001,4,2,11,75259,76024,71949,6600.141813076,6601.683330487
# search time: 6600.142s
# total time: 33018.647s
