    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.79s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c026_1.json out/1599249770/results/c026_1_best.csv out/1599249770/results/c026_1_predictions.csv out/1599249770/results/c026_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([4, 2, 2, 5]), o: IntList([4, 2, 5]) }
#   Datum { i: IntList([0, 7, 7, 4, 6]), o: IntList([0, 7, 4, 6]) }
#   Datum { i: IntList([3, 9, 8, 1, 6, 2, 0, 4, 5, 7]), o: IntList([3, 9, 1, 6, 2, 0, 4, 5, 7]) }
#   Datum { i: IntList([1, 1, 3, 2, 2, 3, 3]), o: IntList([1, 1, 2, 2, 3, 3]) }
#   Datum { i: IntList([8, 3, 9]), o: IntList([8, 3]) }
#   Datum { i: IntList([1, 0, 0, 1, 4, 6, 4]), o: IntList([1, 0, 1, 4, 6, 4]) }
#   Datum { i: IntList([5, 0, 4, 7, 8, 9]), o: IntList([5, 0, 7, 8, 9]) }
#   Datum { i: IntList([9, 8, 4, 1, 4, 7, 9, 3, 5, 1]), o: IntList([9, 8, 1, 4, 7, 9, 3, 5, 1]) }
#   Datum { i: IntList([8, 8, 8, 8, 8]), o: IntList([8, 8, 8, 8]) }
#   Datum { i: IntList([5, 3, 9, 8, 6, 4, 7, 2, 1]), o: IntList([5, 3, 8, 6, 4, 7, 2, 1]) }
#   Datum { i: IntList([2, 2, 4, 3, 9, 0, 6, 7]), o: IntList([2, 2, 3, 9, 0, 6, 7]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c026,0,1,1,927207,927209,875447,600.000196544,603.144490531
c026,0,1,2,286595,288123,280605,1200.000434427,1203.827714783
c026,0,1,3,159769,160820,155642,1800.003587335,1804.324214131
c026,0,1,4,97188,98019,93795,2400.010472684,2404.746403483
c026,0,1,5,65617,66678,64521,3000.020853609,3005.136212717
c026,0,1,6,73179,73880,70126,3600.02249452,3605.399518413
c026,0,1,7,49709,50565,49064,4200.030330818,4205.949236569
c026,0,1,8,44037,44834,43527,4800.041384666,4806.525318414
c026,0,1,9,35432,36285,35280,5400.0475862250005,5407.109328761
c026,0,1,10,34201,34943,33750,6000.058133750001,6007.647278257
c026,0,1,11,28433,29182,28217,6600.067192152001,6608.192882182
# search time: 6600.067s
# total time: 6608.429s
c026,1,1,1,925209,925211,859457,600.001734625,600.60650806
c026,1,1,2,279527,281734,273832,1200.004021978,1200.907137786
c026,1,1,3,156078,157126,152198,1800.004496274,1801.144099439
c026,1,1,4,94368,95206,91528,2400.007715919,2401.313044435
c026,1,1,5,64249,65181,63105,3000.01183594,3001.513733904
c026,1,1,6,72423,73097,69406,3600.020492576,3601.697358907
c026,1,1,7,48421,49377,48031,4200.037558446,4201.997296784
c026,1,1,8,42265,43104,41970,4800.06863625,4802.307674791
c026,1,1,9,34254,35008,34082,5400.087085897,5402.586701912
c026,1,1,10,33206,33870,32703,6000.092470241,6002.836683149
c026,1,1,11,27904,28652,27655,6600.129533858,6603.210665244
# search time: 6600.130s
# total time: 13211.965s
c026,2,1,1,871351,871353,819539,600.000704555,600.366710804
c026,2,1,2,279874,281690,273919,1200.00099312,1200.577960226
c026,2,1,3,150458,151545,146721,1800.014790135,1800.764248564
c026,2,1,4,89543,90291,84993,2400.021077341,2400.906014303
c026,2,1,5,62765,63914,61896,3000.028529853,3001.018806326
c026,2,1,6,71895,72625,69208,3600.0321280959997,3601.149386671
c026,2,1,7,47920,48587,47313,4200.032159144,4201.330451495
c026,2,1,8,41876,42691,41633,4800.0404650069995,4801.511140863
c026,2,1,9,34216,34979,33983,5400.058178775,5401.719147818
c026,2,1,10,33324,33861,32758,6000.11644587,6001.974693259
c026,2,1,11,27845,28593,27620,6600.116826674999,6602.191012319
# search time: 6600.117s
# total time: 19814.473s
c026,3,1,1,885778,885780,820838,600.000034538,600.296930628
c026,3,1,2,276228,278303,270692,1200.009938356,1200.487977467
c026,3,1,3,153923,155075,150228,1800.0143996890001,1800.628426854
c026,3,1,4,92636,93374,89747,2400.018330803,2400.734368564
c026,3,1,5,64685,65543,63427,3000.027499,3000.847359996
c026,3,1,6,73267,74019,71243,3600.030373533,3600.941843681
c026,3,1,7,48316,49038,47716,4200.035208654,4201.126720989
c026,3,1,8,41789,42617,41277,4800.042910218,4801.283674661
c026,3,1,9,34392,35106,34222,5400.049708340999,5401.464982638
c026,3,1,10,33946,34625,33368,6000.061609959999,6001.656019763
c026,3,1,11,28063,28814,27823,6600.0693574649995,6601.81635763
# search time: 6600.069s
# total time: 26416.609s
c026,4,1,1,947376,947378,863850,600.000517772,600.352198861
c026,4,1,2,277807,280330,273032,1200.00100323,1200.513045735
c026,4,1,3,155544,156712,151908,1800.005112627,1800.653277761
c026,4,1,4,94777,95567,92088,2400.007677808,2400.738188969
c026,4,1,5,63612,64605,62609,3000.016080851,3000.830482978
c026,4,1,6,71169,71931,68965,3600.018408709,3600.914566721
c026,4,1,7,48254,49053,47681,4200.0191100110005,4200.989067821
c026,4,1,8,41303,42005,40827,4800.036707745001,4801.152875925
c026,4,1,9,33732,34499,33634,5400.041336466001,5401.29712678
c026,4,1,10,32893,33615,32591,6000.053850125001,6001.417448741
c026,4,1,11,28229,28968,28001,6600.055437948001,6601.579794874
# search time: 6600.055s
# total time: 33018.644s
