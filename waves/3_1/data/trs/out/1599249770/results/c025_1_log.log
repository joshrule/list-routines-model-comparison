    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.89s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c025_1.json out/1599249770/results/c025_1_best.csv out/1599249770/results/c025_1_predictions.csv out/1599249770/results/c025_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 1, 4, 5]), o: IntList([1, 4, 5]) }
#   Datum { i: IntList([2, 6]), o: IntList([2]) }
#   Datum { i: IntList([1, 6, 6, 0, 8, 3, 9, 0, 7, 9]), o: IntList([1, 6, 0, 8, 3, 9, 0, 7, 9]) }
#   Datum { i: IntList([3, 0, 4, 9, 5]), o: IntList([3, 4, 9, 5]) }
#   Datum { i: IntList([7, 2, 5, 0, 8, 4, 1]), o: IntList([7, 5, 0, 8, 4, 1]) }
#   Datum { i: IntList([3, 3, 3]), o: IntList([3, 3]) }
#   Datum { i: IntList([3, 6, 7, 5, 8, 4, 2, 0]), o: IntList([3, 7, 5, 8, 4, 2, 0]) }
#   Datum { i: IntList([1, 2, 4, 2, 7, 2]), o: IntList([1, 4, 2, 7, 2]) }
#   Datum { i: IntList([6, 6, 6, 9, 6, 9, 9, 6, 9, 9]), o: IntList([6, 6, 9, 6, 9, 9, 6, 9, 9]) }
#   Datum { i: IntList([7, 2, 9, 8, 2, 0, 1, 1, 2]), o: IntList([7, 9, 8, 2, 0, 1, 1, 2]) }
#   Datum { i: IntList([7, 1, 0, 8, 5, 1, 4]), o: IntList([7, 0, 8, 5, 1, 4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c025,0,1,1,1012695,1012697,944518,600.001877022,604.422481985
c025,0,1,2,420368,422725,390687,1200.001976379,1205.172302565
c025,0,1,3,239589,241431,233348,1800.0063102960003,1805.661853007
c025,0,1,4,89252,90521,87769,2400.0087545660003,2406.099597176
c025,0,1,5,78293,79355,76886,3000.0098700370004,3006.512273387
c025,0,1,6,64686,65549,63506,3600.0134132470002,3606.933860124
c025,0,1,7,65294,66132,63756,4200.015470017001,4207.276024573
c025,0,1,8,47651,48382,46992,4800.025863016001,4807.662472115
c025,0,1,9,40700,41438,40203,5400.0368187740005,5408.08628231
c025,0,1,10,32180,32840,31943,6000.058274936,6008.593159312
c025,0,1,11,26000,26759,25875,6600.060002331,6608.983004482
# search time: 6600.060s
# total time: 6609.411s
c025,1,1,1,842482,842484,794056,600.000659039,600.597772687
c025,1,1,2,388346,390270,366760,1200.001661822,1200.853057182
c025,1,1,3,238750,240476,232460,1800.002694317,1801.050851601
c025,1,1,4,88612,89657,86936,2400.008707464,2401.266632799
c025,1,1,5,78340,79341,76760,3000.017445109,3001.488814615
c025,1,1,6,61479,62329,60392,3600.031240284,3601.700883187
c025,1,1,7,65049,65788,63599,4200.039600599,4201.922289131
c025,1,1,8,46530,47403,46060,4800.045123082,4802.13570923
c025,1,1,9,40664,41426,40239,5400.048022636,5402.341156397
c025,1,1,10,32188,32921,32023,6000.050050551,6002.577701214
c025,1,1,11,27131,27916,27046,6600.059415975,6602.938409391
# search time: 6600.059s
# total time: 13212.612s
c025,2,1,1,913011,913013,850295,600.008229964,600.435228
c025,2,1,2,383186,385235,369041,1200.008850037,1200.669038023
c025,2,1,3,237671,238725,230901,1800.009585031,1800.814314242
c025,2,1,4,87110,88417,85720,2400.011773053,2400.959706254
c025,2,1,5,76238,77201,74635,3000.013657836,3001.127240538
c025,2,1,6,62774,63597,61560,3600.0142044870004,3601.30401551
c025,2,1,7,65728,66534,64155,4200.016864178,4201.475821968
c025,2,1,8,46901,47786,46300,4800.025867488001,4801.675915368
c025,2,1,9,41139,41978,40759,5400.041860442001,5401.807770166
c025,2,1,10,32399,33250,32349,6000.052732713001,6001.944749186
c025,2,1,11,26437,27248,26343,6600.068301445001,6602.159288118
# search time: 6600.068s
# total time: 19815.100s
c025,3,1,1,905053,905055,834085,600.00000282,600.389804749
c025,3,1,2,403013,405393,387554,1200.000427559,1200.575993041
c025,3,1,3,238907,240805,232810,1800.000644998,1800.704630879
c025,3,1,4,88350,89585,86970,2400.001947422,2400.820580358
c025,3,1,5,79336,80307,77583,3000.006165295,3000.963646318
c025,3,1,6,62594,63482,61460,3600.007800196,3601.086551092
c025,3,1,7,64042,64868,62647,4200.00856343,4201.200251
c025,3,1,8,47165,47995,46487,4800.020950702,4801.352166184
c025,3,1,9,40511,41422,40244,5400.03176765,5401.511585061
c025,3,1,10,32712,33539,32548,6000.0350324519995,6001.622991815
c025,3,1,11,26042,26799,25943,6600.047431993999,6601.744182283
# search time: 6600.047s
# total time: 26417.079s
c025,4,1,1,850844,850846,805425,600.000057842,600.318095847
c025,4,1,2,438666,440229,398994,1200.000129237,1200.480321393
c025,4,1,3,235900,237405,229477,1800.00174793,1800.61171223
c025,4,1,4,87963,89138,86460,2400.006652287,2400.722788796
c025,4,1,5,77235,78250,75515,3000.0091316840003,3000.840146762
c025,4,1,6,62026,62936,60801,3600.0124309850003,3600.941683668
c025,4,1,7,64932,65536,63432,4200.013295347,4201.062797472
c025,4,1,8,45702,46472,45208,4800.0134648640005,4801.185721857
c025,4,1,9,39810,40551,39403,5400.021576309001,5401.329508547
c025,4,1,10,31670,32539,31652,6000.058301264001,6001.481639542
c025,4,1,11,26042,26819,25932,6600.076991221001,6601.581387593
# search time: 6600.077s
# total time: 33018.978s
