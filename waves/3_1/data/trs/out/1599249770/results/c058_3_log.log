    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.04s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c058_3.json out/1599249770/results/c058_3_best.csv out/1599249770/results/c058_3_predictions.csv out/1599249770/results/c058_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 2, 9, 5, 3, 6, 4, 5]), o: IntList([5]) }
#   Datum { i: IntList([9, 8, 9, 8, 9, 8, 5, 0, 2, 5]), o: IntList([0, 2, 5]) }
#   Datum { i: IntList([3, 0, 1, 4, 8, 2, 7]), o: IntList([]) }
#   Datum { i: IntList([2, 8, 6, 3, 9, 5, 7, 6, 4]), o: IntList([6, 4]) }
#   Datum { i: IntList([9, 2, 4, 8, 0, 5, 3, 1, 7]), o: IntList([1, 7]) }
#   Datum { i: IntList([9, 0, 5, 1, 1, 0, 5, 1]), o: IntList([1]) }
#   Datum { i: IntList([1, 9, 8, 2, 0, 4, 6, 7]), o: IntList([7]) }
#   Datum { i: IntList([2, 6, 2, 3, 2, 3, 6]), o: IntList([]) }
#   Datum { i: IntList([8, 2, 9, 1, 5, 3, 4, 0, 8, 6]), o: IntList([0, 8, 6]) }
#   Datum { i: IntList([5, 1, 1, 2, 8, 5, 7, 5, 4, 7]), o: IntList([5, 4, 7]) }
#   Datum { i: IntList([5, 7, 4, 9, 1, 0, 3, 5, 0]), o: IntList([5, 0]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c058,0,3,1,944449,944451,865413,600.000014757,603.168295037
c058,0,3,2,367678,369845,357677,1200.000620364,1204.125269062
c058,0,3,3,174765,175744,172156,1800.003674402,1804.632916772
c058,0,3,4,133669,134561,129994,2400.0037350579996,2405.442670635
c058,0,3,5,92633,93770,90626,3000.0066239289995,3006.21881983
c058,0,3,6,80120,81081,77973,3600.0177725329995,3607.134543664
c058,0,3,7,70502,71461,68536,4200.022756726999,4208.121559068
c058,0,3,8,61447,62401,59731,4800.027875639,4809.145419776
c058,0,3,9,55818,56644,54104,5400.036405453,5410.334832482
c058,0,3,10,46851,47680,45473,6000.044280828,6011.418173811
c058,0,3,11,40476,41263,39300,6600.045859203001,6612.53484886
# search time: 6600.046s
# total time: 6612.750s
c058,1,3,1,1003582,1003584,931178,600.000085039,600.727165225
c058,1,3,2,346628,348790,337552,1200.0003531870002,1201.223409795
c058,1,3,3,150526,151543,148620,1800.001604166,1801.447762468
c058,1,3,4,115422,116282,112296,2400.008390602,2401.750493407
c058,1,3,5,80603,81690,78846,3000.010827997,3002.121273118
c058,1,3,6,68701,69691,67059,3600.0133192109997,3602.552757952
c058,1,3,7,59596,60561,58162,4200.0184961919995,4203.140865159
c058,1,3,8,52741,53669,51392,4800.046882035,4803.729724201
c058,1,3,9,46850,47745,45648,5400.106849136,5404.473720266
c058,1,3,10,39464,40268,38384,6000.12973028,6004.93464314
c058,1,3,11,34106,34868,33154,6600.130044277001,6605.53142739
# search time: 6600.130s
# total time: 13218.709s
c058,2,3,1,871422,871424,819294,600.000327546,600.26881396
c058,2,3,2,323736,325688,314340,1200.001369549,1200.515859292
c058,2,3,3,156958,157869,154032,1800.001683149,1800.662566089
c058,2,3,4,113749,114620,110595,2400.009276118,2400.965158957
c058,2,3,5,78952,79958,77161,3000.011403276,3001.222386423
c058,2,3,6,66906,67953,65311,3600.0281686629996,3601.539560854
c058,2,3,7,58884,59824,57365,4200.032671593,4201.968548594
c058,2,3,8,51603,52563,50260,4800.042146197,4802.299992584
c058,2,3,9,46892,47780,45654,5400.056788176,5402.545423896
c058,2,3,10,38898,39748,37869,6000.0585518749995,6002.947914534
c058,2,3,11,33852,34668,32991,6600.096171591,6603.330859728
# search time: 6600.096s
# total time: 19822.361s
c058,3,3,1,904110,904112,842030,600.000228291,600.250919275
c058,3,3,2,323351,325697,314906,1200.00146575,1200.442234313
c058,3,3,3,145594,146569,143701,1800.0020161520001,1800.555458564
c058,3,3,4,112591,113398,109520,2400.002412107,2400.714887221
c058,3,3,5,78919,79946,77242,3000.0026579610003,3000.910443251
c058,3,3,6,66815,67875,65129,3600.0081110710003,3601.121755411
c058,3,3,7,58659,59695,57288,4200.011379179,4201.36015507
c058,3,3,8,51624,52554,50349,4800.013872401,4801.624904546
c058,3,3,9,47151,48069,45920,5400.020913652001,5401.967621038
c058,3,3,10,38974,39924,38121,6000.025778078001,6002.281536997
c058,3,3,11,33538,34247,32621,6600.054401589001,6602.560894555
# search time: 6600.054s
# total time: 26425.245s
c058,4,3,1,882579,882581,821989,600.000156732,600.216568735
c058,4,3,2,317297,319561,308911,1200.000900022,1200.368159107
c058,4,3,3,145488,146435,143771,1800.001702955,1800.477573463
c058,4,3,4,112423,113150,109227,2400.006889788,2400.636916152
c058,4,3,5,78183,79211,76587,3000.007500928,3000.829269459
c058,4,3,6,66460,67394,64805,3600.021048925,3601.006623871
c058,4,3,7,58743,59733,57327,4200.034469978,4201.222661917
c058,4,3,8,51296,52243,50024,4800.040845054,4801.458419577
c058,4,3,9,46490,47357,45252,5400.059542219,5401.723463972
c058,4,3,10,39283,40080,38150,6000.06376154,6001.916275248
c058,4,3,11,33798,34782,33067,6600.065386323,6602.127731583
# search time: 6600.065s
# total time: 33027.670s
