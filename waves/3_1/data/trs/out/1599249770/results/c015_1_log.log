    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.93s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c015_1.json out/1599249770/results/c015_1_best.csv out/1599249770/results/c015_1_predictions.csv out/1599249770/results/c015_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 4, 5, 5, 4, 3, 3]), o: IntList([4, 3]) }
#   Datum { i: IntList([1, 3, 9, 2, 0, 5, 7, 5, 7, 1]), o: IntList([9, 2, 0]) }
#   Datum { i: IntList([4, 5, 6, 6, 4, 6, 9, 9]), o: IntList([6, 9]) }
#   Datum { i: IntList([1, 1, 3, 2, 3, 4, 5, 6, 5, 1]), o: IntList([3]) }
#   Datum { i: IntList([1, 5, 8, 3, 6, 2, 4, 8, 0]), o: IntList([8, 3, 6, 2, 4]) }
#   Datum { i: IntList([6, 7, 0, 1, 3, 5, 9, 4, 2, 8]), o: IntList([4, 2]) }
#   Datum { i: IntList([2, 4, 9, 0, 7, 6, 0, 9, 0, 4]), o: IntList([0, 7, 6]) }
#   Datum { i: IntList([7, 8, 2, 1, 7, 8, 7, 7, 7, 7]), o: IntList([7, 7]) }
#   Datum { i: IntList([5, 6, 2, 9, 8, 8, 9, 3, 1]), o: IntList([9, 3]) }
#   Datum { i: IntList([1, 4, 7, 7, 5, 1, 9, 5, 7]), o: IntList([7, 7, 5, 1]) }
#   Datum { i: IntList([1, 2, 9, 3, 1, 4, 0, 1, 2, 8]), o: IntList([9, 3]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c015,0,1,1,936069,936071,860706,600.001093568,603.788793914
c015,0,1,2,314942,317105,308501,1200.010455808,1204.70929715
c015,0,1,3,132413,133537,132401,1800.010994349,1805.392973852
c015,0,1,4,90989,91681,90817,2400.022878914,2406.318735504
c015,0,1,5,68830,69563,69100,3000.0243410460002,3006.813366707
c015,0,1,6,43439,44126,43888,3600.026481915,3607.362784971
c015,0,1,7,36370,37085,36846,4200.045248197001,4207.939288095
c015,0,1,8,30204,30906,30686,4800.0516210020005,4808.531395781
c015,0,1,9,26477,26867,26713,5400.061290014,5409.171802331
c015,0,1,10,24926,25583,24768,6000.079203656001,6010.076700551
c015,0,1,11,20801,21479,20757,6600.086128276001,6610.711778935
# search time: 6600.086s
# total time: 6611.254s
c015,1,1,1,869182,869184,802672,600.001405506,600.405841641
c015,1,1,2,276375,278348,270777,1200.002402853,1200.813886494
c015,1,1,3,113789,114823,113921,1800.0032148169998,1801.126110914
c015,1,1,4,78089,78886,78067,2400.012066106,2401.538862027
c015,1,1,5,69499,70171,69735,3000.015222149,3001.825766799
c015,1,1,6,42963,43763,43505,3600.015661772,3602.079114193
c015,1,1,7,37208,37897,37651,4200.022296622999,4202.31120489
c015,1,1,8,28958,29631,29455,4800.03515181,4802.734638659
c015,1,1,9,26142,26989,26784,5400.047323868999,5403.086498655
c015,1,1,10,23355,24121,23397,6000.066556460999,6003.490362603
c015,1,1,11,20204,20918,20350,6600.073912305999,6603.885946873
# search time: 6600.074s
# total time: 13215.478s
c015,2,1,1,882301,882303,834391,600.005915043,600.301365161
c015,2,1,2,279543,281750,274214,1200.006122138,1200.546082178
c015,2,1,3,116234,117317,116447,1800.008880717,1800.698848061
c015,2,1,4,76254,77024,76226,2400.0092860209998,2400.921344328
c015,2,1,5,66786,67552,67137,3000.0099274749996,3001.098061827
c015,2,1,6,42310,42964,42689,3600.0213114869994,3601.30344962
c015,2,1,7,34927,35658,35423,4200.042918863999,4201.598739456
c015,2,1,8,28418,29150,28901,4800.050295581999,4801.799132554
c015,2,1,9,26221,26916,26769,5400.066515829999,5402.008268758
c015,2,1,10,23846,24565,23839,6000.110370351998,6002.339765996
c015,2,1,11,20002,20649,20029,6600.139571728999,6602.685356238
# search time: 6600.140s
# total time: 19818.614s
c015,3,1,1,853038,853040,784540,600.000067985,600.256279831
c015,3,1,2,283877,286144,278521,1200.0008725530001,1200.441367309
c015,3,1,3,113386,114451,113605,1800.001214074,1800.579781168
c015,3,1,4,76148,76765,76001,2400.002640201,2400.736001513
c015,3,1,5,66666,67400,66996,3000.006292192,3000.899348927
c015,3,1,6,43859,44514,44249,3600.00648991,3601.069513169
c015,3,1,7,36064,36757,36510,4200.011396858999,4201.276621743
c015,3,1,8,28644,29238,29064,4800.013832581999,4801.430817047
c015,3,1,9,26076,26887,26701,5400.018117652999,5401.664041039
c015,3,1,10,23475,24177,23488,6000.031306827998,6001.914993223
c015,3,1,11,20188,20826,20122,6600.058229815999,6602.105858419
# search time: 6600.058s
# total time: 26421.192s
c015,4,1,1,913920,913922,847189,600.000312958,600.235683815
c015,4,1,2,279141,281391,273883,1200.0088721719999,1200.411039209
c015,4,1,3,119280,120248,119340,1800.012703664,1800.545981879
c015,4,1,4,76237,76945,76137,2400.013176845,2400.704654767
c015,4,1,5,67531,68227,67815,3000.018956602,3000.818103413
c015,4,1,6,42511,43266,43006,3600.021723588,3600.930126662
c015,4,1,7,35823,36485,36224,4200.039825846,4201.109549801
c015,4,1,8,29439,30084,29909,4800.040677239,4801.258917381
c015,4,1,9,24861,25504,25341,5400.045957212,5401.467398852
c015,4,1,10,24057,24493,23815,6000.056677828999,6001.677178064
c015,4,1,11,20007,20727,20018,6600.063342869,6601.845443216
# search time: 6600.063s
# total time: 33023.409s
