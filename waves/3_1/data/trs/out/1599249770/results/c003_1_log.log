    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.63s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c003_1.json out/1599249770/results/c003_1_best.csv out/1599249770/results/c003_1_predictions.csv out/1599249770/results/c003_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 2, 3, 9, 0, 4, 5, 6]), o: IntList([5]) }
#   Datum { i: IntList([6, 1, 6, 4, 4, 7, 0, 4, 6, 1]), o: IntList([0]) }
#   Datum { i: IntList([0, 5, 7, 4, 9, 1, 3, 6, 7, 8]), o: IntList([3]) }
#   Datum { i: IntList([6, 8, 5, 0, 2, 9, 8, 2]), o: IntList([8]) }
#   Datum { i: IntList([1, 0, 8, 6, 7, 2, 9, 3, 5, 4]), o: IntList([9]) }
#   Datum { i: IntList([1, 3, 1, 1, 5, 5, 1, 9, 1, 3]), o: IntList([1]) }
#   Datum { i: IntList([6, 9, 0, 8, 2, 8, 2, 3, 2]), o: IntList([2]) }
#   Datum { i: IntList([5, 2, 0, 3, 1, 8, 9, 4, 9, 5]), o: IntList([9]) }
#   Datum { i: IntList([0, 6, 4, 3, 2, 7, 6, 1]), o: IntList([6]) }
#   Datum { i: IntList([0, 8, 7, 8, 0, 8, 7, 0, 0, 8]), o: IntList([7]) }
#   Datum { i: IntList([9, 3, 0, 4, 3, 6, 4, 8, 7]), o: IntList([4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c003,0,1,1,904803,904805,826249,600.003274457,603.066250317
c003,0,1,2,307850,310303,300069,1200.004598775,1203.903423622
c003,0,1,3,171396,172414,165458,1800.01180634,1804.517216912
c003,0,1,4,136300,137373,131092,2400.012883806,2405.15282435
c003,0,1,5,85610,86607,83201,3000.015934524,3006.406251518
c003,0,1,6,66342,67505,64704,3600.02355719,3607.856774398
c003,0,1,7,54171,55050,52672,4200.035294884,4209.378165491
c003,0,1,8,47634,48486,46279,4800.049795432,4811.018890301
c003,0,1,9,38365,39158,37319,5400.058175493,5412.218678353
c003,0,1,10,33823,34571,32937,6000.062448157,6013.446551767
c003,0,1,11,30501,31232,29703,6600.068050656,6615.121171057
# search time: 6600.068s
# total time: 6615.385s
c003,1,1,1,834108,834110,784873,600.000289567,600.358130421
c003,1,1,2,305615,307633,297246,1200.004022145,1200.754530826
c003,1,1,3,164776,165807,158786,1800.0046542209998,1801.00871264
c003,1,1,4,130451,131644,125650,2400.0110825539996,2401.298179395
c003,1,1,5,84299,85359,81913,3000.0166326379995,3001.829435124
c003,1,1,6,67081,68052,65230,3600.0229596629997,3602.532763353
c003,1,1,7,53669,54519,52032,4200.023255487999,4203.180349403
c003,1,1,8,44747,45687,43635,4800.045463191,4803.881789588
c003,1,1,9,37086,37919,36166,5400.057162947,5404.73087151
c003,1,1,10,33836,34598,32923,6000.08102522,6005.405398722
c003,1,1,11,29222,29977,28504,6600.145259694,6606.309795095
# search time: 6600.145s
# total time: 13222.002s
c003,2,1,1,820824,820826,753787,600.000334134,600.250082246
c003,2,1,2,302266,304568,294195,1200.001564107,1200.488563253
c003,2,1,3,163852,164857,157997,1800.004511381,1800.647765258
c003,2,1,4,127409,128416,122746,2400.005818347,2400.847352037
c003,2,1,5,82423,83550,80061,3000.017681796,3001.227119497
c003,2,1,6,64103,65045,62307,3600.022622869,3601.716609097
c003,2,1,7,52561,53572,51190,4200.030890418,4202.143908311
c003,2,1,8,44274,45096,43010,4800.033228908,4802.714095699
c003,2,1,9,36894,37444,35694,5400.043733431,5403.275215795
c003,2,1,10,33174,33866,32301,6000.067732963,6003.971629466
c003,2,1,11,28881,29674,28180,6600.081580941,6604.539740984
# search time: 6600.082s
# total time: 19826.910s
c003,3,1,1,879185,879187,816187,600.000463813,600.23900916
c003,3,1,2,309323,311517,301166,1200.00095087,1200.493343717
c003,3,1,3,169080,170014,163071,1800.002075005,1800.703068861
c003,3,1,4,128669,129847,124198,2400.009367297,2400.846237725
c003,3,1,5,83071,84123,80645,3000.010041306,3001.100791475
c003,3,1,6,65923,67017,64210,3600.016705119,3601.45842986
c003,3,1,7,52839,53773,51414,4200.019579048,4201.844455821
c003,3,1,8,44349,45191,43137,4800.036721840001,4802.324361688
c003,3,1,9,37306,38217,36438,5400.049856261001,5402.618470398
c003,3,1,10,33682,34427,32779,6000.135663022001,6003.07615576
c003,3,1,11,28533,29209,27808,6600.148626319001,6603.739939945
# search time: 6600.149s
# total time: 26430.930s
c003,4,1,1,869154,869156,808581,600.00038699,600.346275587
c003,4,1,2,318817,321146,310424,1200.0014554630002,1200.59266701
c003,4,1,3,165345,166322,159237,1800.002304048,1800.751654265
c003,4,1,4,129057,130196,124436,2400.004851423,2400.897437286
c003,4,1,5,83370,84396,80957,3000.018756026,3001.142273325
c003,4,1,6,65580,66612,63709,3600.019205171,3601.469084331
c003,4,1,7,53651,54666,52205,4200.023073813,4201.860313507
c003,4,1,8,44493,45410,43373,4800.0401395690005,4802.192257777
c003,4,1,9,36797,37713,35898,5400.048751558001,5402.6589713
c003,4,1,10,33148,33916,32282,6000.055631076,6003.033263618
c003,4,1,11,28311,29216,27810,6600.059163658,6603.431043019
# search time: 6600.059s
# total time: 33034.551s
