    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.93s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c021_1.json out/1599249770/results/c021_1_best.csv out/1599249770/results/c021_1_predictions.csv out/1599249770/results/c021_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 6, 9, 3]), o: IntList([1, 8, 6, 9, 3]) }
#   Datum { i: IntList([7, 4]), o: IntList([7, 8, 4]) }
#   Datum { i: IntList([0, 2, 3]), o: IntList([0, 8, 2, 3]) }
#   Datum { i: IntList([7, 9, 1, 2, 6, 3, 0, 4, 7, 5]), o: IntList([7, 8, 9, 1, 2, 6, 3, 0, 4, 7, 5]) }
#   Datum { i: IntList([0, 8, 6, 4, 0]), o: IntList([0, 8, 8, 6, 4, 0]) }
#   Datum { i: IntList([4, 9, 5, 1, 7, 3]), o: IntList([4, 8, 9, 5, 1, 7, 3]) }
#   Datum { i: IntList([1, 8, 1, 1, 6, 2, 1, 4, 4, 3]), o: IntList([1, 8, 8, 1, 1, 6, 2, 1, 4, 4, 3]) }
#   Datum { i: IntList([2, 9, 1, 7, 4, 6, 0]), o: IntList([2, 8, 9, 1, 7, 4, 6, 0]) }
#   Datum { i: IntList([9, 2, 1, 9, 3, 3, 1, 8, 9, 2]), o: IntList([9, 8, 2, 1, 9, 3, 3, 1, 8, 9, 2]) }
#   Datum { i: IntList([5, 5, 5, 5, 5, 5, 5, 5]), o: IntList([5, 8, 5, 5, 5, 5, 5, 5, 5]) }
#   Datum { i: IntList([6, 6, 0, 5, 2, 6, 0, 3, 2]), o: IntList([6, 8, 6, 0, 5, 2, 6, 0, 3, 2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c021,0,1,1,961698,961700,885254,600.000117316,602.896052997
c021,0,1,2,221276,223483,217755,1200.0014338400001,1203.602534121
c021,0,1,3,174056,175254,168900,1800.0035645350001,1804.0266765
c021,0,1,4,139886,140997,135660,2400.005114339,2404.366034354
c021,0,1,5,71760,72652,70032,3000.011979499,3004.763907367
c021,0,1,6,61893,62740,60617,3600.013342964,3605.086942247
c021,0,1,7,52157,52945,51043,4200.013640994,4205.494177336
c021,0,1,8,39629,40403,39041,4800.020816791,4805.946468461
c021,0,1,9,33552,34191,33106,5400.0934683899995,5406.396455808
c021,0,1,10,27331,28022,27144,6000.107645413999,6006.892144678
c021,0,1,11,22943,23708,22914,6600.140830556999,6607.407162331
# search time: 6600.141s
# total time: 6607.778s
c021,1,1,1,923417,923419,859022,600.000784778,600.469942541
c021,1,1,2,221154,223281,217353,1200.001853381,1200.801092118
c021,1,1,3,165215,166167,158680,1800.002185863,1801.007328022
c021,1,1,4,135291,136451,131370,2400.005633176,2401.172874101
c021,1,1,5,71057,72113,69576,3000.017073676,3001.381608716
c021,1,1,6,60871,61705,59523,3600.018842125,3601.60930176
c021,1,1,7,50060,50805,49049,4200.034663127,4201.840719723
c021,1,1,8,38435,39227,37913,4800.0823746940005,4802.120818024
c021,1,1,9,32868,33656,32562,5400.093343905,5402.327436191
c021,1,1,10,26990,27750,26822,6000.095193866,6002.546188607
c021,1,1,11,22890,23641,22871,6600.118268717,6602.772864008
# search time: 6600.118s
# total time: 13210.891s
c021,2,1,1,897794,897796,827159,600.001645012,600.317091079
c021,2,1,2,218761,220942,215149,1200.001789,1200.521713818
c021,2,1,3,163561,164617,158266,1800.003333362,1800.65828865
c021,2,1,4,132273,133448,128623,2400.007396382,2400.791813326
c021,2,1,5,69699,70610,68110,3000.0172343960003,3000.922637262
c021,2,1,6,60169,60998,59197,3600.0210830130004,3601.04160024
c021,2,1,7,49772,50593,49098,4200.030977187001,4201.220198215
c021,2,1,8,37726,38466,37314,4800.036285947001,4801.365463017
c021,2,1,9,32683,33448,32408,5400.038356934001,5401.527835968
c021,2,1,10,26107,26863,25961,6000.053458090001,6001.65316569
c021,2,1,11,22555,23224,22461,6600.0948930230015,6601.915170241
# search time: 6600.095s
# total time: 19813.101s
c021,3,1,1,891080,891082,838146,600.000122133,600.268646022
c021,3,1,2,222908,225008,219052,1200.002729995,1200.484731045
c021,3,1,3,171820,172834,166704,1800.003147122,1800.613051237
c021,3,1,4,132770,133882,128646,2400.005763654,2400.739509547
c021,3,1,5,70225,71138,68595,3000.006496664,3000.854106433
c021,3,1,6,61588,62394,60302,3600.015702303,3600.977352418
c021,3,1,7,49889,50658,48363,4200.035325182,4201.106034157
c021,3,1,8,38453,39278,37800,4800.036293298,4801.238504756
c021,3,1,9,32461,33156,32140,5400.050701022,5401.358344159
c021,3,1,10,26220,26918,26017,6000.054530226,6001.484731709
c021,3,1,11,22526,23231,22496,6600.098348947,6601.723771734
# search time: 6600.098s
# total time: 26415.156s
c021,4,1,1,909330,909332,834532,600.000305804,600.261102131
c021,4,1,2,217648,219923,214047,1200.000961354,1200.434874746
c021,4,1,3,166566,167607,161278,1800.004556425,1800.530973181
c021,4,1,4,131780,132890,127589,2400.006478376,2400.612478789
c021,4,1,5,69522,70542,67843,3000.012974092,3000.707145381
c021,4,1,6,59486,60222,58293,3600.014782096,3600.786600529
c021,4,1,7,49505,50386,48601,4200.021400483,4200.865168194
c021,4,1,8,38001,38695,37403,4800.031884978001,4801.020826759
c021,4,1,9,32167,32942,31829,5400.048154721,5401.123148246
c021,4,1,10,26059,26789,25861,6000.050259931,6001.206311296
c021,4,1,11,22693,23394,22570,6600.0684524670005,6601.347358026
# search time: 6600.068s
# total time: 33016.744s
