    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.50s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c005_1.json out/1599249770/results/c005_1_best.csv out/1599249770/results/c005_1_predictions.csv out/1599249770/results/c005_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([2, 1, 9, 6, 7, 0, 4, 5, 3]), o: IntList([9]) }
#   Datum { i: IntList([7, 2, 1, 8, 0, 6, 3, 5, 9, 4]), o: IntList([5]) }
#   Datum { i: IntList([5, 1, 7, 6, 9, 8, 2, 0, 3, 4]), o: IntList([8]) }
#   Datum { i: IntList([9, 1, 6, 4, 7, 5, 3, 8, 2, 0]), o: IntList([0]) }
#   Datum { i: IntList([4, 1, 9, 6, 3, 2, 5, 0, 8, 7]), o: IntList([3]) }
#   Datum { i: IntList([4, 8, 5, 6, 2, 7, 1, 0, 3, 9]), o: IntList([2]) }
#   Datum { i: IntList([6, 1, 2, 8, 5, 4, 7, 9, 3, 0]), o: IntList([7]) }
#   Datum { i: IntList([2, 6, 3, 7, 4, 8, 1, 9, 5, 0]), o: IntList([3]) }
#   Datum { i: IntList([8, 2, 9, 3, 7, 6, 0, 5, 1, 4]), o: IntList([1]) }
#   Datum { i: IntList([3, 9, 4, 5, 1, 8, 2, 0, 6, 7]), o: IntList([5]) }
#   Datum { i: IntList([1, 6, 5, 8, 3, 4, 2, 7, 0, 9]), o: IntList([6]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c005,0,1,1,851546,851548,777506,600.000075592,602.905289403
c005,0,1,2,282673,284909,275281,1200.00053707,1203.833257774
c005,0,1,3,112524,113546,109334,1800.0083003280001,1805.275267285
c005,0,1,4,102111,102802,98628,2400.0105717220003,2406.061723242
c005,0,1,5,70519,71268,68351,3000.027941913,3006.996599421
c005,0,1,6,58442,59105,56468,3600.038788444,3607.861275088
c005,0,1,7,45734,46399,44394,4200.040465292001,4208.764493543
c005,0,1,8,36936,37603,35939,4800.0407853550005,4809.696808026
c005,0,1,9,33476,34247,32705,5400.058237471,5410.787300076
c005,0,1,10,27125,27896,26606,6000.071599748,6012.131439803
c005,0,1,11,20058,20805,20063,6600.106690402,6613.824129714
# search time: 6600.107s
# total time: 6614.079s
c005,1,1,1,810563,810565,757390,600.000074822,600.375896968
c005,1,1,2,285172,287603,277987,1200.0124418159999,1200.863763411
c005,1,1,3,113416,114365,110068,1800.0144231499999,1801.44981117
c005,1,1,4,98374,99012,94780,2400.017910561,2401.790669108
c005,1,1,5,71489,72244,68971,3000.021059751,3002.157694275
c005,1,1,6,57677,58383,55808,3600.033089456,3602.635984189
c005,1,1,7,44629,45379,43397,4200.034359728001,4203.194042225
c005,1,1,8,37434,38153,36531,4800.042165654,4803.720302575
c005,1,1,9,31592,32314,30882,5400.048954371,5404.334114375
c005,1,1,10,27735,28466,27142,6000.063134373,6004.798996343
c005,1,1,11,20966,21734,20800,6600.06922352,6605.528006043
# search time: 6600.069s
# total time: 13219.932s
c005,2,1,1,814319,814321,742765,600.000816253,600.295582563
c005,2,1,2,290042,291189,281310,1200.015582227,1200.607991494
c005,2,1,3,121646,122638,117838,1800.016283032,1800.969441656
c005,2,1,4,101609,102327,97851,2400.01685928,2401.220616618
c005,2,1,5,74569,75312,71798,3000.0231582710003,3001.48668416
c005,2,1,6,58612,59325,56723,3600.024085718,3601.802018451
c005,2,1,7,45580,46308,44265,4200.03298667,4202.070645417
c005,2,1,8,38118,38860,37254,4800.036029486,4802.576501014
c005,2,1,9,31309,32025,30522,5400.047182421,5402.906734822
c005,2,1,10,27249,27923,26622,6000.047701337,6003.276607305
c005,2,1,11,21674,22303,21278,6600.051861145,6603.626043959
# search time: 6600.052s
# total time: 19824.023s
c005,3,1,1,822590,822592,759173,600.000176623,600.237727003
c005,3,1,2,274356,275441,265994,1200.000541112,1200.475269407
c005,3,1,3,129982,130966,125908,1800.001670738,1800.724404828
c005,3,1,4,101680,102448,97974,2400.006408817,2400.931646047
c005,3,1,5,75021,75868,72616,3000.0126971120003,3001.098626013
c005,3,1,6,57499,58349,55897,3600.015447607,3601.270144722
c005,3,1,7,41505,42207,40496,4200.024305363,4201.63588147
c005,3,1,8,34935,35830,34304,4800.031638022,4801.88135092
c005,3,1,9,29138,29879,28651,5400.038295392,5402.298825853
c005,3,1,10,25616,26294,25218,6000.087908003,6002.741778172
c005,3,1,11,18389,19153,18402,6600.0880381,6603.174429473
# search time: 6600.088s
# total time: 26427.551s
c005,4,1,1,806755,806757,759971,600.000164551,600.232916407
c005,4,1,2,280070,281902,272539,1200.000598387,1200.40584075
c005,4,1,3,122156,122990,118146,1800.01010008,1800.700463794
c005,4,1,4,100201,100975,96608,2400.015635564,2400.883208111
c005,4,1,5,72506,73319,69916,3000.032680881,3001.076201986
c005,4,1,6,55162,55965,53490,3600.0459097390003,3601.305777923
c005,4,1,7,45339,46071,44090,4200.050020989001,4201.497614867
c005,4,1,8,38005,38869,37231,4800.051360819,4801.6628544
c005,4,1,9,32597,33329,31813,5400.064182009,5401.980479887
c005,4,1,10,26323,27013,25769,6000.09645343,6002.28410582
c005,4,1,11,21887,22625,21695,6600.1244307160005,6602.588540341
# search time: 6600.124s
# total time: 33030.479s
