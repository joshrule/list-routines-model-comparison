    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized + debuginfo] target(s) in 0.90s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c010_1.json out/1599249770/results/c010_1_best.csv out/1599249770/results/c010_1_predictions.csv out/1599249770/results/c010_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([2, 3, 2, 7, 6]), o: IntList([3, 2]) }
#   Datum { i: IntList([3, 9, 8, 6, 5, 1]), o: IntList([9, 8, 6]) }
#   Datum { i: IntList([1, 2, 4, 5, 0, 8, 9, 7, 8]), o: IntList([2]) }
#   Datum { i: IntList([5, 5, 5, 1, 1, 5]), o: IntList([5, 5, 1, 1, 5]) }
#   Datum { i: IntList([0, 2]), o: IntList([]) }
#   Datum { i: IntList([9, 7, 0, 9, 7, 9, 9, 4, 0, 7]), o: IntList([7, 0, 9, 7, 9, 9, 4, 0, 7]) }
#   Datum { i: IntList([3, 8, 3, 3, 8, 3, 3]), o: IntList([8, 3, 3]) }
#   Datum { i: IntList([6, 2, 6, 1, 3, 6, 2, 9]), o: IntList([2, 6, 1, 3, 6, 2]) }
#   Datum { i: IntList([1, 0, 2, 1, 2]), o: IntList([0]) }
#   Datum { i: IntList([8, 2, 5, 7, 1, 5, 5, 8, 8, 8]), o: IntList([2, 5, 7, 1, 5, 5, 8, 8]) }
#   Datum { i: IntList([4, 4, 4, 4, 4, 4, 4, 4, 4]), o: IntList([4, 4, 4, 4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c010,0,1,1,970706,970708,902356,600.000083419,603.104534405
c010,0,1,2,333127,335471,326378,1200.000636879,1203.869222266
c010,0,1,3,149051,150069,148462,1800.010730402,1804.379817656
c010,0,1,4,110178,110925,109970,2400.0115548060003,2404.794445364
c010,0,1,5,69304,70125,69688,3000.025479749,3005.171085667
c010,0,1,6,67675,68383,65742,3600.032691963,3605.527286599
c010,0,1,7,57940,58642,56763,4200.039583431,4205.793444646
c010,0,1,8,50889,51675,49900,4800.041439080001,4806.098674633
c010,0,1,9,30876,31618,30258,5400.061592609,5406.562471016
c010,0,1,10,29753,30367,29134,6000.067330279,6007.040865327
c010,0,1,11,24550,25337,24329,6600.0719817340005,6607.453761054
# search time: 6600.072s
# total time: 6608.043s
c010,1,1,1,916911,916913,843360,600.000190288,600.555866545
c010,1,1,2,312953,314948,306250,1200.001050239,1200.914367427
c010,1,1,3,145472,146468,144956,1800.0028572639999,1801.127644617
c010,1,1,4,104428,105214,104321,2400.005631907,2401.346031606
c010,1,1,5,68475,69165,68778,3000.009892909,3001.5395978
c010,1,1,6,66961,67605,65027,3600.024288565,3601.73268189
c010,1,1,7,55786,56450,54654,4200.025133499,4201.891233512
c010,1,1,8,49567,50335,48566,4800.0318973779995,4802.049832542
c010,1,1,9,30693,31520,30256,5400.044909204999,5402.362876784
c010,1,1,10,28905,29521,28301,6000.056278521999,6002.57187544
c010,1,1,11,24054,24829,23775,6600.065721387999,6602.767008915
# search time: 6600.066s
# total time: 13211.349s
c010,2,1,1,816102,816104,764622,600.000280879,600.289673982
c010,2,1,2,306102,307340,298970,1200.000941774,1200.539831352
c010,2,1,3,141069,142138,140664,1800.003646272,1800.706398125
c010,2,1,4,102636,103444,102576,2400.004699846,2400.853039057
c010,2,1,5,67059,67777,67342,3000.010097845,3001.014682226
c010,2,1,6,66179,66902,64340,3600.016088238,3601.153313324
c010,2,1,7,54948,55722,53913,4200.021848525,4201.263664939
c010,2,1,8,48790,49441,47649,4800.030156368,4801.399831843
c010,2,1,9,29839,30638,29354,5400.039783865,5401.58163438
c010,2,1,10,28767,29424,28189,6000.06013807,6001.753546808
c010,2,1,11,23612,24312,23312,6600.084477174,6601.946923888
# search time: 6600.084s
# total time: 19813.544s
c010,3,1,1,896686,896688,844731,600.001089989,600.297989515
c010,3,1,2,315973,317788,308906,1200.005791684,1200.538436809
c010,3,1,3,144057,145088,143546,1800.0141670900002,1800.691446715
c010,3,1,4,103514,104310,103418,2400.0176685700003,2400.846917446
c010,3,1,5,67253,68009,67552,3000.0224730080004,3000.961802599
c010,3,1,6,64995,65685,63073,3600.0272176500002,3601.08153185
c010,3,1,7,56210,56897,55076,4200.038027465001,4201.206461056
c010,3,1,8,49200,49998,48188,4800.038342891001,4801.276552216
c010,3,1,9,30646,31455,30159,5400.054736651001,5401.426134245
c010,3,1,10,28986,29703,28488,6000.066508476001,6001.535349272
c010,3,1,11,24084,24882,23880,6600.086424453001,6601.679146534
# search time: 6600.086s
# total time: 26415.578s
c010,4,1,1,917004,917006,847061,600.000270375,600.226429747
c010,4,1,2,316021,318252,309466,1200.000358557,1200.392234263
c010,4,1,3,142803,143885,142300,1800.003078815,1800.509700024
c010,4,1,4,102001,102791,101843,2400.005078545,2400.629234246
c010,4,1,5,67275,67985,67556,3000.0092282339997,3000.725968927
c010,4,1,6,65014,65717,63104,3600.011154901,3600.867451504
c010,4,1,7,55453,56148,54301,4200.017860962,4200.953983069
c010,4,1,8,49090,49789,48058,4800.020866145,4801.031165871
c010,4,1,9,29358,30285,29049,5400.039747573999,5401.202699899
c010,4,1,10,29053,29709,28504,6000.048890773,6001.341713661
c010,4,1,11,23428,24280,23242,6600.077872389999,6601.471795492
# search time: 6600.078s
# total time: 33017.406s
