    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized + debuginfo] target(s) in 0.73s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c020_1.json out/1599249770/results/c020_1_best.csv out/1599249770/results/c020_1_predictions.csv out/1599249770/results/c020_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 7, 7, 9]), o: IntList([9, 7, 7, 9]) }
#   Datum { i: IntList([8, 7, 6, 8, 9, 4, 3]), o: IntList([3, 7, 6, 8, 9, 4, 3]) }
#   Datum { i: IntList([9, 9, 2, 3, 3, 3, 2, 1, 1]), o: IntList([1, 9, 2, 3, 3, 3, 2, 1, 1]) }
#   Datum { i: IntList([8, 9, 7, 2, 7, 0]), o: IntList([0, 9, 7, 2, 7, 0]) }
#   Datum { i: IntList([8, 5]), o: IntList([5, 5]) }
#   Datum { i: IntList([1, 3, 1, 4, 1, 1, 1, 6, 4, 0]), o: IntList([0, 3, 1, 4, 1, 1, 1, 6, 4, 0]) }
#   Datum { i: IntList([2, 2, 0, 2, 0, 2, 0, 0, 0]), o: IntList([0, 2, 0, 2, 0, 2, 0, 0, 0]) }
#   Datum { i: IntList([9, 4, 3, 7, 8]), o: IntList([8, 4, 3, 7, 8]) }
#   Datum { i: IntList([0, 5, 3, 5, 7, 7, 9, 9]), o: IntList([9, 5, 3, 5, 7, 7, 9, 9]) }
#   Datum { i: IntList([2, 2, 5, 5, 2, 5, 8]), o: IntList([8, 2, 5, 5, 2, 5, 8]) }
#   Datum { i: IntList([5, 9, 6]), o: IntList([6, 9, 6]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c020,0,1,1,926614,926616,857296,600.000246339,603.349363667
c020,0,1,2,249228,251311,243003,1200.001831088,1203.99286469
c020,0,1,3,106175,107330,105990,1800.005991024,1804.433889948
c020,0,1,4,63113,63949,63462,2400.010516732,2404.745472576
c020,0,1,5,50860,51606,51218,3000.016378497,3005.055042317
c020,0,1,6,40202,40831,40529,3600.017910384,3605.45818048
c020,0,1,7,28930,29472,29373,4200.034277406,4205.834137492
c020,0,1,8,24742,25375,25232,4800.045441669,4806.24042137
c020,0,1,9,22605,23190,23066,5400.055646164,5406.570880201
c020,0,1,10,17803,18198,18090,6000.0715921539995,6007.168708165
c020,0,1,11,15479,16240,16113,6600.097680321999,6607.680536324
# search time: 6600.098s
# total time: 6607.998s
c020,1,1,1,899448,899450,822712,600.000777937,600.489523036
c020,1,1,2,246312,248611,241140,1200.0008944239999,1200.793668806
c020,1,1,3,102266,103349,102445,1800.0040416349998,1801.04836152
c020,1,1,4,60865,61611,61319,2400.009031992,2401.267507582
c020,1,1,5,48121,48770,48557,3000.0109408099997,3001.487520181
c020,1,1,6,40521,41219,40936,3600.0253072399996,3601.707553801
c020,1,1,7,29410,30060,29986,4200.0375945119995,4202.040451906
c020,1,1,8,24351,24892,24713,4800.072735598,4802.332059718
c020,1,1,9,22375,23068,22936,5400.079744484,5402.550829215
c020,1,1,10,18253,18914,18816,6000.120102901,6002.865942269
c020,1,1,11,15572,16211,16117,6600.15553302,6603.153873567
# search time: 6600.156s
# total time: 13211.650s
c020,2,1,1,907238,907240,857066,600.000461057,600.37486521
c020,2,1,2,246647,247719,240351,1200.001973716,1200.642236721
c020,2,1,3,102457,103403,102555,1800.0022770310002,1800.822455735
c020,2,1,4,58831,59574,59278,2400.010127183,2400.987996185
c020,2,1,5,46493,47257,47006,3000.019145318,3001.150410528
c020,2,1,6,39063,39720,39450,3600.021801156,3601.332840404
c020,2,1,7,28494,29106,29036,4200.034912947,4201.524821351
c020,2,1,8,23917,24531,24390,4800.045296085999,4801.709257576
c020,2,1,9,22380,22973,22837,5400.064383624999,5401.874484337
c020,2,1,10,17327,18069,17964,6000.146925421999,6002.072624209
c020,2,1,11,15532,16143,16066,6600.1535148309995,6602.203483383
# search time: 6600.154s
# total time: 19814.113s
c020,3,1,1,867190,867192,819220,600.001159288,600.34899644
c020,3,1,2,243443,244132,236589,1200.004010824,1200.582178385
c020,3,1,3,103285,104311,103179,1800.011317177,1800.751395631
c020,3,1,4,62417,63178,62710,2400.0157474999996,2400.856731639
c020,3,1,5,48206,48894,48522,3000.0289958879994,3000.992015286
c020,3,1,6,37541,38183,37892,3600.0301012679993,3601.120750755
c020,3,1,7,29412,30050,29956,4200.037197395999,4201.289699323
c020,3,1,8,24403,25022,24881,4800.043221433999,4801.519037052
c020,3,1,9,21144,21882,21768,5400.074207460999,5401.681808374
c020,3,1,10,16878,17599,17496,6000.110115271998,6001.895817087
c020,3,1,11,14983,15623,15525,6600.121709283999,6602.031944969
# search time: 6600.122s
# total time: 26416.507s
c020,4,1,1,836083,836085,791925,600.000400512,600.280108727
c020,4,1,2,242088,243269,235901,1200.0009695610001,1200.435065238
c020,4,1,3,95598,96690,95867,1800.003731207,1800.566507527
c020,4,1,4,57143,57848,57583,2400.018415185,2400.677851224
c020,4,1,5,46176,46785,46549,3000.023114769,3000.779667368
c020,4,1,6,38815,39509,39201,3600.03557669,3600.930919596
c020,4,1,7,28769,29435,29364,4200.046137737,4201.077974031
c020,4,1,8,24625,25201,25088,4800.047898541,4801.166995799
c020,4,1,9,21668,22302,22167,5400.051343973,5401.299954173
c020,4,1,10,16895,17379,17329,6000.0668611910005,6001.412580958
c020,4,1,11,14628,15207,15111,6600.093206076001,6601.552464002
# search time: 6600.093s
# total time: 33018.412s
