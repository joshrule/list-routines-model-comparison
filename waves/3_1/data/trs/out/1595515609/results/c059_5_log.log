    Finished release [optimized] target(s) in 0.03s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c059_5.json out/1595515609/results/c059_5_best.csv out/1595515609/results/c059_5_predictions.csv out/1595515609/results/c059_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([0, 5, 3, 8, 1, 9, 4, 6, 2]), o: IntList([0, 5, 3, 6, 1, 9, 4, 8, 2]) }
#   Datum { i: IntList([6, 1, 8, 5, 2, 3, 7, 9, 0, 4]), o: IntList([6, 1, 8, 9, 2, 3, 7, 5, 0, 4]) }
#   Datum { i: IntList([1, 0, 7, 8, 6, 4, 2, 6, 1, 9]), o: IntList([1, 0, 7, 6, 6, 4, 2, 8, 1, 9]) }
#   Datum { i: IntList([9, 5, 5, 9, 3, 7, 6, 3, 9, 3]), o: IntList([9, 5, 5, 3, 3, 7, 6, 9, 9, 3]) }
#   Datum { i: IntList([7, 3, 4, 0, 1, 6, 8, 1, 5]), o: IntList([7, 3, 4, 1, 1, 6, 8, 0, 5]) }
#   Datum { i: IntList([8, 3, 9, 2, 7, 4, 6, 3]), o: IntList([8, 3, 9, 3, 7, 4, 6, 2]) }
#   Datum { i: IntList([6, 7, 2, 6, 5, 4, 4, 0]), o: IntList([6, 7, 2, 0, 5, 4, 4, 6]) }
#   Datum { i: IntList([8, 9, 9, 6, 5, 2, 4, 0, 0]), o: IntList([8, 9, 9, 0, 5, 2, 4, 6, 0]) }
#   Datum { i: IntList([3, 1, 1, 5, 1, 0, 7, 0, 7]), o: IntList([3, 1, 1, 0, 1, 0, 7, 5, 7]) }
#   Datum { i: IntList([5, 2, 4, 3, 7, 0, 8, 6]), o: IntList([5, 2, 4, 6, 7, 0, 8, 3]) }
#   Datum { i: IntList([5, 2, 8, 8, 8, 8, 2, 5]), o: IntList([5, 2, 8, 5, 8, 8, 2, 8]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c059,0,5,1,1157960,1157962,1064595,600.006585103,601.921639502
c059,0,5,2,176351,178587,172940,1200.0074506360002,1202.511005864
c059,0,5,3,93743,94634,90747,1800.0203805660003,1802.903264593
c059,0,5,4,68189,69149,66659,2400.023142551,2403.355374237
c059,0,5,5,41518,42362,41480,3000.025855244,3004.337008565
c059,0,5,6,39821,40639,39159,3600.030096649,3604.837145712
c059,0,5,7,30932,31622,30796,4200.031666884,4205.818890873
c059,0,5,8,30473,31149,30436,4800.032192639999,4806.614099177
c059,0,5,9,26503,27216,26374,5400.070332404,5407.540869039
c059,0,5,10,23832,24643,23898,6000.074188494,6008.37351567
c059,0,5,11,21486,22178,21488,6600.078587678,6609.159090775
# search time: 6600.079s
# total time: 6609.356s
c059,1,5,1,1129953,1129955,1051593,600.000819441,600.291531519
c059,1,5,2,179245,179747,174195,1200.003187519,1200.514579309
c059,1,5,3,94145,95007,91456,1800.011039049,1800.701174981
c059,1,5,4,68325,69335,67415,2400.021389641,2400.897213511
c059,1,5,5,41606,42422,41465,3000.0288693009998,3001.324156831
c059,1,5,6,39246,39871,38468,3600.0372457979997,3601.520602474
c059,1,5,7,30515,31202,30416,4200.053828123,4202.013149391
c059,1,5,8,30246,30924,30181,4800.073313504,4802.465913006
c059,1,5,9,26414,27154,26442,5400.088128162,5402.836344433
c059,1,5,10,22908,23587,22991,6000.095096447,6003.385653186
c059,1,5,11,21188,21891,21244,6600.1005836720005,6603.760719713
# search time: 6600.101s
# total time: 13213.381s
c059,2,5,1,1148907,1148909,1055820,600.001655917,600.234836475
c059,2,5,2,174662,175244,169861,1200.00191982,1200.439454388
c059,2,5,3,93620,94523,91014,1800.006016931,1800.581400158
c059,2,5,4,68267,69127,67276,2400.008432973,2400.709304585
c059,2,5,5,41437,42156,41313,3000.01550638,3000.978518608
c059,2,5,6,39976,40752,39365,3600.031129104,3601.152004549
c059,2,5,7,30533,31214,30539,4200.034706355,4201.53002345
c059,2,5,8,29845,30487,29723,4800.039016676999,4801.77100532
c059,2,5,9,26603,27268,26454,5400.048067368999,5402.033611905
c059,2,5,10,23394,24131,23465,6000.062729809999,6002.437985076
c059,2,5,11,21120,21783,21151,6600.0641865319985,6602.749832643
# search time: 6600.064s
# total time: 19816.465s
c059,3,5,1,1106052,1106054,1004489,600.000333042,600.180978104
c059,3,5,2,177089,179199,173924,1200.00212069,1200.309491933
c059,3,5,3,89679,90686,85981,1800.0021715010002,1800.411712136
c059,3,5,4,67160,68135,65806,2400.008344792,2400.525946476
c059,3,5,5,42268,43128,42091,3000.008398862,3000.740136281
c059,3,5,6,39678,40387,39054,3600.015234357,3600.867836281
c059,3,5,7,31339,31982,31212,4200.026635571,4201.0910436
c059,3,5,8,30218,30953,30104,4800.030799119,4801.293026134
c059,3,5,9,26537,27344,26453,5400.038617028,5401.477047785
c059,3,5,10,23386,24074,23310,6000.051389144,6001.742470854
c059,3,5,11,21205,21891,21180,6600.055719264,6601.947910049
# search time: 6600.056s
# total time: 26418.595s
c059,4,5,1,1141271,1141273,1057914,600.001159501,600.176023881
c059,4,5,2,176578,178965,173594,1200.004804186,1200.284528513
c059,4,5,3,92658,93674,90233,1800.0072755820001,1800.371164792
c059,4,5,4,67765,68616,66650,2400.0108986470004,2400.467536984
c059,4,5,5,41236,42070,40938,3000.0172111250004,3000.629485692
c059,4,5,6,40051,40839,39397,3600.027779542,3600.718673654
c059,4,5,7,31049,31758,31011,4200.032839707001,4200.980874132
c059,4,5,8,29928,30673,29833,4800.04102597,4801.2045751
c059,4,5,9,26461,27136,26439,5400.058041946,5401.426614762
c059,4,5,10,23369,24026,23373,6000.085545884001,6001.713746896
c059,4,5,11,21069,21714,21058,6600.092502558001,6601.877449258
# search time: 6600.093s
# total time: 33020.742s
