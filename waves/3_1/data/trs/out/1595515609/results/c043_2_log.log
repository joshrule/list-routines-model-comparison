    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.26s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c043_2.json out/1595515609/results/c043_2_best.csv out/1595515609/results/c043_2_predictions.csv out/1595515609/results/c043_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([5, 5, 5, 5, 5]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([4, 4, 6, 4, 6, 6, 6, 4, 6]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([0]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([9, 9, 9, 9, 9, 9, 9, 9]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([5, 0, 6, 4, 5, 5, 9, 6, 4, 1]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([5, 5, 5, 6, 6, 5, 6, 5, 6, 6]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([9, 3, 7, 8, 2, 1, 9, 0]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([8, 7, 8, 8, 4, 7]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([2, 2, 2, 2]), o: IntList([8, 2, 7, 0, 3]) }
#   Datum { i: IntList([4, 1, 6, 4, 6, 1, 6, 3, 4]), o: IntList([8, 2, 7, 0, 3]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c043,0,2,1,998304,998306,912547,600.003238633,602.308894363
c043,0,2,2,220549,222815,216270,1200.010546212,1202.920239691
c043,0,2,3,142555,143617,139633,1800.015741109,1803.516844638
c043,0,2,4,94649,95517,93602,2400.016826856,2404.49281615
c043,0,2,5,88203,89148,86911,3000.027515295,3005.191349196
c043,0,2,6,67423,68272,66576,3600.0320584409997,3605.931114665
c043,0,2,7,49811,50559,49470,4200.035974627,4206.770778451
c043,0,2,8,45119,45896,44677,4800.05858724,4807.416378956
c043,0,2,9,37277,37994,36988,5400.0691007919995,5407.998575852
c043,0,2,10,32673,33337,32527,6000.075661977,6008.690192527
c043,0,2,11,30057,30655,29878,6600.099202682,6609.248355225
# search time: 6600.099s
# total time: 6609.436s
c043,1,2,1,993792,993794,918487,600.000420513,600.313612425
c043,1,2,2,216793,219073,212699,1200.001275602,1200.560647064
c043,1,2,3,140207,141337,137161,1800.0056752350001,1800.828358059
c043,1,2,4,92659,93705,91065,2400.0123275700003,2401.226483767
c043,1,2,5,87702,88641,86204,3000.0154389840004,3001.535852746
c043,1,2,6,67917,68704,66897,3600.0163167470005,3601.908457167
c043,1,2,7,48718,49440,48344,4200.02153805,4202.329406725
c043,1,2,8,44279,45035,43770,4800.022114747,4802.681518139
c043,1,2,9,36433,37194,36235,5400.024935292,5402.954151961
c043,1,2,10,32137,32818,31925,6000.070177692,6003.355938493
c043,1,2,11,29482,30079,29359,6600.082132822,6603.575179355
# search time: 6600.082s
# total time: 13213.269s
c043,2,2,1,965829,965831,903229,600.007079358,600.235398546
c043,2,2,2,216270,218230,211998,1200.016749675,1200.415890612
c043,2,2,3,137433,138445,133985,1800.0169662570001,1800.581497486
c043,2,2,4,92217,93245,90867,2400.017684648,2400.84249137
c043,2,2,5,86799,87660,85350,3000.0219148019996,3001.051497294
c043,2,2,6,69142,69892,68288,3600.0319488839996,3601.323497215
c043,2,2,7,56610,57289,56007,4200.042534286999,4201.648060723
c043,2,2,8,51677,52380,50971,4800.0525609,4801.842227591
c043,2,2,9,42782,43668,42489,5400.084067774,5402.097294948
c043,2,2,10,37174,37799,36767,6000.087394395,6002.340577686
c043,2,2,11,34367,34943,33983,6600.088660051,6602.590142517
# search time: 6600.089s
# total time: 19816.114s
c043,3,2,1,1065581,1065583,994009,600.002420391,600.190027529
c043,3,2,2,246294,247276,240105,1200.003082708,1200.318522579
c043,3,2,3,159300,160375,155856,1800.005697677,1800.445396293
c043,3,2,4,103595,104537,101474,2400.006483828,2400.648321977
c043,3,2,5,97426,98283,95632,3000.015930375,3000.786442924
c043,3,2,6,75368,76144,74334,3600.02101561,3600.968420493
c043,3,2,7,56005,56736,55517,4200.0235151140005,4201.160736367
c043,3,2,8,51205,51888,50308,4800.024862994001,4801.317237131
c043,3,2,9,42276,42976,41773,5400.0293961980005,5401.478212299
c043,3,2,10,37052,37806,36802,6000.065945992001,6001.69121273
c043,3,2,11,34094,34780,33765,6600.079903663001,6601.830064946
# search time: 6600.080s
# total time: 26418.217s
c043,4,2,1,1132559,1132561,1050274,600.000089282,600.192185013
c043,4,2,2,242300,244146,236664,1200.000550496,1200.311699501
c043,4,2,3,157110,158149,153292,1800.0029398329998,1800.425564848
c043,4,2,4,105903,106940,104462,2400.003471557,2400.588030481
c043,4,2,5,97180,98253,95348,3000.003596202,3000.709098686
c043,4,2,6,76063,76849,74820,3600.0061955680003,3600.870159809
c043,4,2,7,55355,56142,54890,4200.013563418001,4201.059273329
c043,4,2,8,50606,51305,49782,4800.015785347001,4801.181641116
c043,4,2,9,42207,43045,41813,5400.019589236001,5401.300759944
c043,4,2,10,36871,37520,36469,6000.026122729001,6001.444500882
c043,4,2,11,34029,34661,33716,6600.046047347001,6601.671547838
# search time: 6600.046s
# total time: 33020.172s
