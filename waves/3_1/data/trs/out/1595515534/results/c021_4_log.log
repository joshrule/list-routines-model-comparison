    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.29s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c021_4.json out/1595515534/results/c021_4_best.csv out/1595515534/results/c021_4_predictions.csv out/1595515534/results/c021_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 4]), o: IntList([7, 8, 4]) }
#   Datum { i: IntList([9, 2, 1, 9, 3, 3, 1, 8, 9, 2]), o: IntList([9, 8, 2, 1, 9, 3, 3, 1, 8, 9, 2]) }
#   Datum { i: IntList([2, 9, 1, 7, 4, 6, 0]), o: IntList([2, 8, 9, 1, 7, 4, 6, 0]) }
#   Datum { i: IntList([5, 5, 5, 5, 5, 5, 5, 5]), o: IntList([5, 8, 5, 5, 5, 5, 5, 5, 5]) }
#   Datum { i: IntList([0, 2, 3]), o: IntList([0, 8, 2, 3]) }
#   Datum { i: IntList([4, 9, 5, 1, 7, 3]), o: IntList([4, 8, 9, 5, 1, 7, 3]) }
#   Datum { i: IntList([1, 6, 9, 3]), o: IntList([1, 8, 6, 9, 3]) }
#   Datum { i: IntList([7, 9, 1, 2, 6, 3, 0, 4, 7, 5]), o: IntList([7, 8, 9, 1, 2, 6, 3, 0, 4, 7, 5]) }
#   Datum { i: IntList([0, 8, 6, 4, 0]), o: IntList([0, 8, 8, 6, 4, 0]) }
#   Datum { i: IntList([6, 6, 0, 5, 2, 6, 0, 3, 2]), o: IntList([6, 8, 6, 0, 5, 2, 6, 0, 3, 2]) }
#   Datum { i: IntList([1, 8, 1, 1, 6, 2, 1, 4, 4, 3]), o: IntList([1, 8, 8, 1, 1, 6, 2, 1, 4, 4, 3]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c021,0,4,1,1070644,1070646,987747,600.002973474,602.242276882
c021,0,4,2,313522,315577,306706,1200.003406603,1202.777587695
c021,0,4,3,115579,116766,112009,1800.004889007,1803.064667849
c021,0,4,4,62144,63224,61156,2400.008916777,2403.479988239
c021,0,4,5,49355,50098,48620,3000.01080147,3003.922639914
c021,0,4,6,45581,46343,45009,3600.027255442,3604.368227308
c021,0,4,7,39305,40051,39026,4200.032134465,4204.86318321
c021,0,4,8,36514,37297,36214,4800.035674638,4805.351157855
c021,0,4,9,30719,31476,30463,5400.038117258,5405.771044077
c021,0,4,10,27820,28513,27501,6000.040189401,6006.11858027
c021,0,4,11,22060,22783,22022,6600.0433215660005,6606.491705553
# search time: 6600.043s
# total time: 6606.698s
c021,1,4,1,978005,978007,912792,600.000179884,600.311282524
c021,1,4,2,280048,281963,274074,1200.001582684,1200.538223125
c021,1,4,3,92362,93288,89771,1800.005211179,1800.66747508
c021,1,4,4,59188,60176,58430,2400.0151388920003,2401.040079931
c021,1,4,5,42007,42810,41341,3000.0214677880003,3001.260821494
c021,1,4,6,43558,44464,43056,3600.041177888,3601.621504978
c021,1,4,7,36292,37093,35944,4200.063563226,4201.905569497
c021,1,4,8,36278,37067,35999,4800.088523326,4802.195198547
c021,1,4,9,31538,32278,31115,5400.100437978999,5402.415017424
c021,1,4,10,28317,29090,28066,6000.109869224999,6002.674102342
c021,1,4,11,23994,24695,23831,6600.1141861629985,6602.934946262
# search time: 6600.114s
# total time: 13209.893s
c021,2,4,1,986414,986416,918568,600.000503835,600.25444569
c021,2,4,2,301758,303612,295121,1200.001895454,1200.460840968
c021,2,4,3,117497,118556,114338,1800.0034109480002,1800.558817663
c021,2,4,4,62213,63176,61189,2400.010072634,2400.694877831
c021,2,4,5,49209,50069,48671,3000.0169342030003,3000.884320117
c021,2,4,6,47483,48267,46658,3600.0316915030003,3601.100288919
c021,2,4,7,41260,41926,40729,4200.033246797,4201.255197863
c021,2,4,8,38077,38835,37783,4800.0456207550005,4801.438875756
c021,2,4,9,33375,34056,33001,5400.048309058,5401.581295892
c021,2,4,10,31473,32203,31168,6000.062306051,6001.727165364
c021,2,4,11,25881,26586,25798,6600.097704719,6601.926642885
# search time: 6600.098s
# total time: 19812.078s
c021,3,4,1,1094812,1094814,1005919,600.000097045,600.222859585
c021,3,4,2,349003,351111,341131,1200.000182958,1200.38016834
c021,3,4,3,130718,131868,126837,1800.0009136940002,1800.466247275
c021,3,4,4,69586,70614,68579,2400.0069739050005,2400.558708626
c021,3,4,5,55467,56395,54728,3000.0134260530003,3000.711667785
c021,3,4,6,51759,52584,51002,3600.0179370600003,3600.840371347
c021,3,4,7,45622,46361,45098,4200.021268417,4200.984639477
c021,3,4,8,42546,43317,42162,4800.023552362,4801.105680425
c021,3,4,9,36972,37785,36461,5400.027322972001,5401.206481984
c021,3,4,10,33100,33810,32698,6000.042370579001,6001.336044974
c021,3,4,11,27477,28206,27290,6600.063031998001,6601.446089884
# search time: 6600.063s
# total time: 26413.886s
c021,4,4,1,1209279,1209281,1107497,600.000295914,600.222121758
c021,4,4,2,353864,356146,346324,1200.001289509,1200.358542566
c021,4,4,3,135124,136365,131699,1800.0065039739998,1800.441654587
c021,4,4,4,73469,74597,72314,2400.0149447969998,2400.544541344
c021,4,4,5,58435,59311,57446,3000.040785805,3000.674197146
c021,4,4,6,54796,55587,54009,3600.0411650039996,3600.771445991
c021,4,4,7,46573,47402,46005,4200.184460334,4201.023697546
c021,4,4,8,42573,43341,42077,4800.208072398999,4801.166412589
c021,4,4,9,35675,36376,35120,5400.208426875999,5401.235057029
c021,4,4,10,32663,33407,32229,6000.2220997389995,6001.34310784
c021,4,4,11,27104,27822,26898,6600.234582257999,6601.460487075
# search time: 6600.235s
# total time: 33015.650s
