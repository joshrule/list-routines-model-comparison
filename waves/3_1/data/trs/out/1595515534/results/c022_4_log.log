    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.32s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c022_4.json out/1595515534/results/c022_4_best.csv out/1595515534/results/c022_4_predictions.csv out/1595515534/results/c022_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([8, 4, 4, 4, 8, 4]), o: IntList([8, 5, 4, 4, 4, 8, 4]) }
#   Datum { i: IntList([7, 6, 1, 9, 6, 8, 3, 6]), o: IntList([7, 5, 6, 1, 9, 6, 8, 3, 6]) }
#   Datum { i: IntList([1, 7, 3, 0, 1, 2, 1, 3, 0, 3]), o: IntList([1, 5, 7, 3, 0, 1, 2, 1, 3, 0, 3]) }
#   Datum { i: IntList([6, 4, 9, 5, 2, 7, 8, 2, 4]), o: IntList([6, 5, 4, 9, 5, 2, 7, 8, 2, 4]) }
#   Datum { i: IntList([1, 9, 0, 9, 1]), o: IntList([1, 5, 9, 0, 9, 1]) }
#   Datum { i: IntList([0, 2, 6]), o: IntList([0, 5, 2, 6]) }
#   Datum { i: IntList([6, 5, 3, 3]), o: IntList([6, 5, 5, 3, 3]) }
#   Datum { i: IntList([9, 8, 6, 1, 5, 1, 4, 4, 3, 2]), o: IntList([9, 5, 8, 6, 1, 5, 1, 4, 4, 3, 2]) }
#   Datum { i: IntList([6, 0, 2, 0, 4, 8, 1, 7, 5, 3]), o: IntList([6, 5, 0, 2, 0, 4, 8, 1, 7, 5, 3]) }
#   Datum { i: IntList([1, 1]), o: IntList([1, 5, 1]) }
#   Datum { i: IntList([7, 4, 3, 1, 2, 1, 8]), o: IntList([7, 5, 4, 3, 1, 2, 1, 8]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c022,0,4,1,953309,953311,876765,600.00105553,602.188350633
c022,0,4,2,173813,176143,171698,1200.00269463,1202.817588629
c022,0,4,3,92309,93281,89643,1800.005359363,1803.181096947
c022,0,4,4,62860,63882,61106,2400.006014103,2403.532181378
c022,0,4,5,39368,40149,38898,3000.0267682659996,3003.941231681
c022,0,4,6,34573,35307,34182,3600.0373928239997,3604.328136786
c022,0,4,7,34820,35608,34600,4200.053787551999,4204.979774696
c022,0,4,8,32667,33362,32279,4800.071537360999,4805.593956839
c022,0,4,9,26688,27418,26662,5400.072629963999,5406.155668127
c022,0,4,10,19606,20254,19608,6000.176709603999,6006.665450676
c022,0,4,11,20622,21197,20533,6600.179871578,6607.276523335
# search time: 6600.180s
# total time: 6607.457s
c022,1,4,1,912768,912770,835724,600.001078986,600.324001169
c022,1,4,2,168315,170472,166086,1200.001256811,1200.624645098
c022,1,4,3,90211,91155,87852,1800.00296774,1800.803866871
c022,1,4,4,60936,61902,59003,2400.014756891,2401.001187207
c022,1,4,5,39553,40409,39052,3000.0149920500003,3001.216557331
c022,1,4,6,36488,37140,35637,3600.022881926,3601.436053344
c022,1,4,7,34323,35135,34082,4200.03002213,4201.683559377
c022,1,4,8,32720,33422,32415,4800.058172606,4802.015237944
c022,1,4,9,26584,27255,26454,5400.076375907,5402.291296058
c022,1,4,10,19138,19924,19301,6000.129625056,6002.578230015
c022,1,4,11,21100,21693,21049,6600.162022491,6602.95764416
# search time: 6600.162s
# total time: 13210.645s
c022,2,4,1,898536,898538,832974,600.001926675,600.240917858
c022,2,4,2,168848,170143,165502,1200.003378501,1200.424022863
c022,2,4,3,88337,89395,85955,1800.004333682,1800.525730197
c022,2,4,4,61132,62050,59620,2400.005409362,2400.64986424
c022,2,4,5,38308,39177,37890,3000.023655117,3000.807116265
c022,2,4,6,35595,36315,35091,3600.030113779,3600.938788251
c022,2,4,7,36021,36740,35627,4200.030766954,4201.151937701
c022,2,4,8,33940,34671,33600,4800.100352965,4801.378709421
c022,2,4,9,27135,27958,27183,5400.103415289,5401.584942714
c022,2,4,10,20921,21562,20869,6000.106623365999,6001.736212175
c022,2,4,11,22021,22757,22055,6600.115668629999,6602.046470459
# search time: 6600.116s
# total time: 19812.969s
c022,3,4,1,962093,962095,887553,600.000184664,600.20861681
c022,3,4,2,178460,180490,175882,1200.001966964,1200.365831503
c022,3,4,3,94194,95144,90883,1800.012654239,1800.470860937
c022,3,4,4,65155,66024,62863,2400.017859064,2400.571100607
c022,3,4,5,41034,41969,40636,3000.027228437,3000.688292394
c022,3,4,6,36584,37383,36068,3600.0449523019997,3600.79582879
c022,3,4,7,40503,41179,39920,4200.051718179,4200.977834398
c022,3,4,8,37473,38143,36999,4800.0601115320005,4801.097014228
c022,3,4,9,30851,31611,30702,5400.074487383001,5401.265339833
c022,3,4,10,22028,22757,22153,6000.127903685001,6001.424049072
c022,3,4,11,23932,24541,23831,6600.131795495001,6601.561292062
# search time: 6600.132s
# total time: 26414.724s
c022,4,4,1,1067217,1067219,994990,600.000085962,600.199101854
c022,4,4,2,193846,195871,190637,1200.000892251,1200.376386559
c022,4,4,3,108084,109062,104884,1800.0050781250002,1800.46276831
c022,4,4,4,76728,77595,75069,2400.014275796,2400.556672352
c022,4,4,5,47006,47866,46434,3000.0224945160003,3000.687844706
c022,4,4,6,41491,42159,40838,3600.032735905,3600.769758664
c022,4,4,7,42584,43091,41741,4200.035807611001,4200.878816411
c022,4,4,8,38571,39376,38185,4800.055407389001,4801.006553876
c022,4,4,9,31478,32119,31179,5400.064404368,5401.194021048
c022,4,4,10,22989,23650,23009,6000.07143434,6001.277466309
c022,4,4,11,24592,25198,24457,6600.074779075,6601.412087265
# search time: 6600.075s
# total time: 33016.499s
