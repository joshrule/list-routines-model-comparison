    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.24s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c022_2.json out/1595515534/results/c022_2_best.csv out/1595515534/results/c022_2_predictions.csv out/1595515534/results/c022_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 9, 0, 9, 1]), o: IntList([1, 5, 9, 0, 9, 1]) }
#   Datum { i: IntList([6, 4, 9, 5, 2, 7, 8, 2, 4]), o: IntList([6, 5, 4, 9, 5, 2, 7, 8, 2, 4]) }
#   Datum { i: IntList([6, 5, 3, 3]), o: IntList([6, 5, 5, 3, 3]) }
#   Datum { i: IntList([6, 0, 2, 0, 4, 8, 1, 7, 5, 3]), o: IntList([6, 5, 0, 2, 0, 4, 8, 1, 7, 5, 3]) }
#   Datum { i: IntList([7, 4, 3, 1, 2, 1, 8]), o: IntList([7, 5, 4, 3, 1, 2, 1, 8]) }
#   Datum { i: IntList([8, 4, 4, 4, 8, 4]), o: IntList([8, 5, 4, 4, 4, 8, 4]) }
#   Datum { i: IntList([1, 7, 3, 0, 1, 2, 1, 3, 0, 3]), o: IntList([1, 5, 7, 3, 0, 1, 2, 1, 3, 0, 3]) }
#   Datum { i: IntList([9, 8, 6, 1, 5, 1, 4, 4, 3, 2]), o: IntList([9, 5, 8, 6, 1, 5, 1, 4, 4, 3, 2]) }
#   Datum { i: IntList([0, 2, 6]), o: IntList([0, 5, 2, 6]) }
#   Datum { i: IntList([7, 6, 1, 9, 6, 8, 3, 6]), o: IntList([7, 5, 6, 1, 9, 6, 8, 3, 6]) }
#   Datum { i: IntList([1, 1]), o: IntList([1, 5, 1]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c022,0,2,1,979005,979007,896332,600.004731163,602.299087716
c022,0,2,2,200983,203393,198107,1200.0065228839999,1202.972591013
c022,0,2,3,92736,93751,90895,1800.0074178149998,1803.434920496
c022,0,2,4,66186,66992,64698,2400.012162866,2403.897553033
c022,0,2,5,43314,44001,42932,3000.012193476,3004.516422218
c022,0,2,6,37691,38389,37153,3600.023732025,3605.155498341
c022,0,2,7,33423,34131,33171,4200.025426061,4205.7107749
c022,0,2,8,27728,28434,27611,4800.028177779,4806.41899257
c022,0,2,9,21726,22432,21734,5400.0586348219995,5406.823070874
c022,0,2,10,22282,22992,22237,6000.089488064999,6007.492561333
c022,0,2,11,17765,18444,17945,6600.110681669999,6607.856053544
# search time: 6600.111s
# total time: 6608.055s
c022,1,2,1,956043,956045,892783,600.001536178,600.346254191
c022,1,2,2,203697,205553,200051,1200.0069913070001,1200.627553465
c022,1,2,3,97081,97774,94560,1800.0079195940002,1800.823065347
c022,1,2,4,66531,67370,65576,2400.008759628,2401.035450748
c022,1,2,5,44821,45637,44377,3000.0102576950003,3001.308582458
c022,1,2,6,38475,39253,38201,3600.0214030360003,3601.611550509
c022,1,2,7,33433,34180,33160,4200.0407086000005,4201.929690187
c022,1,2,8,27336,28105,27295,4800.045295877,4802.221853773
c022,1,2,9,20592,21257,20641,5400.060758658,5402.570199425
c022,1,2,10,21604,22320,21662,6000.083194680999,6002.899541803
c022,1,2,11,17162,17832,17296,6600.1042310249995,6603.180752703
# search time: 6600.104s
# total time: 13211.519s
c022,2,2,1,979823,979825,896880,600.011302595,600.248819424
c022,2,2,2,200730,203016,197551,1200.013031331,1200.414962893
c022,2,2,3,89880,90830,88228,1800.014029739,1800.539238772
c022,2,2,4,65353,66158,64276,2400.024315416,2400.7125501
c022,2,2,5,43179,43919,42865,3000.0310415669996,3000.917370114
c022,2,2,6,38495,39132,38157,3600.0494354439998,3601.143090367
c022,2,2,7,37552,38240,37189,4200.062531555,4201.369873316
c022,2,2,8,31652,32373,31428,4800.065478691,4801.630469795
c022,2,2,9,25557,26293,25389,5400.073812939,5401.773496897
c022,2,2,10,25038,25730,24814,6000.076159976,6002.013693543
c022,2,2,11,19969,20667,20059,6600.0931964989995,6602.134172289
# search time: 6600.093s
# total time: 19813.938s
c022,3,2,1,1060077,1060079,986361,600.002657609,600.198930865
c022,3,2,2,227115,229156,223111,1200.005784103,1200.341112412
c022,3,2,3,104356,105343,102176,1800.0102453109998,1800.464678651
c022,3,2,4,74469,75253,72933,2400.0175366989997,2400.585262992
c022,3,2,5,48162,49048,47632,3000.025961556,3000.751844944
c022,3,2,6,42297,43073,41904,3600.035396076,3600.890473626
c022,3,2,7,37926,38745,37541,4200.046391659,4201.04231948
c022,3,2,8,31161,31950,30977,4800.070682351,4801.21623094
c022,3,2,9,24379,25066,24337,5400.103473211,5401.328872851
c022,3,2,10,24871,25538,24777,6000.122142332,6001.518581079
c022,3,2,11,20337,20991,20364,6600.140920438001,6601.652453521
# search time: 6600.141s
# total time: 26415.983s
c022,4,2,1,1072210,1072212,996198,600.000120919,600.17697579
c022,4,2,2,226169,228277,222344,1200.000944059,1200.300004462
c022,4,2,3,105383,106445,103330,1800.005319276,1800.395513416
c022,4,2,4,75519,76331,73987,2400.016491907,2400.511945724
c022,4,2,5,49586,50339,48830,3000.0372050359997,3000.653111566
c022,4,2,6,43160,43888,42671,3600.045026973,3600.786136842
c022,4,2,7,38053,38850,37777,4200.048044329,4200.904250415
c022,4,2,8,31458,32233,31230,4800.054589924,4801.133192572
c022,4,2,9,24468,25181,24463,5400.069309668999,5401.215643026
c022,4,2,10,25518,26225,25360,6000.103507747,6001.383284325
c022,4,2,11,20386,21116,20490,6600.10633164,6601.470011017
# search time: 6600.106s
# total time: 33017.742s
