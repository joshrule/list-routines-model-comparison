    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.30s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c021_5.json out/1595515534/results/c021_5_best.csv out/1595515534/results/c021_5_predictions.csv out/1595515534/results/c021_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([4, 9, 5, 1, 7, 3]), o: IntList([4, 8, 9, 5, 1, 7, 3]) }
#   Datum { i: IntList([5, 5, 5, 5, 5, 5, 5, 5]), o: IntList([5, 8, 5, 5, 5, 5, 5, 5, 5]) }
#   Datum { i: IntList([0, 8, 6, 4, 0]), o: IntList([0, 8, 8, 6, 4, 0]) }
#   Datum { i: IntList([1, 8, 1, 1, 6, 2, 1, 4, 4, 3]), o: IntList([1, 8, 8, 1, 1, 6, 2, 1, 4, 4, 3]) }
#   Datum { i: IntList([1, 6, 9, 3]), o: IntList([1, 8, 6, 9, 3]) }
#   Datum { i: IntList([7, 9, 1, 2, 6, 3, 0, 4, 7, 5]), o: IntList([7, 8, 9, 1, 2, 6, 3, 0, 4, 7, 5]) }
#   Datum { i: IntList([6, 6, 0, 5, 2, 6, 0, 3, 2]), o: IntList([6, 8, 6, 0, 5, 2, 6, 0, 3, 2]) }
#   Datum { i: IntList([9, 2, 1, 9, 3, 3, 1, 8, 9, 2]), o: IntList([9, 8, 2, 1, 9, 3, 3, 1, 8, 9, 2]) }
#   Datum { i: IntList([2, 9, 1, 7, 4, 6, 0]), o: IntList([2, 8, 9, 1, 7, 4, 6, 0]) }
#   Datum { i: IntList([0, 2, 3]), o: IntList([0, 8, 2, 3]) }
#   Datum { i: IntList([7, 4]), o: IntList([7, 8, 4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c021,0,5,1,938599,938601,873057,600.000879013,602.272281281
c021,0,5,2,165733,167811,163633,1200.002528709,1203.015696437
c021,0,5,3,90590,91409,88693,1800.008474713,1803.483378832
c021,0,5,4,59938,60692,59041,2400.022128914,2404.079481071
c021,0,5,5,49745,50471,48904,3000.029189859,3004.45879636
c021,0,5,6,45538,46319,45073,3600.031637066,3604.97965566
c021,0,5,7,35984,36686,35538,4200.040659804999,4205.483245334
c021,0,5,8,30026,30734,29753,4800.069116766,4806.115189927
c021,0,5,9,24780,25604,24816,5400.071427197,5406.862048347
c021,0,5,10,20027,20737,20133,6000.073296853,6007.251219079
c021,0,5,11,19253,20011,19396,6600.07625321,6607.597390828
# search time: 6600.076s
# total time: 6607.804s
c021,1,5,1,973396,973398,892733,600.000391761,600.3510255
c021,1,5,2,170256,172137,167938,1200.001682134,1200.686741467
c021,1,5,3,92592,93559,90804,1800.008252733,1800.899747025
c021,1,5,4,61060,61805,60116,2400.018013701,2401.164091762
c021,1,5,5,47189,47952,46511,3000.024773483,3001.385832536
c021,1,5,6,43324,44089,42913,3600.05719608,3601.628908442
c021,1,5,7,34904,35647,34710,4200.066734749,4201.936621437
c021,1,5,8,28568,29274,28518,4800.083674605,4802.312894122
c021,1,5,9,23408,24121,23480,5400.0887713619995,5402.732125984
c021,1,5,10,19957,20595,19918,6000.097119446999,6003.000451196
c021,1,5,11,18851,19401,18775,6600.0976174239995,6603.164013626
# search time: 6600.098s
# total time: 13211.278s
c021,2,5,1,931950,931952,852584,600.00050233,600.240908839
c021,2,5,2,160694,162630,158622,1200.002701178,1200.443144772
c021,2,5,3,85491,86383,84075,1800.010887266,1800.589495694
c021,2,5,4,58167,58752,57195,2400.018801099,2400.814852125
c021,2,5,5,47022,47779,46339,3000.021430562,3000.927765669
c021,2,5,6,45049,45764,44276,3600.043486899,3601.135879519
c021,2,5,7,36162,36896,35820,4200.059376984,4201.353949625
c021,2,5,8,29883,30690,29841,4800.081455791999,4801.582906204
c021,2,5,9,25274,26042,25365,5400.0842677129995,5401.813431034
c021,2,5,10,21241,21981,21328,6000.095127916,6001.975712967
c021,2,5,11,20194,20971,20300,6600.1237064,6602.136789495
# search time: 6600.124s
# total time: 19813.675s
c021,3,5,1,1046112,1046114,967039,600.000268658,600.203325813
c021,3,5,2,186397,187066,182584,1200.001560154,1200.348247614
c021,3,5,3,99965,100766,97848,1800.002833168,1800.469311986
c021,3,5,4,64952,65835,64284,2400.00364756,2400.605529838
c021,3,5,5,53794,54596,52910,3000.00782968,3000.742513464
c021,3,5,6,49055,49816,48292,3600.027683831,3600.954396212
c021,3,5,7,38290,39036,37879,4200.035089825,4201.138003458
c021,3,5,8,32383,33160,32216,4800.0379143029995,4801.269522212
c021,3,5,9,27020,27738,26998,5400.047939261,5401.479595607
c021,3,5,10,21576,22292,21626,6000.052516141999,6001.576594281
c021,3,5,11,20871,21500,20865,6600.067586347999,6601.717328787
# search time: 6600.068s
# total time: 26415.685s
c021,4,5,1,1009030,1009032,930446,600.000928865,600.255882116
c021,4,5,2,183963,186212,181508,1200.0021043460001,1200.388084519
c021,4,5,3,99773,100668,97777,1800.007727802,1800.490101944
c021,4,5,4,65153,65881,64021,2400.01737375,2400.609017938
c021,4,5,5,51706,52553,51092,3000.026466645,3000.715995512
c021,4,5,6,48696,49318,47949,3600.0267017849997,3600.825098871
c021,4,5,7,39024,39640,38398,4200.02831092,4200.926301549
c021,4,5,8,32336,33084,32077,4800.039432537,4801.053779534
c021,4,5,9,26307,27069,26319,5400.041422146,5401.16489438
c021,4,5,10,21345,22054,21338,6000.058250921,6001.295816904
c021,4,5,11,20048,20690,20156,6600.074757005999,6601.387568157
# search time: 6600.075s
# total time: 33017.378s
