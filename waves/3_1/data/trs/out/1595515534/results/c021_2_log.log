    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.23s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c021_2.json out/1595515534/results/c021_2_best.csv out/1595515534/results/c021_2_predictions.csv out/1595515534/results/c021_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([0, 8, 6, 4, 0]), o: IntList([0, 8, 8, 6, 4, 0]) }
#   Datum { i: IntList([7, 4]), o: IntList([7, 8, 4]) }
#   Datum { i: IntList([6, 6, 0, 5, 2, 6, 0, 3, 2]), o: IntList([6, 8, 6, 0, 5, 2, 6, 0, 3, 2]) }
#   Datum { i: IntList([9, 2, 1, 9, 3, 3, 1, 8, 9, 2]), o: IntList([9, 8, 2, 1, 9, 3, 3, 1, 8, 9, 2]) }
#   Datum { i: IntList([4, 9, 5, 1, 7, 3]), o: IntList([4, 8, 9, 5, 1, 7, 3]) }
#   Datum { i: IntList([5, 5, 5, 5, 5, 5, 5, 5]), o: IntList([5, 8, 5, 5, 5, 5, 5, 5, 5]) }
#   Datum { i: IntList([7, 9, 1, 2, 6, 3, 0, 4, 7, 5]), o: IntList([7, 8, 9, 1, 2, 6, 3, 0, 4, 7, 5]) }
#   Datum { i: IntList([1, 6, 9, 3]), o: IntList([1, 8, 6, 9, 3]) }
#   Datum { i: IntList([1, 8, 1, 1, 6, 2, 1, 4, 4, 3]), o: IntList([1, 8, 8, 1, 1, 6, 2, 1, 4, 4, 3]) }
#   Datum { i: IntList([2, 9, 1, 7, 4, 6, 0]), o: IntList([2, 8, 9, 1, 7, 4, 6, 0]) }
#   Datum { i: IntList([0, 2, 3]), o: IntList([0, 8, 2, 3]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c021,0,2,1,930299,930301,868791,600.006619974,602.35154488
c021,0,2,2,214204,216058,210009,1200.007305858,1202.963310753
c021,0,2,3,161431,162572,155465,1800.015948246,1803.360718677
c021,0,2,4,97925,99044,94675,2400.0232781570003,2403.675162477
c021,0,2,5,64546,65690,62733,3000.026417201,3003.956551313
c021,0,2,6,54656,55588,53344,3600.032007782,3604.194937795
c021,0,2,7,36655,37539,36525,4200.05798745,4204.766832394
c021,0,2,8,32801,33519,32417,4800.064292386,4805.198609762
c021,0,2,9,29076,29876,28879,5400.071659441,5405.680663519
c021,0,2,10,23894,24723,23859,6000.10263666,6006.233398957
c021,0,2,11,21808,22637,21954,6600.1173217529995,6606.767424302
# search time: 6600.117s
# total time: 6606.913s
c021,1,2,1,930441,930443,859926,600.000135508,600.317311616
c021,1,2,2,207141,208876,203208,1200.000757721,1200.574089249
c021,1,2,3,161526,162535,156529,1800.00303867,1800.73306797
c021,1,2,4,97920,98961,95312,2400.005885812,2400.874895588
c021,1,2,5,66914,67867,65078,3000.0071374560002,3000.994016511
c021,1,2,6,56254,57028,54638,3600.0095130470004,3601.115969237
c021,1,2,7,35739,36618,35448,4200.030592636001,4201.373011606
c021,1,2,8,32420,33235,31986,4800.034377583001,4801.584927779
c021,1,2,9,28788,29546,28538,5400.03754841,5401.860044878
c021,1,2,10,23921,24599,23794,6000.056835422,6002.136103342
c021,1,2,11,21641,22409,21695,6600.069668482,6602.351038887
# search time: 6600.070s
# total time: 13209.490s
c021,2,2,1,956892,956894,874231,600.000372013,600.226597825
c021,2,2,2,203274,205222,199660,1200.003978404,1200.395855623
c021,2,2,3,162707,163755,158090,1800.005475509,1800.52058609
c021,2,2,4,97604,98636,94732,2400.0075609699998,2400.619434551
c021,2,2,5,65353,66413,63720,3000.022382141,3000.719991258
c021,2,2,6,56392,57228,54612,3600.02246157,3600.792020571
c021,2,2,7,40396,41170,39969,4200.025366449,4200.967500554
c021,2,2,8,37957,38761,37328,4800.033518859,4801.115118345
c021,2,2,9,33450,34153,32995,5400.047970373,5401.290898536
c021,2,2,10,26999,27689,26853,6000.061524758999,6001.524725425
c021,2,2,11,24693,25407,24588,6600.072429970999,6601.668380009
# search time: 6600.072s
# total time: 19811.416s
c021,3,2,1,1076142,1076144,1005328,600.000380503,600.193649044
c021,3,2,2,225974,227981,222087,1200.008296066,1200.33732593
c021,3,2,3,182407,183512,176611,1800.011650752,1800.430128542
c021,3,2,4,109900,111070,107011,2400.012925955,2400.517381501
c021,3,2,5,74505,75367,72127,3000.01538754,3000.601161338
c021,3,2,6,61872,62785,59898,3600.045639174,3600.697784745
c021,3,2,7,40065,40877,39665,4200.05141785,4200.852055316
c021,3,2,8,37055,37692,36427,4800.057925947,4800.981979428
c021,3,2,9,32697,33500,32394,5400.0761340789995,5401.135954327
c021,3,2,10,27119,27988,27045,6000.080710998,6001.266755963
c021,3,2,11,25040,25782,24890,6600.086743981,6601.423970332
# search time: 6600.087s
# total time: 26413.131s
c021,4,2,1,1092040,1092042,996393,600.000172301,600.168494001
c021,4,2,2,234222,236387,230260,1200.0002509219999,1200.283446111
c021,4,2,3,185636,186775,179701,1800.0003354669998,1800.35498364
c021,4,2,4,112329,113441,109056,2400.003523809,2400.421639149
c021,4,2,5,75441,76349,73252,3000.007906631,3000.473390293
c021,4,2,6,63018,63788,60774,3600.008504206,3600.547291105
c021,4,2,7,39950,40725,39514,4200.031379074,4200.683487396
c021,4,2,8,37438,38153,36704,4800.059589702,4800.795068693
c021,4,2,9,32746,33474,32273,5400.062550902,5400.9095507
c021,4,2,10,27391,28100,27116,6000.067420403,6001.033927765
c021,4,2,11,24897,25668,24837,6600.070477365,6601.128229517
# search time: 6600.070s
# total time: 33014.555s
