    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.04s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c024_2.json out/1595515534/results/c024_2_best.csv out/1595515534/results/c024_2_predictions.csv out/1595515534/results/c024_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 6, 0, 7, 6]), o: IntList([7, 5, 6, 0, 7, 6]) }
#   Datum { i: IntList([9, 9, 4, 9, 6, 1]), o: IntList([9, 5, 9, 4, 9, 6, 1]) }
#   Datum { i: IntList([4, 3, 4, 3, 8, 4, 4, 3]), o: IntList([4, 8, 3, 4, 3, 8, 4, 4, 3]) }
#   Datum { i: IntList([9, 9, 2, 0, 0, 1, 2, 8, 4, 2]), o: IntList([9, 5, 9, 2, 0, 0, 1, 2, 8, 4, 2]) }
#   Datum { i: IntList([6, 0, 6, 5, 0, 5, 7]), o: IntList([6, 5, 0, 6, 5, 0, 5, 7]) }
#   Datum { i: IntList([0, 8, 3]), o: IntList([0, 8, 8, 3]) }
#   Datum { i: IntList([0, 9, 9, 2, 6, 0, 1, 4, 6]), o: IntList([0, 8, 9, 9, 2, 6, 0, 1, 4, 6]) }
#   Datum { i: IntList([3, 1, 6, 8, 2, 9, 4, 5, 0, 7]), o: IntList([3, 8, 1, 6, 8, 2, 9, 4, 5, 0, 7]) }
#   Datum { i: IntList([6, 7, 1, 3, 5, 6, 9, 0, 4, 3]), o: IntList([6, 5, 7, 1, 3, 5, 6, 9, 0, 4, 3]) }
#   Datum { i: IntList([5, 2]), o: IntList([5, 5, 2]) }
#   Datum { i: IntList([8, 7, 4, 1]), o: IntList([8, 5, 7, 4, 1]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c024,0,2,1,1096041,1096043,1006253,600.000506224,602.049461443
c024,0,2,2,227953,229906,223981,1200.001838771,1202.654018646
c024,0,2,3,126407,127449,123453,1800.003680095,1803.131954596
c024,0,2,4,79978,80682,79828,2400.004612246,2403.444488233
c024,0,2,5,46103,46860,46542,3000.011440021,3003.793677619
c024,0,2,6,35491,36263,36021,3600.021951121,3604.181380511
c024,0,2,7,29071,29769,29496,4200.042195292,4204.540297951
c024,0,2,8,25470,26177,25860,4800.0652399049995,4804.916688148
c024,0,2,9,20672,21408,21188,5400.085603152999,5405.297919812
c024,0,2,10,17149,17855,17717,6000.0983347989995,6005.671511939
c024,0,2,11,16400,17193,17052,6600.134521167,6606.086697817
# search time: 6600.135s
# total time: 6606.310s
c024,1,2,1,1072227,1072229,982673,600.000084535,600.299450742
c024,1,2,2,228094,230177,223785,1200.000191573,1200.541358485
c024,1,2,3,126588,127546,123563,1800.003298684,1800.733459801
c024,1,2,4,78249,79050,78217,2400.003762468,2400.876348826
c024,1,2,5,45338,46121,45844,3000.0048148739997,3001.051318695
c024,1,2,6,35071,35786,35501,3600.0193860159998,3601.236419535
c024,1,2,7,28116,28870,28576,4200.038567093,4201.421843113
c024,1,2,8,25244,25843,25556,4800.043141534,4801.578469972
c024,1,2,9,20329,20964,20753,5400.056853244,5401.781303645
c024,1,2,10,16930,17622,17491,6000.090201893,6001.974414466
c024,1,2,11,15725,16424,16295,6600.1263528810005,6602.214119309
# search time: 6600.126s
# total time: 13208.858s
c024,2,2,1,1069492,1069494,982795,600.001242083,600.224177538
c024,2,2,2,226404,228464,222556,1200.001780992,1200.401141079
c024,2,2,3,124846,125838,122152,1800.003677649,1800.530490632
c024,2,2,4,78101,78864,78050,2400.00802057,2400.644058621
c024,2,2,5,45402,46221,45955,3000.0081176410004,3000.769726926
c024,2,2,6,34975,35691,35432,3600.0220862220003,3600.89891188
c024,2,2,7,28866,29498,29211,4200.055390567,4201.083930431
c024,2,2,8,25554,26201,25915,4800.092146800001,4801.220271951
c024,2,2,9,20072,20835,20528,5400.109228295,5401.360618165
c024,2,2,10,16601,17338,17220,6000.125849652,6001.582072581
c024,2,2,11,15972,16699,16564,6600.130911867001,6601.741270294
# search time: 6600.131s
# total time: 19811.013s
c024,3,2,1,1035637,1035639,965823,600.000928409,600.202444085
c024,3,2,2,223315,225288,219272,1200.0039178480001,1200.346446144
c024,3,2,3,125136,126210,122210,1800.0109675910003,1800.4593749
c024,3,2,4,77542,78327,77510,2400.018939116,2400.544438116
c024,3,2,5,45011,45851,45545,3000.024191199,3000.638306256
c024,3,2,6,35416,36062,35777,3600.030940184,3600.746626193
c024,3,2,7,28050,28724,28450,4200.044328567,4200.861325747
c024,3,2,8,25059,25751,25470,4800.060838753,4800.943734151
c024,3,2,9,20302,21029,20815,5400.06879167,5401.077889251
c024,3,2,10,16943,17586,17449,6000.090676551,6001.192286575
c024,3,2,11,16361,17072,16940,6600.098755967,6601.263427678
# search time: 6600.099s
# total time: 26412.468s
c024,4,2,1,1067165,1067167,975123,600.000023895,600.180105161
c024,4,2,2,224309,226209,220237,1200.001050756,1200.296069214
c024,4,2,3,123110,124084,120483,1800.00182292,1800.382781229
c024,4,2,4,81368,82197,81340,2400.003997064,2400.446477797
c024,4,2,5,50994,51687,51360,3000.009866108,3000.531765703
c024,4,2,6,39575,40239,39969,3600.0209107690002,3600.624670304
c024,4,2,7,31066,31746,31417,4200.023819842,4200.702811655
c024,4,2,8,28436,29160,28820,4800.039622755,4800.785426003
c024,4,2,9,22855,23556,23335,5400.055289205,5400.911348005
c024,4,2,10,17487,18145,18027,6000.072685997,6001.051745314
c024,4,2,11,17373,18127,17990,6600.095049608,6601.155400968
# search time: 6600.095s
# total time: 33014.057s
