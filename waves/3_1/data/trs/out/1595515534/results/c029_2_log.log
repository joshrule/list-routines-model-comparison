    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.03s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c029_2.json out/1595515534/results/c029_2_best.csv out/1595515534/results/c029_2_predictions.csv out/1595515534/results/c029_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 6, 6]), o: IntList([6]) }
#   Datum { i: IntList([5, 2, 2, 2, 5, 2]), o: IntList([2, 2, 5, 2]) }
#   Datum { i: IntList([5, 9, 1, 3, 0, 0, 3]), o: IntList([1, 3, 0, 0, 3]) }
#   Datum { i: IntList([2, 3, 1, 6, 0, 9, 5, 7, 4, 8]), o: IntList([1, 6, 0, 9, 5, 7, 4, 8]) }
#   Datum { i: IntList([7, 4]), o: IntList([]) }
#   Datum { i: IntList([7, 0, 4, 1, 7]), o: IntList([4, 1, 7]) }
#   Datum { i: IntList([5, 1, 0, 0, 5, 8, 1, 8, 3, 0]), o: IntList([0, 0, 5, 8, 1, 8, 3, 0]) }
#   Datum { i: IntList([7, 5, 1, 9, 4, 4, 4, 8]), o: IntList([1, 9, 4, 4, 4, 8]) }
#   Datum { i: IntList([8, 1, 9, 9]), o: IntList([9, 9]) }
#   Datum { i: IntList([2, 2]), o: IntList([]) }
#   Datum { i: IntList([2, 7, 6, 2, 0, 6, 7, 6, 5]), o: IntList([6, 2, 0, 6, 7, 6, 5]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c029,0,2,1,1273082,1273084,1168045,600.000249743,601.94712881
c029,0,2,2,551738,553839,538697,1200.002338928,1202.475961427
c029,0,2,3,264243,265442,257814,1800.003830122,1802.806006512
c029,0,2,4,136599,137500,133257,2400.005602788,2403.141311726
c029,0,2,5,93183,94303,91464,3000.0105345740003,3003.419328621
c029,0,2,6,100639,101352,97543,3600.0105358170003,3603.74826282
c029,0,2,7,106958,107881,103192,4200.011826486,4204.069063971
c029,0,2,8,65146,66190,63523,4800.0174830060005,4804.446838808
c029,0,2,9,57941,58750,56398,5400.026511915001,5404.829551013
c029,0,2,10,53703,54611,52248,6000.035422103001,6005.210408185
c029,0,2,11,51732,52519,50217,6600.038956002001,6605.558842368
# search time: 6600.039s
# total time: 6605.807s
c029,1,2,1,1346854,1346856,1240568,600.000897111,600.30767488
c029,1,2,2,529917,532234,518219,1200.001975494,1200.540078945
c029,1,2,3,256976,258270,250921,1800.008946984,1800.709986075
c029,1,2,4,133593,134545,130504,2400.011339103,2400.896973981
c029,1,2,5,92691,93862,90963,3000.01907175,3001.016174897
c029,1,2,6,99684,100337,96338,3600.022232211,3601.16455623
c029,1,2,7,105315,106204,101656,4200.028159457,4201.356352835
c029,1,2,8,64607,65559,62901,4800.038186393,4801.548933731
c029,1,2,9,56328,57217,54827,5400.053790668,5401.734669042
c029,1,2,10,52868,53707,51385,6000.059632429,6001.947245189
c029,1,2,11,50250,50984,48787,6600.059737865,6602.140320684
# search time: 6600.060s
# total time: 13208.323s
c029,2,2,1,1162935,1162937,1087504,600.000114349,600.210724045
c029,2,2,2,546087,547441,531714,1200.000612116,1200.373237411
c029,2,2,3,260052,261101,253602,1800.001686565,1800.496904463
c029,2,2,4,133862,134736,130659,2400.002850102,2400.611446527
c029,2,2,5,93814,94836,91716,3000.0029047840003,3000.714640826
c029,2,2,6,98462,99278,95535,3600.0067196050004,3600.838219388
c029,2,2,7,105802,106721,102222,4200.016524394,4200.966154887
c029,2,2,8,64869,65858,63252,4800.021641691,4801.121373868
c029,2,2,9,56370,57162,54880,5400.0307357579995,5401.292189867
c029,2,2,10,52993,53873,51613,6000.03181746,6001.437919603
c029,2,2,11,50274,51030,48705,6600.03634473,6601.53124654
# search time: 6600.036s
# total time: 19810.233s
c029,3,2,1,1295395,1295397,1211828,600.000278682,600.210139164
c029,3,2,2,544082,546328,531090,1200.002177811,1200.350559172
c029,3,2,3,258265,259543,252198,1800.004824178,1800.451782222
c029,3,2,4,135362,136318,131942,2400.00806552,2400.5357158
c029,3,2,5,92888,94000,91030,3000.0153837899998,3000.622036379
c029,3,2,6,95279,95978,92308,3600.0156572919996,3600.707677992
c029,3,2,7,102988,103853,99434,4200.018772969999,4200.834391726
c029,3,2,8,64002,65003,62382,4800.020178004999,4800.921980989
c029,3,2,9,55640,56537,54215,5400.033783313999,5401.055085421
c029,3,2,10,52312,53153,50931,6000.037544759999,6001.152970724
c029,3,2,11,50036,50848,48546,6600.044305878999,6601.264907757
# search time: 6600.044s
# total time: 26411.859s
c029,4,2,1,1261075,1261077,1152467,600.000100754,600.180877275
c029,4,2,2,535484,537635,522651,1200.000125985,1200.303356493
c029,4,2,3,254722,255925,248728,1800.002845939,1800.39813116
c029,4,2,4,132616,133499,129279,2400.008549105,2400.490324909
c029,4,2,5,87818,88643,85818,3000.014937353,3000.569927067
c029,4,2,6,93947,94709,91147,3600.01631711,3600.669776973
c029,4,2,7,100901,101790,97461,4200.024292833,4200.753455854
c029,4,2,8,63058,63926,61324,4800.029859267,4800.861890061
c029,4,2,9,55080,55858,53593,5400.031898276,5400.944227277
c029,4,2,10,49100,49914,47929,6000.041625984,6001.046046249
c029,4,2,11,47857,48631,46500,6600.054555516001,6601.149473437
# search time: 6600.055s
# total time: 33013.372s
