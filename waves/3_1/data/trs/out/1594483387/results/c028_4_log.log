    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.65s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c028_4.json out/1594483387/results/c028_4_best.csv out/1594483387/results/c028_4_predictions.csv out/1594483387/results/c028_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 0, 7, 6, 9, 4]), o: IntList([3, 7, 6, 9, 4]) }
#   Datum { i: IntList([3, 2, 5, 8, 0, 9, 5]), o: IntList([3, 5, 8, 0, 9, 5]) }
#   Datum { i: IntList([5, 0, 6, 1, 2]), o: IntList([5, 6, 1, 2]) }
#   Datum { i: IntList([5, 2, 7, 9, 6, 4, 1, 0, 8, 3]), o: IntList([5, 7, 9, 6, 4, 1, 0, 8, 3]) }
#   Datum { i: IntList([2, 4, 0, 9, 5, 3, 6, 8, 1]), o: IntList([2, 4, 9, 5, 3, 6, 8, 1]) }
#   Datum { i: IntList([4, 2, 9, 1, 8, 7, 6]), o: IntList([4, 9, 1, 8, 7, 6]) }
#   Datum { i: IntList([1, 2, 0, 6]), o: IntList([1, 2, 6]) }
#   Datum { i: IntList([7, 8, 0, 1, 0, 3]), o: IntList([7, 8, 1, 0, 3]) }
#   Datum { i: IntList([3, 5, 0, 7, 9, 2, 8, 4]), o: IntList([3, 5, 7, 9, 2, 8, 4]) }
#   Datum { i: IntList([5, 7, 1, 9, 0, 6, 2, 8, 4, 7]), o: IntList([5, 7, 9, 0, 6, 2, 8, 4, 7]) }
#   Datum { i: IntList([3, 1, 4]), o: IntList([3, 4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c028,0,4,1,995449,995450,846285,600.000696169,602.053182205
c028,0,4,2,419592,419772,406911,1200.00471012,1203.263481522
c028,0,4,3,236389,236570,231104,1800.005535948,1804.226583556
c028,0,4,4,164430,164611,159309,2400.009424927,2405.212307733
c028,0,4,5,116701,116877,113080,3000.014526028,3006.149601813
c028,0,4,6,86810,86978,86289,3600.021673439,3606.973249887
c028,0,4,7,67163,67337,66837,4200.025317102,4207.932286256
c028,0,4,8,66034,66213,65019,4800.029523075001,4808.788896346
c028,0,4,9,56037,56215,55555,5400.032034481001,5409.683467408
c028,0,4,10,46425,46599,46228,6000.038770968001,6010.701747086
c028,0,4,11,36533,36710,36519,6600.044600800001,6611.620432743
# search time: 6600.045s
# total time: 6611.978s
c028,1,4,1,1037512,1037513,886829,600.002614987,600.316004404
c028,1,4,2,388055,388230,376347,1200.006756534,1200.844405775
c028,1,4,3,224887,225072,220158,1800.011124935,1801.289495225
c028,1,4,4,158801,158985,153999,2400.0134980880002,2401.750792053
c028,1,4,5,110819,110997,107160,3000.014127409,3002.194242376
c028,1,4,6,83161,83338,82638,3600.014451741,3602.548487545
c028,1,4,7,65942,66124,65577,4200.017093996999,4202.975761382
c028,1,4,8,63250,63438,62307,4800.018432305999,4803.309208062
c028,1,4,9,56830,57018,56269,5400.026636102999,5403.740420887
c028,1,4,10,45690,45874,45472,6000.036204922999,6004.127888628
c028,1,4,11,35298,35482,35292,6600.0507531369985,6604.57817214
# search time: 6600.051s
# total time: 13217.442s
c028,2,4,1,932351,932352,829761,600.000175405,600.285647113
c028,2,4,2,398767,398933,386513,1200.001165801,1200.630864333
c028,2,4,3,226093,226259,221076,1800.004153841,1800.954460617
c028,2,4,4,160095,160260,155239,2400.004270298,2401.269877544
c028,2,4,5,86656,86828,84001,3000.021079162,3001.66418119
c028,2,4,6,49976,50140,49715,3600.025165381,3601.959976544
c028,2,4,7,39858,40024,39683,4200.030766765,4202.32125133
c028,2,4,8,41542,41709,40961,4800.031508084,4802.473742228
c028,2,4,9,54204,54367,53715,5400.0354692,5402.745157746
c028,2,4,10,43589,43755,43420,6000.046950455,6003.09383395
c028,2,4,11,37954,38117,37828,6600.050424380001,6603.41305201
# search time: 6600.050s
# total time: 19821.343s
c028,3,4,1,863422,863423,759381,600.005898795,600.2234598
c028,3,4,2,403779,403956,391512,1200.007066747,1200.495475949
c028,3,4,3,227041,227217,222134,1800.013324472,1800.731050752
c028,3,4,4,160850,161024,155909,2400.015434112,2400.968165005
c028,3,4,5,109307,109483,105882,3000.017411419,3001.186895867
c028,3,4,6,82681,82853,82158,3600.018209384,3601.425544335
c028,3,4,7,65257,65437,64959,4200.027755475,4201.637526237
c028,3,4,8,63603,63782,62674,4800.029345578,4801.830681069
c028,3,4,9,53255,53433,52795,5400.039187477,5402.00519322
c028,3,4,10,45014,45189,44803,6000.043991949,6002.283074445
c028,3,4,11,34688,34863,34699,6600.07471569,6602.619839552
# search time: 6600.075s
# total time: 26424.475s
c028,4,4,1,957595,957596,870543,600.001207249,600.260668235
c028,4,4,2,407030,407193,394700,1200.003224538,1200.485248426
c028,4,4,3,225769,225941,221144,1800.005559486,1800.693581877
c028,4,4,4,158355,158525,153465,2400.008866319,2400.895998564
c028,4,4,5,112078,112245,108714,3000.012258679,3001.079763208
c028,4,4,6,82702,82871,82185,3600.015004073,3601.292280361
c028,4,4,7,64921,65093,64588,4200.016735396,4201.505219213
c028,4,4,8,63234,63402,62305,4800.025318106,4801.731042867
c028,4,4,9,54167,54333,53655,5400.0401440059995,5401.960162408
c028,4,4,10,45345,45516,45157,6000.060954717999,6002.136449853
c028,4,4,11,36046,36217,36014,6600.080110022,6602.426531168
# search time: 6600.080s
# total time: 33027.483s
