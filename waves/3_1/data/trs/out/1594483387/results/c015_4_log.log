    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.55s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c015_4.json out/1594483387/results/c015_4_best.csv out/1594483387/results/c015_4_predictions.csv out/1594483387/results/c015_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 5, 8, 3, 6, 2, 4, 8, 0]), o: IntList([8, 3, 6, 2, 4]) }
#   Datum { i: IntList([1, 4, 7, 7, 5, 1, 9, 5, 7]), o: IntList([7, 7, 5, 1]) }
#   Datum { i: IntList([1, 2, 9, 3, 1, 4, 0, 1, 2, 8]), o: IntList([9, 3]) }
#   Datum { i: IntList([6, 7, 0, 1, 3, 5, 9, 4, 2, 8]), o: IntList([4, 2]) }
#   Datum { i: IntList([1, 3, 9, 2, 0, 5, 7, 5, 7, 1]), o: IntList([9, 2, 0]) }
#   Datum { i: IntList([7, 8, 2, 1, 7, 8, 7, 7, 7, 7]), o: IntList([7, 7]) }
#   Datum { i: IntList([1, 1, 3, 2, 3, 4, 5, 6, 5, 1]), o: IntList([3]) }
#   Datum { i: IntList([5, 6, 2, 9, 8, 8, 9, 3, 1]), o: IntList([9, 3]) }
#   Datum { i: IntList([2, 4, 9, 0, 7, 6, 0, 9, 0, 4]), o: IntList([0, 7, 6]) }
#   Datum { i: IntList([4, 5, 6, 6, 4, 6, 9, 9]), o: IntList([6, 9]) }
#   Datum { i: IntList([3, 4, 5, 5, 4, 3, 3]), o: IntList([4, 3]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c015,0,4,1,946780,946781,844862,600.000019113,602.640565903
c015,0,4,2,372480,372654,361192,1200.0007548580002,1204.103359485
c015,0,4,3,225044,225211,223752,1800.000917278,1805.407175309
c015,0,4,4,151375,151541,150277,2400.001532374,2407.129287678
c015,0,4,5,135659,135835,135105,3000.004602936,3008.464191529
c015,0,4,6,95315,95483,95081,3600.010849984,3610.029546258
c015,0,4,7,84634,84801,84368,4200.022537044,4211.519955194
c015,0,4,8,66915,67091,66678,4800.030360671,4812.908342406
c015,0,4,9,53046,53220,52887,5400.032794686001,5414.593055298
c015,0,4,10,41752,41926,41573,6000.054317405001,6016.091386746
c015,0,4,11,38211,38389,38084,6600.0543399690005,6617.721207654
# search time: 6600.054s
# total time: 6618.034s
c015,1,4,1,918742,918743,805855,600.010834601,600.306476349
c015,1,4,2,371300,371476,359810,1200.0119459,1200.821317847
c015,1,4,3,224688,224867,223367,1800.0148713019998,1801.355120887
c015,1,4,4,150153,150336,149109,2400.019544746,2402.082327003
c015,1,4,5,130800,130978,130504,3000.021921036,3002.702056569
c015,1,4,6,97182,97358,96767,3600.027495337,3603.26344576
c015,1,4,7,78444,78617,78250,4200.035223797,4204.146650712
c015,1,4,8,66049,66221,65857,4800.047075487,4804.767555817
c015,1,4,9,52776,52949,52603,5400.052458251001,5405.705263291
c015,1,4,10,44247,44427,44079,6000.069836635001,6006.620502999
c015,1,4,11,38230,38409,38096,6600.094233205001,6607.399031322
# search time: 6600.094s
# total time: 13225.985s
c015,2,4,1,955289,955290,815485,600.000140223,600.203321603
c015,2,4,2,373538,373720,362069,1200.002156603,1200.560198511
c015,2,4,3,227947,228129,226642,1800.0021804409998,1800.903032676
c015,2,4,4,149544,149731,148507,2400.005707989,2401.399730653
c015,2,4,5,135273,135458,134698,3000.010551135,3001.716890143
c015,2,4,6,95297,95482,95064,3600.012318619,3602.124364346
c015,2,4,7,79065,79247,78899,4200.0135630059995,4202.618675444
c015,2,4,8,65705,65886,65467,4800.013668207999,4803.021542971
c015,2,4,9,52846,53030,52657,5400.015643084999,5403.519587783
c015,2,4,10,43566,43753,43379,6000.029776944999,6004.149991918
c015,2,4,11,36629,36816,36576,6600.036096757999,6604.780837414
# search time: 6600.036s
# total time: 19831.378s
c015,3,4,1,942874,942875,833274,600.008037437,600.240087683
c015,3,4,2,368285,368457,356825,1200.0090020779999,1200.507458397
c015,3,4,3,227714,227892,226364,1800.010167125,1800.770418748
c015,3,4,4,156040,156211,154959,2400.010875266,2401.107867181
c015,3,4,5,128879,129053,128673,3000.01159144,3001.469283867
c015,3,4,6,96386,96554,95987,3600.012729694,3601.793986146
c015,3,4,7,79620,79796,79441,4200.014913271,4202.198144525
c015,3,4,8,65557,65731,65338,4800.017184564001,4802.674847585
c015,3,4,9,51269,51439,51112,5400.041234032001,5403.085861988
c015,3,4,10,29778,29942,29726,6000.073276967001,6003.631023794
c015,3,4,11,22296,22464,22277,6600.0982464180015,6604.092537627
# search time: 6600.098s
# total time: 26435.977s
c015,4,4,1,611787,611788,543092,600.000313008,600.210640429
c015,4,4,2,225263,225435,218337,1200.0010078300002,1200.428874571
c015,4,4,3,137422,137595,136822,1800.0094627150002,1800.663680867
c015,4,4,4,125957,126132,125094,2400.0102864930004,2400.903929775
c015,4,4,5,134998,135173,134435,3000.0105131090004,3001.171451704
c015,4,4,6,95600,95780,95252,3600.0131203160004,3601.431445957
c015,4,4,7,85903,86078,85623,4200.014830569,4201.774574542
c015,4,4,8,64123,64297,63932,4800.019794532,4802.060714612
c015,4,4,9,53502,53677,53331,5400.03168292,5402.523912084
c015,4,4,10,41284,41460,41169,6000.050838083,6002.9294778
c015,4,4,11,39477,39650,39319,6600.064390086,6603.407644878
# search time: 6600.064s
# total time: 33040.007s
