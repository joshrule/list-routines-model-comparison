    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.27s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c002_4.json out/1594483387/results/c002_4_best.csv out/1594483387/results/c002_4_predictions.csv out/1594483387/results/c002_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 9]), o: IntList([]) }
#   Datum { i: IntList([9, 6, 2, 5, 8, 7, 3, 4, 1, 0]), o: IntList([2]) }
#   Datum { i: IntList([8]), o: IntList([]) }
#   Datum { i: IntList([5, 6, 1, 3, 2, 0, 7, 8, 9, 4]), o: IntList([1]) }
#   Datum { i: IntList([5, 7]), o: IntList([]) }
#   Datum { i: IntList([0, 5]), o: IntList([]) }
#   Datum { i: IntList([7, 4, 3, 9, 5, 8, 2, 1, 6]), o: IntList([3]) }
#   Datum { i: IntList([4, 6]), o: IntList([]) }
#   Datum { i: IntList([4, 7, 1, 2, 6, 3, 8, 9, 0, 5]), o: IntList([1]) }
#   Datum { i: IntList([7, 9, 0, 2, 1, 8, 6, 3, 5, 4]), o: IntList([0]) }
#   Datum { i: IntList([6, 7, 8, 1, 4, 3, 0, 5, 9, 2]), o: IntList([8]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c002,0,4,1,1096891,1096892,973314,600.005786041,604.08351161
c002,0,4,2,856653,856814,809654,1200.006099096,1205.151069525
c002,0,4,3,590243,590405,569578,1800.00626647,1806.256980808
c002,0,4,4,542544,542719,525609,2400.0065239779997,2407.095401657
c002,0,4,5,348824,348994,334533,3000.0091657619996,3007.834196174
c002,0,4,6,327933,328107,314437,3600.0110599009995,3608.610049764
c002,0,4,7,305077,305246,292498,4200.011726424999,4209.30785163
c002,0,4,8,190185,190355,182095,4800.0134140089995,4810.194691757
c002,0,4,9,200508,200675,192105,5400.0144359079995,5410.902792884
c002,0,4,10,143437,143606,137197,6000.015061923999,6011.653722724
c002,0,4,11,106570,106735,102124,6600.016105293,6612.494102609
# search time: 6600.016s
# total time: 6612.917s
c002,1,4,1,976837,976838,868174,600.000620721,600.321409967
c002,1,4,2,870166,870339,824740,1200.002518511,1200.754823545
c002,1,4,3,591162,591330,570754,1800.0036094420002,1801.200916294
c002,1,4,4,539543,539715,522392,2400.0043368310003,2401.581107584
c002,1,4,5,352999,353171,338473,3000.0065054,3001.943505201
c002,1,4,6,324115,324288,311323,3600.007201277,3602.30484966
c002,1,4,7,303629,303802,290885,4200.0079139790005,4202.640362611
c002,1,4,8,187307,187477,179294,4800.009652282,4803.028193937
c002,1,4,9,199409,199578,191041,5400.014443407001,5403.371133553
c002,1,4,10,138628,138800,132817,6000.015198142,6003.791492892
c002,1,4,11,103023,103192,98808,6600.018127092,6604.283109927
# search time: 6600.018s
# total time: 13217.891s
c002,2,4,1,1050187,1050188,896571,600.006001724,600.1933066
c002,2,4,2,859227,859416,813801,1200.0060033680002,1200.478021708
c002,2,4,3,576613,576797,557040,1800.006022644,1800.790883279
c002,2,4,4,538192,538380,521129,2400.006284284,2401.073945434
c002,2,4,5,341875,342060,328056,3000.0066204289997,3001.336033652
c002,2,4,6,322767,322957,309873,3600.0073452379997,3601.626314728
c002,2,4,7,285320,285506,274024,4200.008459557,4201.866875657
c002,2,4,8,164753,164935,158215,4800.009775593,4802.150260465
c002,2,4,9,183303,183490,176397,5400.017450762,5402.436117663
c002,2,4,10,130296,130480,125141,6000.027061396,6002.729797435
c002,2,4,11,94914,95093,91235,6600.02862354,6603.084731112
# search time: 6600.029s
# total time: 19821.661s
c002,3,4,1,946416,946417,837712,600.007309262,600.223071517
c002,3,4,2,862507,862669,815151,1200.007515916,1200.471533037
c002,3,4,3,592660,592826,571795,1800.00807368,1800.72852808
c002,3,4,4,549108,549279,530569,2400.00873484,2400.980597558
c002,3,4,5,353326,353491,338644,3000.01089085,3001.183323616
c002,3,4,6,326742,326907,313268,3600.011075718,3601.395016612
c002,3,4,7,307642,307811,294670,4200.014855221,4201.606201632
c002,3,4,8,182900,183062,175208,4800.0170982320005,4801.8084111
c002,3,4,9,199721,199889,191420,5400.017953694,5402.032310404
c002,3,4,10,139743,139909,133840,6000.028982737001,6002.26728913
c002,3,4,11,109007,109170,104476,6600.036357235001,6602.530976551
# search time: 6600.036s
# total time: 26424.894s
c002,4,4,1,1053795,1053796,899184,600.000208667,600.177234129
c002,4,4,2,859134,859326,813885,1200.008398051,1200.415455836
c002,4,4,3,595890,596080,575620,1800.0085923660001,1800.642819239
c002,4,4,4,545171,545370,528261,2400.011491883,2400.841548773
c002,4,4,5,351818,352009,337126,3000.0123932839997,3001.0299982
c002,4,4,6,328061,328252,314677,3600.0124179449995,3601.239425717
c002,4,4,7,309431,309621,296131,4200.013079431999,4201.419172751
c002,4,4,8,188076,188268,180057,4800.015827099999,4801.609913453
c002,4,4,9,194205,194398,186389,5400.016079758999,5401.791734766
c002,4,4,10,141785,141976,135673,6000.019982571999,6002.001881549
c002,4,4,11,107823,108010,103268,6600.027891801999,6602.210503726
# search time: 6600.028s
# total time: 33027.809s
