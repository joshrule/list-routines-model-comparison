    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.61s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c027_3.json out/1594483387/results/c027_3_best.csv out/1594483387/results/c027_3_predictions.csv out/1594483387/results/c027_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 6, 1]), o: IntList([6, 1]) }
#   Datum { i: IntList([6, 5, 8, 0, 4, 8, 1, 9, 3, 2]), o: IntList([6, 5, 0, 4, 8, 1, 9, 3, 2]) }
#   Datum { i: IntList([5, 7, 6, 1, 0, 8, 3]), o: IntList([5, 7, 1, 0, 8, 3]) }
#   Datum { i: IntList([9, 9, 7, 7, 7, 6, 6, 7, 2]), o: IntList([9, 7, 7, 7, 6, 6, 7, 2]) }
#   Datum { i: IntList([8, 8, 4, 1, 8, 4, 1, 4]), o: IntList([8, 4, 1, 8, 4, 1, 4]) }
#   Datum { i: IntList([0, 0, 9, 0]), o: IntList([0, 9, 0]) }
#   Datum { i: IntList([9, 4, 0, 5, 9, 4, 5, 0, 0]), o: IntList([9, 4, 5, 9, 4, 5, 0, 0]) }
#   Datum { i: IntList([2, 3, 9, 9, 8, 3, 8, 6]), o: IntList([2, 3, 9, 8, 3, 8, 6]) }
#   Datum { i: IntList([1, 2, 5, 1, 3, 2, 5]), o: IntList([1, 2, 1, 3, 2, 5]) }
#   Datum { i: IntList([5, 5, 7, 7, 2]), o: IntList([5, 7, 7, 2]) }
#   Datum { i: IntList([6, 4, 6, 2, 3, 3]), o: IntList([6, 4, 2, 3, 3]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c027,0,3,1,1043614,1043615,915095,600.000153384,602.368906517
c027,0,3,2,688428,688602,664557,1200.000179287,1203.346183611
c027,0,3,3,215662,215843,213241,1800.001800293,1804.181496048
c027,0,3,4,150289,150468,149255,2400.0046679260004,2405.061996222
c027,0,3,5,130850,131028,127860,3000.0103436960003,3005.519016907
c027,0,3,6,106626,106805,103900,3600.0226850480003,3605.887807236
c027,0,3,7,82809,82984,81280,4200.025202522001,4206.538342173
c027,0,3,8,80651,80828,78616,4800.030661754001,4806.931534435
c027,0,3,9,64077,64251,62565,5400.032646580001,5407.492978489
c027,0,3,10,55194,55367,53786,6000.043762477001,6008.070921582
c027,0,3,11,42626,42799,41704,6600.050764826001,6608.935080856
# search time: 6600.051s
# total time: 6609.229s
c027,1,3,1,1053670,1053671,938847,600.000059507,600.384175605
c027,1,3,2,713933,714107,689348,1200.0003893809999,1200.784903256
c027,1,3,3,225915,226083,223225,1800.0020042249998,1801.135147477
c027,1,3,4,157442,157613,156233,2400.0053721659997,2401.510770368
c027,1,3,5,133240,133415,129794,3000.015978355,3001.730268186
c027,1,3,6,109989,110156,107156,3600.0180409329996,3601.94434319
c027,1,3,7,83370,83532,81817,4200.0205759519995,4202.257667013
c027,1,3,8,82849,83011,80971,4800.023421534999,4802.456047082
c027,1,3,9,65547,65713,63827,5400.024714537999,5402.640890095
c027,1,3,10,56670,56834,55173,6000.028521174999,6002.94410351
c027,1,3,11,42767,42929,41880,6600.035530741999,6603.277063488
# search time: 6600.036s
# total time: 13213.085s
c027,2,3,1,1071176,1071177,952160,600.001479486,600.281113615
c027,2,3,2,714579,714743,689678,1200.001785847,1200.565641276
c027,2,3,3,219984,220143,217510,1800.002959098,1800.80597791
c027,2,3,4,157510,157662,156309,2400.004107992,2401.015699874
c027,2,3,5,132687,132849,129298,3000.0069256740003,3001.152866137
c027,2,3,6,110000,110158,107265,3600.011078887,3601.295291178
c027,2,3,7,84646,84804,83106,4200.019063785,4201.514599856
c027,2,3,8,82950,83111,80941,4800.023439526,4801.675882394
c027,2,3,9,65253,65407,63606,5400.025580797001,5401.85693177
c027,2,3,10,56554,56716,55119,6000.028575008,6002.098882493
c027,2,3,11,44395,44547,43385,6600.034505354,6602.380986706
# search time: 6600.035s
# total time: 19816.214s
c027,3,3,1,1075033,1075034,952069,600.010570322,600.287558725
c027,3,3,2,707950,708124,683162,1200.010918251,1200.543944823
c027,3,3,3,221347,221523,218728,1800.0126904879999,1800.714770068
c027,3,3,4,153465,153633,152338,2400.013085952,2400.888608772
c027,3,3,5,127519,127691,124246,3000.021574086,3000.998646809
c027,3,3,6,105564,105734,103006,3600.0231506239998,3601.117732136
c027,3,3,7,81335,81505,79796,4200.027931171,4201.306811503
c027,3,3,8,79762,79929,77732,4800.047790384,4801.435534498
c027,3,3,9,63760,63927,62123,5400.0523258660005,5401.574506771
c027,3,3,10,54381,54548,53057,6000.057246843,6001.712259451
c027,3,3,11,43444,43607,42470,6600.063920574,6601.859869575
# search time: 6600.064s
# total time: 26418.554s
c027,4,3,1,1080676,1080677,926175,600.000098175,600.168066563
c027,4,3,2,674045,674240,653153,1200.002134715,1200.397467928
c027,4,3,3,223676,223868,221138,1800.002757484,1800.574667316
c027,4,3,4,156305,156499,155160,2400.0031300260002,2400.752555976
c027,4,3,5,130882,131071,127707,3000.011355637,3000.860150491
c027,4,3,6,108691,108886,105845,3600.0129065300002,3600.951983968
c027,4,3,7,82853,83050,81273,4200.013715679001,4201.081462448
c027,4,3,8,82092,82291,80063,4800.023677558001,4801.176663234
c027,4,3,9,64911,65106,63084,5400.027764146001,5401.26309908
c027,4,3,10,56053,56249,54627,6000.033289870001,6001.418668994
c027,4,3,11,42324,42523,41486,6600.040207978001,6601.584731845
# search time: 6600.040s
# total time: 33020.548s
