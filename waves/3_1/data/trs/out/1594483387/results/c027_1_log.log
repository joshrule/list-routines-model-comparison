    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.39s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c027_1.json out/1594483387/results/c027_1_best.csv out/1594483387/results/c027_1_predictions.csv out/1594483387/results/c027_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([0, 0, 9, 0]), o: IntList([0, 9, 0]) }
#   Datum { i: IntList([8, 8, 4, 1, 8, 4, 1, 4]), o: IntList([8, 4, 1, 8, 4, 1, 4]) }
#   Datum { i: IntList([6, 4, 6, 2, 3, 3]), o: IntList([6, 4, 2, 3, 3]) }
#   Datum { i: IntList([1, 2, 5, 1, 3, 2, 5]), o: IntList([1, 2, 1, 3, 2, 5]) }
#   Datum { i: IntList([9, 9, 7, 7, 7, 6, 6, 7, 2]), o: IntList([9, 7, 7, 7, 6, 6, 7, 2]) }
#   Datum { i: IntList([6, 5, 8, 0, 4, 8, 1, 9, 3, 2]), o: IntList([6, 5, 0, 4, 8, 1, 9, 3, 2]) }
#   Datum { i: IntList([5, 7, 6, 1, 0, 8, 3]), o: IntList([5, 7, 1, 0, 8, 3]) }
#   Datum { i: IntList([6, 6, 1]), o: IntList([6, 1]) }
#   Datum { i: IntList([9, 4, 0, 5, 9, 4, 5, 0, 0]), o: IntList([9, 4, 5, 9, 4, 5, 0, 0]) }
#   Datum { i: IntList([5, 5, 7, 7, 2]), o: IntList([5, 7, 7, 2]) }
#   Datum { i: IntList([2, 3, 9, 9, 8, 3, 8, 6]), o: IntList([2, 3, 9, 8, 3, 8, 6]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c027,0,1,1,1073544,1073545,915602,600.006845649,601.936322545
c027,0,1,2,430079,430256,418929,1200.0131518019998,1203.665974408
c027,0,1,3,181534,181719,176102,1800.0152882579998,1804.409088846
c027,0,1,4,85867,86053,85125,2400.0184889399998,2405.654930509
c027,0,1,5,94942,95125,92513,3000.020233417,3006.181703776
c027,0,1,6,60080,60262,58938,3600.021237655,3607.125825285
c027,0,1,7,56635,56813,55094,4200.039359321,4207.607896087
c027,0,1,8,37160,37341,36386,4800.056942248,4808.604534873
c027,0,1,9,45728,45908,44339,5400.063106289001,5409.04179429
c027,0,1,10,34498,34681,33563,6000.090815004,6009.824549946
c027,0,1,11,31170,31350,30430,6600.099596675001,6610.61508159
# search time: 6600.100s
# total time: 6610.932s
c027,1,1,1,673880,673881,574276,600.003017592,600.319201165
c027,1,1,2,342450,342628,333604,1200.0109203319998,1200.883102211
c027,1,1,3,164535,164714,160143,1800.0146831149998,1801.350622018
c027,1,1,4,89942,90124,89256,2400.021713096,2402.039835285
c027,1,1,5,94551,94736,92178,3000.043551287,3002.370369826
c027,1,1,6,61311,61497,60008,3600.0458686889997,3602.844997019
c027,1,1,7,56948,57125,55524,4200.046161345999,4203.120454441
c027,1,1,8,39312,39488,38427,4800.065141169999,4803.590614971
c027,1,1,9,45927,46104,44658,5400.065843963999,5403.897847154
c027,1,1,10,34278,34457,33317,6000.078911489999,6004.28039783
c027,1,1,11,30534,30716,29819,6600.099968070999,6604.573386469
# search time: 6600.100s
# total time: 13215.950s
c027,2,1,1,637904,637905,566145,600.000139014,600.302400284
c027,2,1,2,372384,372547,361168,1200.0012930379999,1200.698100298
c027,2,1,3,181689,181852,176009,1800.001937394,1800.992128066
c027,2,1,4,93776,93942,92964,2400.004625245,2401.420982404
c027,2,1,5,94237,94403,91856,3000.007221142,3001.64270973
c027,2,1,6,61716,61878,60404,3600.012118094,3602.096261261
c027,2,1,7,56201,56363,54780,4200.016336418,4202.27675402
c027,2,1,8,37040,37205,36245,4800.021915237,4802.669315252
c027,2,1,9,45755,45921,44627,5400.025435014,5402.872358246
c027,2,1,10,34034,34198,33067,6000.0390644750005,6003.091662857
c027,2,1,11,31102,31270,30284,6600.041424239001,6603.483315666
# search time: 6600.041s
# total time: 19819.661s
c027,3,1,1,804399,804400,712221,600.000371591,600.223545218
c027,3,1,2,571814,571981,554246,1200.001268367,1200.531408753
c027,3,1,3,289688,289853,281024,1800.004226343,1800.746913461
c027,3,1,4,150952,151121,149495,2400.005673941,2401.026672473
c027,3,1,5,150333,150498,146281,3000.007073418,3001.182205596
c027,3,1,6,95458,95619,93666,3600.014797605,3601.447869375
c027,3,1,7,88196,88354,85801,4200.021101685999,4201.674175186
c027,3,1,8,38237,38399,37344,4800.023138363999,4801.948681605
c027,3,1,9,67744,67906,65995,5400.029280731999,5402.081093355
c027,3,1,10,56945,57105,55351,6000.032354753999,6002.316124619
c027,3,1,11,47169,47321,45993,6600.033371404999,6602.685364037
# search time: 6600.033s
# total time: 26422.804s
c027,4,1,1,579221,579222,493199,600.018035159,600.199825192
c027,4,1,2,336032,336215,327438,1200.018980053,1200.478875725
c027,4,1,3,157940,158125,153985,1800.026722415,1800.680871236
c027,4,1,4,85802,85981,85125,2400.02959638,2400.96398502
c027,4,1,5,88722,88908,86477,3000.030336295,3001.098544984
c027,4,1,6,56451,56633,55338,3600.032424815,3601.34207747
c027,4,1,7,53552,53734,52058,4200.032738787,4201.427697991
c027,4,1,8,35715,35897,34994,4800.035696123,4801.592193071
c027,4,1,9,43338,43524,42204,5400.049021926,5401.713997252
c027,4,1,10,32736,32919,31804,6000.058488845,6001.91524796
c027,4,1,11,31005,31187,30343,6600.05877083,6602.019431455
# search time: 6600.059s
# total time: 33025.322s
