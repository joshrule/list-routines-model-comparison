    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.47s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c030_3.json out/1594483387/results/c030_3_best.csv out/1594483387/results/c030_3_predictions.csv out/1594483387/results/c030_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 4, 8, 1, 0]), o: IntList([6, 4, 8]) }
#   Datum { i: IntList([9, 7, 4, 3, 8, 1]), o: IntList([9, 7, 4, 3]) }
#   Datum { i: IntList([2, 5, 7, 8, 2, 2, 9, 3, 1, 0]), o: IntList([2, 5, 7, 8, 2, 2, 9, 3]) }
#   Datum { i: IntList([5, 4, 5, 0]), o: IntList([5, 4]) }
#   Datum { i: IntList([6, 2, 9, 7, 8, 3, 8, 5, 0]), o: IntList([6, 2, 9, 7, 8, 3, 8]) }
#   Datum { i: IntList([5, 3]), o: IntList([]) }
#   Datum { i: IntList([6, 4, 1, 6, 7, 2, 5, 8]), o: IntList([6, 4, 1, 6, 7, 2]) }
#   Datum { i: IntList([0, 0, 3, 3, 0, 3, 0]), o: IntList([0, 0, 3, 3, 0]) }
#   Datum { i: IntList([5, 7, 1, 8, 9, 4, 1, 6, 2, 3]), o: IntList([5, 7, 1, 8, 9, 4, 1, 6]) }
#   Datum { i: IntList([9, 7, 2, 5, 9, 4, 6, 8, 4]), o: IntList([9, 7, 2, 5, 9, 4, 6]) }
#   Datum { i: IntList([1, 0, 1]), o: IntList([1]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c030,0,3,1,997430,997431,874112,600.001224493,602.475113856
c030,0,3,2,527954,528129,513939,1200.006391385,1203.775414235
c030,0,3,3,307541,307720,304307,1800.007159907,1804.805365549
c030,0,3,4,158356,158533,157992,2400.007422748,2405.743834476
c030,0,3,5,138543,138721,137835,3000.0101045330002,3006.599035507
c030,0,3,6,105686,105862,105322,3600.0129072600002,3607.325178333
c030,0,3,7,105018,105192,102055,4200.0152118940005,4208.048247811
c030,0,3,8,79584,79755,76412,4800.020709539001,4808.776383199
c030,0,3,9,68514,68684,65865,5400.041489712001,5409.400297643
c030,0,3,10,56247,56420,53682,6000.047174091001,6009.980097386
c030,0,3,11,48592,48768,46594,6600.050178472001,6610.652956268
# search time: 6600.050s
# total time: 6610.994s
c030,1,3,1,981835,981836,870737,600.000211005,600.373982729
c030,1,3,2,528408,528570,514653,1200.0070926449998,1200.860843372
c030,1,3,3,316475,316640,313182,1800.0089465369997,1801.29086805
c030,1,3,4,165896,166047,165499,2400.0121774219997,2401.708124898
c030,1,3,5,143172,143334,142432,3000.0134388049996,3002.112151654
c030,1,3,6,109223,109387,108881,3600.0185971809997,3602.503435367
c030,1,3,7,108145,108305,105114,4200.02089608,4202.854343103
c030,1,3,8,80475,80635,77234,4800.026794059,4803.20354185
c030,1,3,9,70262,70422,67569,5400.0356349270005,5403.582731088
c030,1,3,10,56389,56548,53720,6000.036861718,6003.908766426
c030,1,3,11,48077,48235,45873,6600.047082037,6604.341002571
# search time: 6600.047s
# total time: 13215.960s
c030,2,3,1,1056933,1056934,952012,600.004339735,600.299836906
c030,2,3,2,535461,535623,521683,1200.004960125,1200.610093874
c030,2,3,3,309434,309605,306097,1800.005638359,1800.939890392
c030,2,3,4,161597,161762,161220,2400.005674385,2401.186272218
c030,2,3,5,140660,140826,139968,3000.0057156479998,3001.435022655
c030,2,3,6,107952,108116,107714,3600.007681971,3601.698298492
c030,2,3,7,108094,108261,105056,4200.008735802,4201.939424951
c030,2,3,8,83767,83929,80542,4800.013339744,4802.139793935
c030,2,3,9,70723,70891,67801,5400.017958388,5402.394489202
c030,2,3,10,58310,58473,55720,6000.026520226,6002.629899153
c030,2,3,11,49190,49359,47078,6600.032144627,6602.861489866
# search time: 6600.032s
# total time: 19819.466s
c030,3,3,1,1061458,1061459,903779,600.000024715,600.18562315
c030,3,3,2,530549,530728,516621,1200.009797153,1200.468796533
c030,3,3,3,296254,296440,293113,1800.011235677,1800.718294792
c030,3,3,4,156861,157047,156489,2400.012757892,2400.899120834
c030,3,3,5,131425,131616,130844,3000.0153734650003,3001.119594558
c030,3,3,6,103858,104050,103660,3600.0157774490003,3601.301015932
c030,3,3,7,104167,104354,101202,4200.018489129,4201.470650981
c030,3,3,8,79729,79917,76586,4800.019718787,4801.629933921
c030,3,3,9,68392,68581,65505,5400.026179619,5401.801881219
c030,3,3,10,55961,56146,53433,6000.030029744999,6002.01690718
c030,3,3,11,48643,48826,46630,6600.039526297999,6602.203779695
# search time: 6600.040s
# total time: 26422.465s
c030,4,3,1,1005937,1005938,907340,600.00349786,600.256903214
c030,4,3,2,537962,538136,523814,1200.0051108950001,1200.495425394
c030,4,3,3,314322,314497,310989,1800.005614008,1800.687844881
c030,4,3,4,159992,160170,159640,2400.0109072140003,2400.859280446
c030,4,3,5,135595,135770,134965,3000.0122614480006,3001.070072068
c030,4,3,6,105961,106130,105726,3600.0140953220007,3601.234489634
c030,4,3,7,104347,104519,101494,4200.016361119001,4201.347264151
c030,4,3,8,81250,81417,77889,4800.028139921001,4801.497645365
c030,4,3,9,70408,70578,67512,5400.033737218001,5401.62866787
c030,4,3,10,56856,57024,54251,6000.040194387001,6001.782685846
c030,4,3,11,47681,47848,45545,6600.041560119001,6601.943144332
# search time: 6600.042s
# total time: 33024.757s
