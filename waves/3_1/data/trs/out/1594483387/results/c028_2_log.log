    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.60s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c028_2.json out/1594483387/results/c028_2_best.csv out/1594483387/results/c028_2_predictions.csv out/1594483387/results/c028_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([5, 0, 6, 1, 2]), o: IntList([5, 6, 1, 2]) }
#   Datum { i: IntList([4, 2, 9, 1, 8, 7, 6]), o: IntList([4, 9, 1, 8, 7, 6]) }
#   Datum { i: IntList([3, 5, 0, 7, 9, 2, 8, 4]), o: IntList([3, 5, 7, 9, 2, 8, 4]) }
#   Datum { i: IntList([7, 8, 0, 1, 0, 3]), o: IntList([7, 8, 1, 0, 3]) }
#   Datum { i: IntList([5, 2, 7, 9, 6, 4, 1, 0, 8, 3]), o: IntList([5, 7, 9, 6, 4, 1, 0, 8, 3]) }
#   Datum { i: IntList([3, 0, 7, 6, 9, 4]), o: IntList([3, 7, 6, 9, 4]) }
#   Datum { i: IntList([3, 2, 5, 8, 0, 9, 5]), o: IntList([3, 5, 8, 0, 9, 5]) }
#   Datum { i: IntList([1, 2, 0, 6]), o: IntList([1, 2, 6]) }
#   Datum { i: IntList([5, 7, 1, 9, 0, 6, 2, 8, 4, 7]), o: IntList([5, 7, 9, 0, 6, 2, 8, 4, 7]) }
#   Datum { i: IntList([2, 4, 0, 9, 5, 3, 6, 8, 1]), o: IntList([2, 4, 9, 5, 3, 6, 8, 1]) }
#   Datum { i: IntList([3, 1, 4]), o: IntList([3, 4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c028,0,2,1,1059534,1059535,906938,600.004463904,601.942283957
c028,0,2,2,464980,465166,452313,1200.005137661,1203.10933792
c028,0,2,3,259286,259482,252496,1800.005734145,1804.10028214
c028,0,2,4,176364,176558,173187,2400.0076659039996,2404.726223723
c028,0,2,5,114293,114498,113075,3000.010283234,3005.729700348
c028,0,2,6,87250,87434,86500,3600.0149103579997,3606.480398254
c028,0,2,7,76148,76338,75485,4200.021909978999,4207.193220306
c028,0,2,8,60335,60526,60036,4800.026666954999,4807.947751381
c028,0,2,9,57140,57334,56809,5400.040827499999,5408.679748267
c028,0,2,10,43215,43407,43050,6000.050149631999,6009.622894452
c028,0,2,11,36139,36327,36112,6600.065387559999,6610.495395096
# search time: 6600.065s
# total time: 6610.906s
c028,1,2,1,994023,994024,894259,600.000135769,600.376582318
c028,1,2,2,471093,471257,458531,1200.000505465,1200.850555999
c028,1,2,3,262098,262254,255134,1800.004029591,1801.251424713
c028,1,2,4,175043,175212,172020,2400.005286894,2401.521934838
c028,1,2,5,119505,119672,118001,3000.0107800650003,3001.961194548
c028,1,2,6,84813,84969,84060,3600.019634102,3602.393213219
c028,1,2,7,75604,75765,74916,4200.025123234,4202.799794892
c028,1,2,8,60095,60259,59671,4800.03137176,4803.200456193
c028,1,2,9,57127,57288,56721,5400.039818098,5403.548612162
c028,1,2,10,45380,45540,45119,6000.045353974,6004.07758583
c028,1,2,11,35859,36017,35858,6600.0460714910005,6604.498858848
# search time: 6600.046s
# total time: 13216.072s
c028,2,2,1,1004033,1004034,894440,600.000075509,600.29791069
c028,2,2,2,456893,457064,444161,1200.000750381,1200.614123195
c028,2,2,3,259870,260040,253123,1800.002266517,1800.896931088
c028,2,2,4,175522,175687,172177,2400.002802103,2401.095380399
c028,2,2,5,112502,112674,111345,3000.0094339919997,3001.424587219
c028,2,2,6,84724,84885,83869,3600.010097092,3601.637437936
c028,2,2,7,75607,75772,74926,4200.012655074,4201.903171008
c028,2,2,8,59595,59765,59200,4800.0200626549995,4802.172999983
c028,2,2,9,56075,56251,55679,5400.031583206999,5402.395702084
c028,2,2,10,44437,44601,44175,6000.033907663999,6002.662495612
c028,2,2,11,38973,39138,38822,6600.044266096999,6603.000870213
# search time: 6600.044s
# total time: 19819.887s
c028,3,2,1,1001799,1001800,906399,600.000184338,600.277347985
c028,3,2,2,473167,473334,460649,1200.000362557,1200.524765818
c028,3,2,3,254076,254240,247452,1800.0009336809999,1800.757657993
c028,3,2,4,173792,173959,170587,2400.0031107329996,2400.913115993
c028,3,2,5,119505,119675,118007,3000.01380266,3001.137534047
c028,3,2,6,85665,85822,84850,3600.014275619,3601.3206685
c028,3,2,7,75497,75663,74908,4200.020093633,4201.503261316
c028,3,2,8,60571,60734,60129,4800.03004304,4801.757832306
c028,3,2,9,54745,54905,54401,5400.036396217,5401.978893628
c028,3,2,10,44270,44430,44027,6000.039428877,6002.196779247
c028,3,2,11,35862,36035,35858,6600.050050141001,6602.522316815
# search time: 6600.050s
# total time: 26422.768s
c028,4,2,1,989113,989114,885155,600.001008698,600.224532494
c028,4,2,2,458275,458437,445663,1200.010775529,1200.438406823
c028,4,2,3,260538,260705,253555,1800.013271331,1800.625520825
c028,4,2,4,173387,173553,170287,2400.015357688,2400.76855631
c028,4,2,5,120061,120230,118618,3000.01592844,3000.891799585
c028,4,2,6,84729,84896,83975,3600.019542086,3601.085709886
c028,4,2,7,74717,74882,74044,4200.020696019,4201.204231232
c028,4,2,8,58774,58945,58501,4800.023223849999,4801.351271264
c028,4,2,9,53610,53772,53295,5400.0286636989995,5401.552855829
c028,4,2,10,44840,44999,44589,6000.030210389,6001.801864548
c028,4,2,11,38921,39095,38789,6600.032156167,6601.946288838
# search time: 6600.032s
# total time: 33025.584s
