    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.62s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c028_3.json out/1594483387/results/c028_3_best.csv out/1594483387/results/c028_3_predictions.csv out/1594483387/results/c028_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 1, 4]), o: IntList([3, 4]) }
#   Datum { i: IntList([4, 2, 9, 1, 8, 7, 6]), o: IntList([4, 9, 1, 8, 7, 6]) }
#   Datum { i: IntList([7, 8, 0, 1, 0, 3]), o: IntList([7, 8, 1, 0, 3]) }
#   Datum { i: IntList([5, 7, 1, 9, 0, 6, 2, 8, 4, 7]), o: IntList([5, 7, 9, 0, 6, 2, 8, 4, 7]) }
#   Datum { i: IntList([2, 4, 0, 9, 5, 3, 6, 8, 1]), o: IntList([2, 4, 9, 5, 3, 6, 8, 1]) }
#   Datum { i: IntList([3, 0, 7, 6, 9, 4]), o: IntList([3, 7, 6, 9, 4]) }
#   Datum { i: IntList([1, 2, 0, 6]), o: IntList([1, 2, 6]) }
#   Datum { i: IntList([3, 5, 0, 7, 9, 2, 8, 4]), o: IntList([3, 5, 7, 9, 2, 8, 4]) }
#   Datum { i: IntList([3, 2, 5, 8, 0, 9, 5]), o: IntList([3, 5, 8, 0, 9, 5]) }
#   Datum { i: IntList([5, 2, 7, 9, 6, 4, 1, 0, 8, 3]), o: IntList([5, 7, 9, 6, 4, 1, 0, 8, 3]) }
#   Datum { i: IntList([5, 0, 6, 1, 2]), o: IntList([5, 6, 1, 2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c028,0,3,1,1017174,1017175,909520,600.003723391,602.675125529
c028,0,3,2,636447,636612,619624,1200.005030152,1203.774564891
c028,0,3,3,305467,305640,295250,1800.005982696,1804.323816373
c028,0,3,4,218594,218774,216786,2400.008035,2404.967783604
c028,0,3,5,111937,112110,111246,3000.016695455,3005.726766274
c028,0,3,6,82199,82374,81648,3600.023276887,3606.529514391
c028,0,3,7,75114,75286,74662,4200.0256104,4207.189622093
c028,0,3,8,70441,70619,69946,4800.029996566,4807.721121351
c028,0,3,9,56042,56215,55790,5400.039882321,5408.352449575
c028,0,3,10,43243,43425,43213,6000.04717911,6009.139473926
c028,0,3,11,37986,38165,37872,6600.056828362,6609.966550762
# search time: 6600.057s
# total time: 6610.341s
c028,1,3,1,1000858,1000859,889821,600.004286686,600.370313141
c028,1,3,2,630597,630762,613326,1200.009464657,1200.808996728
c028,1,3,3,306923,307088,296885,1800.009955139,1801.061946378
c028,1,3,4,210362,210529,208737,2400.010178656,2401.401830218
c028,1,3,5,116951,117108,115976,3000.013203857,3001.686584101
c028,1,3,6,77646,77819,77200,3600.015082792,3602.093085167
c028,1,3,7,72203,72373,71813,4200.015601268,4202.393741961
c028,1,3,8,68336,68519,67891,4800.024033832,4802.70459764
c028,1,3,9,54597,54765,54317,5400.031915485,5403.061309401
c028,1,3,10,42385,42552,42360,6000.039934606,6003.457257166
c028,1,3,11,36615,36778,36597,6600.041302425,6603.932851796
# search time: 6600.041s
# total time: 13215.220s
c028,2,3,1,951447,951448,843303,600.001211259,600.246568952
c028,2,3,2,613675,613841,596853,1200.0018554829999,1200.553843048
c028,2,3,3,300706,300870,290477,1800.0033774079998,1800.749565697
c028,2,3,4,221838,222010,219879,2400.004042578,2400.944844904
c028,2,3,5,117503,117672,116557,3000.0095030619996,3001.177107085
c028,2,3,6,81991,82157,81446,3600.0120301539996,3601.430219735
c028,2,3,7,74254,74425,73802,4200.0131946639995,4201.659066957
c028,2,3,8,67787,67959,67338,4800.016730869,4801.897206582
c028,2,3,9,55057,55228,54826,5400.019223619,5402.073304351
c028,2,3,10,42999,43174,42958,6000.027841151,6002.350204714
c028,2,3,11,36138,36306,36138,6600.045672045,6602.641521237
# search time: 6600.046s
# total time: 19818.250s
c028,3,3,1,963470,963471,856109,600.008270341,600.23392664
c028,3,3,2,638374,638536,621043,1200.009780766,1200.49873545
c028,3,3,3,305588,305752,295503,1800.011064077,1800.65819572
c028,3,3,4,224006,224160,221468,2400.012533346,2400.833816024
c028,3,3,5,111025,111192,110310,3000.01560435,3001.010658206
c028,3,3,6,77715,77881,77292,3600.018328065,3601.21737156
c028,3,3,7,74092,74249,73545,4200.019071572,4201.402740499
c028,3,3,8,65272,65437,64910,4800.022043669,4801.60146728
c028,3,3,9,51153,51319,51040,5400.035556981,5401.80807674
c028,3,3,10,43600,43761,43532,6000.042015404,6002.105242275
c028,3,3,11,37279,37440,37179,6600.046933032,6602.292329653
# search time: 6600.047s
# total time: 26421.262s
c028,4,3,1,1030283,1030284,937825,600.000267205,600.293042314
c028,4,3,2,625511,625679,608502,1200.005285456,1200.535223783
c028,4,3,3,302235,302409,291979,1800.005925819,1800.670753941
c028,4,3,4,216708,216880,215002,2400.006286547,2400.834890882
c028,4,3,5,110488,110658,109822,3000.008750855,3000.978710392
c028,4,3,6,80169,80337,79656,3600.020303832,3601.150206007
c028,4,3,7,74171,74345,73694,4200.023869883,4201.293445288
c028,4,3,8,68894,69063,68447,4800.030469035,4801.461290452
c028,4,3,9,52123,52302,51991,5400.043831931001,5401.618625113
c028,4,3,10,44177,44351,44094,6000.057009917001,6001.817362156
c028,4,3,11,35309,35479,35293,6600.0612705680005,6602.009622021
# search time: 6600.061s
# total time: 33024.087s
