    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.59s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c015_3.json out/1594483387/results/c015_3_best.csv out/1594483387/results/c015_3_predictions.csv out/1594483387/results/c015_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([5, 6, 2, 9, 8, 8, 9, 3, 1]), o: IntList([9, 3]) }
#   Datum { i: IntList([1, 1, 3, 2, 3, 4, 5, 6, 5, 1]), o: IntList([3]) }
#   Datum { i: IntList([2, 4, 9, 0, 7, 6, 0, 9, 0, 4]), o: IntList([0, 7, 6]) }
#   Datum { i: IntList([7, 8, 2, 1, 7, 8, 7, 7, 7, 7]), o: IntList([7, 7]) }
#   Datum { i: IntList([3, 4, 5, 5, 4, 3, 3]), o: IntList([4, 3]) }
#   Datum { i: IntList([6, 7, 0, 1, 3, 5, 9, 4, 2, 8]), o: IntList([4, 2]) }
#   Datum { i: IntList([1, 4, 7, 7, 5, 1, 9, 5, 7]), o: IntList([7, 7, 5, 1]) }
#   Datum { i: IntList([4, 5, 6, 6, 4, 6, 9, 9]), o: IntList([6, 9]) }
#   Datum { i: IntList([1, 3, 9, 2, 0, 5, 7, 5, 7, 1]), o: IntList([9, 2, 0]) }
#   Datum { i: IntList([1, 2, 9, 3, 1, 4, 0, 1, 2, 8]), o: IntList([9, 3]) }
#   Datum { i: IntList([1, 5, 8, 3, 6, 2, 4, 8, 0]), o: IntList([8, 3, 6, 2, 4]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c015,0,3,1,984984,984985,842226,600.000146641,601.922120253
c015,0,3,2,504810,504985,490422,1200.0054373990001,1203.579848815
c015,0,3,3,336925,337104,333196,1800.0077219940001,1805.047424017
c015,0,3,4,206311,206490,205607,2400.008245683,2406.407827972
c015,0,3,5,167287,167463,166502,3000.0096151810003,3007.712761212
c015,0,3,6,123872,124054,121451,3600.012439683,3608.835844372
c015,0,3,7,95948,96129,93790,4200.01459,4209.858708058
c015,0,3,8,73795,73976,71920,4800.022122050999,4811.081985245
c015,0,3,9,68090,68268,66059,5400.023188957999,5411.972157056
c015,0,3,10,51247,51429,50058,6000.024193068999,6013.08293053
c015,0,3,11,40405,40584,38770,6600.038170005999,6614.485340712
# search time: 6600.038s
# total time: 6614.829s
c015,1,3,1,954660,954661,858336,600.000033727,600.322603796
c015,1,3,2,520221,520390,505595,1200.000645517,1200.84415633
c015,1,3,3,345001,345171,341204,1800.0096802060002,1801.408778506
c015,1,3,4,215644,215811,214536,2400.01380414,2401.959226139
c015,1,3,5,153894,154065,153558,3000.0150693630003,3002.563494136
c015,1,3,6,123674,123835,121310,3600.017032527,3603.097627247
c015,1,3,7,87517,87681,85807,4200.017747687,4203.651019279
c015,1,3,8,72608,72776,70784,4800.027496269,4804.34855516
c015,1,3,9,67562,67732,65491,5400.029154609,5404.895682934
c015,1,3,10,54813,54977,53564,6000.035772072,6005.509591973
c015,1,3,11,43396,43564,41715,6600.048878496,6606.130379559
# search time: 6600.049s
# total time: 13221.570s
c015,2,3,1,921956,921957,818347,600.003283048,600.223845717
c015,2,3,2,511534,511695,497338,1200.01640217,1200.619702592
c015,2,3,3,345034,345199,341282,1800.0175708470001,1800.998789694
c015,2,3,4,207043,207220,206314,2400.021627513,2401.380681497
c015,2,3,5,168112,168278,167385,3000.025738171,3001.694584602
c015,2,3,6,124381,124553,121814,3600.032903807,3602.096487279
c015,2,3,7,88420,88587,86702,4200.033670123999,4202.512897704
c015,2,3,8,73416,73578,71547,4800.033769725,4802.97795224
c015,2,3,9,67853,68015,65772,5400.036950698,5403.354200538
c015,2,3,10,51239,51401,50030,6000.042662024,6003.745112562
c015,2,3,11,44606,44766,42893,6600.05288804,6604.221738283
# search time: 6600.053s
# total time: 19826.406s
c015,3,3,1,982290,982291,842872,600.000565046,600.17893617
c015,3,3,2,511585,511758,497636,1200.001147634,1200.469176434
c015,3,3,3,339883,340056,336074,1800.0016823740002,1800.772466306
c015,3,3,4,213494,213667,212387,2400.0034141660003,2401.074464225
c015,3,3,5,165842,166023,165096,3000.0047683810003,3001.390870216
c015,3,3,6,124521,124697,122048,3600.0069600680004,3601.618972637
c015,3,3,7,96740,96914,94660,4200.0213882180005,4201.927052428
c015,3,3,8,73712,73891,71874,4800.029782968,4802.3581087
c015,3,3,9,60905,61078,59227,5400.043522312,5402.644569352
c015,3,3,10,50872,51043,49672,6000.047545288,6002.99739265
c015,3,3,11,44634,44802,42929,6600.051611455,6603.378316377
# search time: 6600.052s
# total time: 26430.398s
c015,4,3,1,942665,942666,842371,600.000902125,600.22229141
c015,4,3,2,502102,502272,487526,1200.001195637,1200.471325493
c015,4,3,3,334126,334304,330318,1800.003925858,1800.716535075
c015,4,3,4,203521,203705,202826,2400.008360762,2400.935814451
c015,4,3,5,166526,166709,165816,3000.010481369,3001.1740244
c015,4,3,6,124306,124488,121801,3600.013339092,3601.408396347
c015,4,3,7,95270,95445,93113,4200.021496782,4201.604566526
c015,4,3,8,72949,73123,71125,4800.021964457001,4801.855349317
c015,4,3,9,62559,62735,60639,5400.026613521,5402.216054433
c015,4,3,10,54414,54582,53117,6000.03152207,6002.505196385
c015,4,3,11,44195,44372,42535,6600.0338490290005,6602.741954962
# search time: 6600.034s
# total time: 33033.750s
