    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.45s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c002_5.json out/1594483387/results/c002_5_best.csv out/1594483387/results/c002_5_predictions.csv out/1594483387/results/c002_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([8]), o: IntList([]) }
#   Datum { i: IntList([6, 7, 8, 1, 4, 3, 0, 5, 9, 2]), o: IntList([8]) }
#   Datum { i: IntList([0, 5]), o: IntList([]) }
#   Datum { i: IntList([4, 7, 1, 2, 6, 3, 8, 9, 0, 5]), o: IntList([1]) }
#   Datum { i: IntList([3, 9]), o: IntList([]) }
#   Datum { i: IntList([4, 6]), o: IntList([]) }
#   Datum { i: IntList([5, 6, 1, 3, 2, 0, 7, 8, 9, 4]), o: IntList([1]) }
#   Datum { i: IntList([5, 7]), o: IntList([]) }
#   Datum { i: IntList([9, 6, 2, 5, 8, 7, 3, 4, 1, 0]), o: IntList([2]) }
#   Datum { i: IntList([7, 4, 3, 9, 5, 8, 2, 1, 6]), o: IntList([3]) }
#   Datum { i: IntList([7, 9, 0, 2, 1, 8, 6, 3, 5, 4]), o: IntList([0]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c002,0,5,1,889567,889568,778423,600.000127749,602.244631349
c002,0,5,2,933916,934091,884681,1200.0005880519998,1203.076291097
c002,0,5,3,439449,439611,420339,1800.0021497769999,1804.455027685
c002,0,5,4,543038,543208,525813,2400.0025811329997,2405.303918639
c002,0,5,5,344862,345034,331218,3000.011771961,3006.150908574
c002,0,5,6,340739,340906,326389,3600.0122748589997,3606.881687794
c002,0,5,7,285390,285557,274518,4200.012458388999,4207.633817086
c002,0,5,8,212627,212793,204392,4800.014230134999,4808.33785077
c002,0,5,9,166420,166586,160247,5400.017702203999,5409.129063543
c002,0,5,10,149881,150049,143425,6000.022209813998,6009.856070794
c002,0,5,11,94366,94534,90599,6600.026266826999,6610.704098648
# search time: 6600.026s
# total time: 6611.102s
c002,1,5,1,1005350,1005351,853205,600.004785188,600.196275004
c002,1,5,2,923120,923307,874127,1200.005771023,1200.540703213
c002,1,5,3,411484,411668,393342,1800.006484017,1801.041197271
c002,1,5,4,538924,539107,521774,2400.006667727,2401.412238251
c002,1,5,5,348424,348603,334226,3000.008129727,3001.76436087
c002,1,5,6,334781,334966,321189,3600.009471638,3602.110461167
c002,1,5,7,299333,299515,286925,4200.01039259,4202.471405945
c002,1,5,8,212591,212772,204174,4800.012728406,4802.857443417
c002,1,5,9,169587,169769,163169,5400.013812289,5403.290353719
c002,1,5,10,150287,150468,143962,6000.0149238330005,6003.649740533
c002,1,5,11,94742,94926,91068,6600.020963055001,6604.152415194
# search time: 6600.021s
# total time: 13215.927s
c002,2,5,1,1095678,1095679,936078,600.003829,600.18109072
c002,2,5,2,845824,846016,805244,1200.0039685880001,1200.417822384
c002,2,5,3,481769,481960,460672,1800.0078934880003,1800.740326636
c002,2,5,4,536386,536583,519405,2400.0181096490005,2401.031100597
c002,2,5,5,348391,348585,334436,3000.0188297920004,3001.261370101
c002,2,5,6,335688,335876,321920,3600.0194963760005,3601.507020702
c002,2,5,7,299640,299835,287143,4200.022384805001,4201.762039907
c002,2,5,8,223672,223863,214448,4800.022471585001,4802.00608663
c002,2,5,9,185566,185757,178045,5400.030496939001,5402.281711445
c002,2,5,10,155487,155678,148628,6000.032802123001,6002.495100746
c002,2,5,11,106620,106809,102263,6600.034675459001,6602.778957998
# search time: 6600.035s
# total time: 19819.428s
c002,3,5,1,1057628,1057629,902196,600.001435055,600.165139153
c002,3,5,2,897809,897992,851019,1200.005515305,1200.399667879
c002,3,5,3,430109,430288,411319,1800.0063750680001,1800.66429209
c002,3,5,4,538652,538836,521778,2400.008935876,2400.885163916
c002,3,5,5,352844,353023,338265,3000.009006178,3001.086899097
c002,3,5,6,325898,326085,312608,3600.0103044760003,3601.311477887
c002,3,5,7,287623,287807,276104,4200.015870093001,4201.49669843
c002,3,5,8,213914,214090,205389,4800.016592157001,4801.666195042
c002,3,5,9,167793,167980,161339,5400.0190705390005,5401.952694425
c002,3,5,10,148166,148347,141873,6000.020692148,6002.174092725
c002,3,5,11,91565,91747,88080,6600.026758965,6602.451926425
# search time: 6600.027s
# total time: 26422.555s
c002,4,5,1,1084816,1084817,925990,600.000042923,600.160421837
c002,4,5,2,837955,838137,799580,1200.00111053,1200.362167236
c002,4,5,3,430942,431120,412113,1800.0052538730001,1800.584987011
c002,4,5,4,537669,537853,520645,2400.005844726,2400.770351346
c002,4,5,5,348105,348282,333950,3000.00644416,3000.950358374
c002,4,5,6,330773,330958,316766,3600.0064713479996,3601.114704082
c002,4,5,7,299194,299374,286865,4200.006902483,4201.29236116
c002,4,5,8,221085,221266,211733,4800.010163844,4801.443337284
c002,4,5,9,182612,182795,175137,5400.011850880001,5401.641368714
c002,4,5,10,154489,154668,147825,6000.014665626,6001.803940477
c002,4,5,11,104081,104252,99758,6600.027285875,6602.007877088
# search time: 6600.027s
# total time: 33025.245s
