    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.28s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c005_2.json out/1594483387/results/c005_2_best.csv out/1594483387/results/c005_2_predictions.csv out/1594483387/results/c005_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([2, 6, 3, 7, 4, 8, 1, 9, 5, 0]), o: IntList([3]) }
#   Datum { i: IntList([2, 1, 9, 6, 7, 0, 4, 5, 3]), o: IntList([9]) }
#   Datum { i: IntList([1, 6, 5, 8, 3, 4, 2, 7, 0, 9]), o: IntList([6]) }
#   Datum { i: IntList([3, 9, 4, 5, 1, 8, 2, 0, 6, 7]), o: IntList([5]) }
#   Datum { i: IntList([5, 1, 7, 6, 9, 8, 2, 0, 3, 4]), o: IntList([8]) }
#   Datum { i: IntList([4, 1, 9, 6, 3, 2, 5, 0, 8, 7]), o: IntList([3]) }
#   Datum { i: IntList([9, 1, 6, 4, 7, 5, 3, 8, 2, 0]), o: IntList([0]) }
#   Datum { i: IntList([7, 2, 1, 8, 0, 6, 3, 5, 9, 4]), o: IntList([5]) }
#   Datum { i: IntList([6, 1, 2, 8, 5, 4, 7, 9, 3, 0]), o: IntList([7]) }
#   Datum { i: IntList([8, 2, 9, 3, 7, 6, 0, 5, 1, 4]), o: IntList([1]) }
#   Datum { i: IntList([4, 8, 5, 6, 2, 7, 1, 0, 3, 9]), o: IntList([2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c005,0,2,1,1015524,1015525,865925,600.000059066,601.969156356
c005,0,2,2,433284,433455,420277,1200.00053922,1204.783108313
c005,0,2,3,363689,363854,346478,1800.001062798,1806.330249298
c005,0,2,4,244629,244794,237018,2400.005562104,2407.791810321
c005,0,2,5,169399,169570,163380,3000.00668073,3009.208663372
c005,0,2,6,97114,97283,93299,3600.011783138,3610.937114813
c005,0,2,7,81330,81499,77707,4200.016793008,4212.714781477
c005,0,2,8,72564,72734,69108,4800.023345787,4814.462159923
c005,0,2,9,52392,52562,50327,5400.034178602,5416.056261078
c005,0,2,10,42891,43058,41200,6000.044433463,6017.638783238
c005,0,2,11,38583,38753,37024,6600.05312116,6619.057366016
# search time: 6600.053s
# total time: 6619.353s
c005,1,2,1,965330,965331,821211,600.000117748,600.244123096
c005,1,2,2,446861,447028,433043,1200.000512699,1201.163501261
c005,1,2,3,358644,358815,341751,1800.0011776860001,1801.767451857
c005,1,2,4,238215,238376,230895,2400.006444987,2402.471450696
c005,1,2,5,168272,168442,162370,3000.011573775,3003.131871314
c005,1,2,6,101965,102134,97809,3600.0142397,3604.030101921
c005,1,2,7,74032,74199,70844,4200.024326902,4204.952600975
c005,1,2,8,74777,74941,71340,4800.036115604,4805.850617365
c005,1,2,9,50324,50487,48271,5400.050003124999,5406.637651269
c005,1,2,10,40529,40692,38930,6000.060413965999,6007.702967617
c005,1,2,11,36011,36180,34526,6600.0665368009995,6608.623632501
# search time: 6600.067s
# total time: 13228.477s
c005,2,2,1,944841,944842,853071,600.001205561,600.264988828
c005,2,2,2,436027,436193,422854,1200.002384179,1200.865484938
c005,2,2,3,351426,351602,334779,1800.0051744500001,1801.527042399
c005,2,2,4,161704,161874,156771,2400.0067831160004,2401.878333158
c005,2,2,5,168547,168727,162638,3000.008106778,3002.367453666
c005,2,2,6,97901,98071,94040,3600.009923034,3602.949851495
c005,2,2,7,76268,76442,73015,4200.01150517,4203.52868399
c005,2,2,8,70478,70653,67325,4800.0153543040005,4804.360874879
c005,2,2,9,31898,32072,30613,5400.027182554,5404.812225628
c005,2,2,10,32056,32227,30805,6000.037518896001,6005.013572414
c005,2,2,11,37343,37517,35767,6600.0416598580005,6605.588114958
# search time: 6600.042s
# total time: 19834.555s
c005,3,2,1,964465,964466,824940,600.001495786,600.158647972
c005,3,2,2,431506,431677,418361,1200.001513186,1200.621134268
c005,3,2,3,358128,358297,341127,1800.001578195,1800.957686654
c005,3,2,4,241053,241228,233551,2400.001821935,2401.292332471
c005,3,2,5,166555,166736,160653,3000.0038306349998,3001.634410548
c005,3,2,6,100149,100325,96094,3600.005142922,3602.083543332
c005,3,2,7,77341,77519,74085,4200.009861641,4202.560227682
c005,3,2,8,70905,71083,67489,4800.018342873,4802.938587125
c005,3,2,9,51723,51900,49638,5400.030290525,5403.440244244
c005,3,2,10,38720,38895,37122,6000.046530521,6003.940656759
c005,3,2,11,38044,38218,36493,6600.064574144,6604.483326367
# search time: 6600.065s
# total time: 26439.529s
c005,4,2,1,965042,965043,824731,600.000011136,600.157473552
c005,4,2,2,450475,450651,436634,1200.006842374,1200.507908857
c005,4,2,3,361347,361536,344084,1800.008705155,1800.78148574
c005,4,2,4,238770,238952,231323,2400.020683242,2401.105877496
c005,4,2,5,165699,165887,160170,3000.0305764719997,3001.404224408
c005,4,2,6,102981,103157,98790,3600.0333927559996,3601.762198384
c005,4,2,7,81813,81994,78222,4200.033955698999,4202.053648215
c005,4,2,8,75551,75738,72084,4800.043504269999,4802.266500214
c005,4,2,9,47854,48038,45815,5400.045191474999,5402.655994064
c005,4,2,10,42094,42276,40466,6000.056685004999,6003.054407424
c005,4,2,11,34744,34924,33233,6600.070234728999,6603.512744117
# search time: 6600.070s
# total time: 33043.527s
