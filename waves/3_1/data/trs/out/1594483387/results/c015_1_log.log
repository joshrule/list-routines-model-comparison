    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.57s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3_1/json/c015_1.json out/1594483387/results/c015_1_best.csv out/1594483387/results/c015_1_predictions.csv out/1594483387/results/c015_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 4, 5, 5, 4, 3, 3]), o: IntList([4, 3]) }
#   Datum { i: IntList([1, 3, 9, 2, 0, 5, 7, 5, 7, 1]), o: IntList([9, 2, 0]) }
#   Datum { i: IntList([4, 5, 6, 6, 4, 6, 9, 9]), o: IntList([6, 9]) }
#   Datum { i: IntList([1, 1, 3, 2, 3, 4, 5, 6, 5, 1]), o: IntList([3]) }
#   Datum { i: IntList([1, 5, 8, 3, 6, 2, 4, 8, 0]), o: IntList([8, 3, 6, 2, 4]) }
#   Datum { i: IntList([6, 7, 0, 1, 3, 5, 9, 4, 2, 8]), o: IntList([4, 2]) }
#   Datum { i: IntList([2, 4, 9, 0, 7, 6, 0, 9, 0, 4]), o: IntList([0, 7, 6]) }
#   Datum { i: IntList([7, 8, 2, 1, 7, 8, 7, 7, 7, 7]), o: IntList([7, 7]) }
#   Datum { i: IntList([5, 6, 2, 9, 8, 8, 9, 3, 1]), o: IntList([9, 3]) }
#   Datum { i: IntList([1, 4, 7, 7, 5, 1, 9, 5, 7]), o: IntList([7, 7, 5, 1]) }
#   Datum { i: IntList([1, 2, 9, 3, 1, 4, 0, 1, 2, 8]), o: IntList([9, 3]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c015,0,1,1,970680,970681,825126,600.001387447,602.353124303
c015,0,1,2,539980,540167,525725,1200.007433561,1203.816793028
c015,0,1,3,309285,309466,306397,1800.007542652,1805.075930876
c015,0,1,4,181527,181725,179722,2400.008040116,2406.67383414
c015,0,1,5,174791,174977,174303,3000.018069856,3007.978042216
c015,0,1,6,111900,112086,111485,3600.019238558,3609.151252885
c015,0,1,7,89962,90149,89616,4200.03212264,4210.226183348
c015,0,1,8,69033,69223,68854,4800.036028053,4811.658705618
c015,0,1,9,59032,59222,58848,5400.037460386,5412.910310393
c015,0,1,10,46078,46267,45113,6000.054438346,6014.209238392
c015,0,1,11,43748,43937,42735,6600.059036703,6615.612030949
# search time: 6600.059s
# total time: 6615.942s
c015,1,1,1,980671,980672,837290,600.002035879,600.262893027
c015,1,1,2,525756,525933,511550,1200.002373359,1200.776206279
c015,1,1,3,297528,297712,294653,1800.002581438,1801.310011509
c015,1,1,4,182034,182224,180248,2400.00451466,2401.997408488
c015,1,1,5,180384,180568,179608,3000.006372869,3002.572151595
c015,1,1,6,114010,114190,113578,3600.019911831,3603.158364567
c015,1,1,7,89730,89909,89424,4200.021116989,4203.671531035
c015,1,1,8,70879,71061,70614,4800.0258623459995,4804.326495514
c015,1,1,9,59500,59685,59327,5400.036047400999,5405.027219329
c015,1,1,10,50874,51063,49715,6000.037237314999,6005.622483944
c015,1,1,11,40591,40775,39665,6600.048743824999,6606.275692315
# search time: 6600.049s
# total time: 13222.770s
c015,2,1,1,1013956,1013957,865001,600.002735738,600.217428174
c015,2,1,2,520126,520312,505601,1200.003154158,1200.577058044
c015,2,1,3,301614,301795,298855,1800.0032779029998,1800.915342388
c015,2,1,4,190338,190531,188550,2400.003652955,2401.392521063
c015,2,1,5,169850,170046,169444,3000.0052749999995,3001.768792028
c015,2,1,6,114332,114518,114027,3600.0114460549994,3602.100511598
c015,2,1,7,88848,89038,88528,4200.0118238939995,4202.579333769
c015,2,1,8,69300,69494,69113,4800.021069713,4803.037065333
c015,2,1,9,57261,57455,57130,5400.0276579149995,5403.528652457
c015,2,1,10,50416,50605,49257,6000.044549435999,6004.066120038
c015,2,1,11,43693,43886,42639,6600.059290357999,6604.650083422
# search time: 6600.059s
# total time: 19827.974s
c015,3,1,1,985692,985693,844532,600.000093296,600.185688759
c015,3,1,2,531096,531279,517438,1200.000431175,1200.493255154
c015,3,1,3,301057,301241,298376,1800.002555307,1800.78217334
c015,3,1,4,181648,181832,179916,2400.006115571,2401.119969028
c015,3,1,5,169831,170017,169426,3000.007901239,3001.441439949
c015,3,1,6,109729,109908,109340,3600.0093616990002,3601.732200611
c015,3,1,7,87347,87530,87050,4200.017104721001,4201.963785196
c015,3,1,8,67742,67929,67573,4800.017861012,4802.201222286
c015,3,1,9,59783,59968,59578,5400.029929909,5402.586359955
c015,3,1,10,45658,45836,44698,6000.033581601,6003.021797635
c015,3,1,11,40104,40291,39186,6600.045688468001,6603.295802831
# search time: 6600.046s
# total time: 26431.824s
c015,4,1,1,905627,905628,795053,600.001784625,600.20122462
c015,4,1,2,544462,544636,530108,1200.008555043,1200.468095796
c015,4,1,3,307407,307586,304686,1800.0094678229998,1800.709413073
c015,4,1,4,188272,188453,186428,2400.0116663299996,2400.996094841
c015,4,1,5,178716,178894,177917,3000.0137114709996,3001.236834566
c015,4,1,6,111399,111583,111026,3600.0217863249995,3601.46361306
c015,4,1,7,88594,88772,88278,4200.023646629,4201.694680992
c015,4,1,8,68420,68600,68173,4800.035896309,4802.024537546
c015,4,1,9,60286,60462,60026,5400.047472599001,5402.400089071
c015,4,1,10,49366,49546,48297,6000.051257497001,6002.641552454
c015,4,1,11,42324,42501,41313,6600.052291047001,6602.9339893
# search time: 6600.052s
# total time: 33035.295s
