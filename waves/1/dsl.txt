# Wave 1 DSL
#
# Each line below lists <name>/<arity>: <type>.
#
# If you'd prefer to use an applicative system, set all the arities to 0 and
# add an application symbol with type t1. t2 (t1 -> t2) -> t1 -> t2.

# Constructors

# # Booleans
TRUE/0: bool;
FALSE/0: bool;

# # Lists
NIL/0: list;
CONS/2: nat -> list -> list;

# # Numbers
# #
# # 0--99, however that is most easily done in your system.
# # All number have arity 0 and type nat.

# Functions

# # Concept (for e.g. explicit recursion)
C/1: list -> list;

# # Others
EMPTY/1: list -> bool;
EQUAL/2: t0. t0 -> t0 -> bool;
HEAD/1: list -> nat;
IF/3: t0. bool -> t0 -> t0 -> t0;
TAIL/1: list -> list;



# Wave 1 Function Definitions,
#
# The definition of C varies per task, so it isn't listed here.

# # EMPTY
EMPTY NIL = TRUE;
EMPTY (CONS x_ y_) = FALSE;

# # EQUAL
EQUAL x_ x_ = TRUE;
EQUAL x_ y_ = FALSE;

# # HEAD
HEAD (CONS x_ y_) = x_;

# # IF
IF TRUE  x_ y_ = x_;
IF FALSE x_ y_ = y_;

# # TAIL
TAIL (CONS x_ y_) = y_;
