    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.51s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c010_3.json out/1594225984/results/c010_3_best.csv out/1594225984/results/c010_3_predictions.csv out/1594225984/results/c010_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([5, 5, 5, 1, 1, 5]), o: IntList([5, 5, 1, 1, 5]) }
#   Datum { i: IntList([9, 7, 0, 9, 7, 9, 9, 4, 0, 7]), o: IntList([7, 0, 9, 7, 9, 9, 4, 0, 7]) }
#   Datum { i: IntList([3, 8, 3, 3, 8, 3, 3]), o: IntList([8, 3, 3]) }
#   Datum { i: IntList([1, 0, 2, 1, 2]), o: IntList([0]) }
#   Datum { i: IntList([6, 2, 6, 1, 3, 6, 2, 9]), o: IntList([2, 6, 1, 3, 6, 2]) }
#   Datum { i: IntList([4, 4, 4, 4, 4, 4, 4, 4, 4]), o: IntList([4, 4, 4, 4]) }
#   Datum { i: IntList([1, 2, 4, 5, 0, 8, 9, 7, 8]), o: IntList([2]) }
#   Datum { i: IntList([0, 2]), o: IntList([]) }
#   Datum { i: IntList([8, 2, 5, 7, 1, 5, 5, 8, 8, 8]), o: IntList([2, 5, 7, 1, 5, 5, 8, 8]) }
#   Datum { i: IntList([3, 9, 8, 6, 5, 1]), o: IntList([9, 8, 6]) }
#   Datum { i: IntList([2, 3, 2, 7, 6]), o: IntList([3, 2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c010,0,3,1,1086551,1086552,929630,600.000269777,601.89042459
c010,0,3,2,412582,412761,402033,1200.0009450769999,1203.081129554
c010,0,3,3,204700,204880,196320,1800.0031515409999,1803.739512314
c010,0,3,4,149130,149312,148488,2400.0100675999997,2404.664294862
c010,0,3,5,137843,138025,137036,3000.0152942329996,3005.513892512
c010,0,3,6,101345,101523,100905,3600.0157479729996,3606.367859043
c010,0,3,7,83741,83929,83503,4200.017876092,4207.183488383
c010,0,3,8,68232,68414,66643,4800.021915474999,4808.276437377
c010,0,3,9,69340,69524,66856,5400.023925674999,5409.298199785
c010,0,3,10,54555,54735,52330,6000.038210375999,6010.260414703
c010,0,3,11,43723,43896,41922,6600.045034751,6611.509347235
# search time: 6600.045s
# total time: 6611.851s
c010,1,3,1,968911,968912,850303,600.001052354,600.325719853
c010,1,3,2,437929,438097,425097,1200.001325044,1200.770404941
c010,1,3,3,201641,201815,194345,1800.005691973,1801.052219893
c010,1,3,4,140550,140719,140098,2400.00840575,2401.470081019
c010,1,3,5,136538,136716,135753,3000.012853242,3001.870590711
c010,1,3,6,94305,94476,94065,3600.01431374,3602.254029087
c010,1,3,7,82796,82973,82580,4200.018118023,4202.646297345
c010,1,3,8,69656,69828,68064,4800.02754625,4803.16677641
c010,1,3,9,77256,77428,74804,5400.030916533,5403.689614487
c010,1,3,10,60699,60873,58581,6000.031850135,6004.232141594
c010,1,3,11,49748,49922,47762,6600.046947699,6604.92469039
# search time: 6600.047s
# total time: 13217.336s
c010,2,3,1,1128303,1128304,1010505,600.001219706,600.321533403
c010,2,3,2,431718,431872,418507,1200.001373302,1200.597397545
c010,2,3,3,200828,200991,193569,1800.003263879,1800.763662238
c010,2,3,4,138151,138317,137750,2400.0032684850003,2401.078137499
c010,2,3,5,128595,128759,128055,3000.009204926,3001.349305294
c010,2,3,6,92906,93069,92651,3600.0097497200004,3601.604205968
c010,2,3,7,82243,82407,81973,4200.012107146001,4201.91898859
c010,2,3,8,68758,68920,67161,4800.013307233001,4802.308171019
c010,2,3,9,66619,66781,64521,5400.023810458001,5402.685636977
c010,2,3,10,52932,53088,50757,6000.035019182002,6003.064314556
c010,2,3,11,42862,43021,41129,6600.0523142030015,6603.451892939
# search time: 6600.052s
# total time: 19821.488s
c010,3,3,1,1059151,1059152,906485,600.000354166,600.19148589
c010,3,3,2,421451,421631,409420,1200.000630353,1200.41989463
c010,3,3,3,190679,190863,182632,1800.0026118669998,1800.566267553
c010,3,3,4,145554,145738,144973,2400.004459037,2400.746359977
c010,3,3,5,134467,134652,133646,3000.0057559029997,3000.949774072
c010,3,3,6,99716,99898,99351,3600.006840877,3601.152195658
c010,3,3,7,82484,82672,82252,4200.008337204999,4201.386819713
c010,3,3,8,67668,67852,66168,4800.043105891,4801.701370467
c010,3,3,9,67825,68008,65384,5400.049756728,5401.953610108
c010,3,3,10,51737,51923,49618,6000.05740222,6002.134517852
c010,3,3,11,43645,43828,41885,6600.078117145,6602.322200217
# search time: 6600.078s
# total time: 26424.125s
c010,4,3,1,1045405,1045406,941039,600.000514301,600.313080493
c010,4,3,2,414309,414479,401985,1200.001368752,1200.566414552
c010,4,3,3,192115,192295,185097,1800.001936399,1800.709721107
c010,4,3,4,131057,131232,130686,2400.003634189,2400.916603285
c010,4,3,5,126881,127057,126114,3000.014317781,3001.107980148
c010,4,3,6,88839,89010,88630,3600.017724566,3601.322780865
c010,4,3,7,74197,74377,74141,4200.018929214,4201.500048212
c010,4,3,8,65505,65681,63952,4800.039043882,4801.787643528
c010,4,3,9,65686,65860,63413,5400.042429838,5402.019716186
c010,4,3,10,50936,51114,48863,6000.0516061,6002.237355435
c010,4,3,11,42021,42182,40274,6600.064422472,6602.494226931
# search time: 6600.064s
# total time: 33027.178s
