    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.55s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c040_3.json out/1594225984/results/c040_3_best.csv out/1594225984/results/c040_3_predictions.csv out/1594225984/results/c040_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([2, 9, 0, 5, 7]), o: IntList([2, 9, 0, 5, 7, 9]) }
#   Datum { i: IntList([9, 4, 1, 3, 2, 0, 6, 8]), o: IntList([9, 4, 1, 3, 2, 0, 6, 8]) }
#   Datum { i: IntList([0, 0, 0]), o: IntList([0, 0, 0]) }
#   Datum { i: IntList([4, 4, 7, 3, 5, 4]), o: IntList([4, 4, 7, 3, 5, 4, 3]) }
#   Datum { i: IntList([1, 9, 2, 2, 3, 1, 4, 6, 6, 9]), o: IntList([1, 9, 2, 2, 3, 1, 4, 6, 6, 9, 9]) }
#   Datum { i: IntList([0, 9, 0, 9]), o: IntList([0, 9, 0, 9, 9]) }
#   Datum { i: IntList([0, 1, 2, 6, 3, 9, 5, 7, 2, 0]), o: IntList([0, 1, 2, 6, 3, 9, 5, 7, 2, 0]) }
#   Datum { i: IntList([6, 6, 9, 3, 9, 6, 9, 6]), o: IntList([6, 6, 9, 3, 9, 6, 9, 6, 3]) }
#   Datum { i: IntList([6, 1, 0, 0]), o: IntList([6, 1, 0, 0]) }
#   Datum { i: IntList([4, 6, 8, 4, 7]), o: IntList([4, 6, 8, 4, 7, 3]) }
#   Datum { i: IntList([1, 1, 2]), o: IntList([1, 1, 2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c040,0,3,1,1045006,1045007,892123,600.000034012,601.925107921
c040,0,3,2,379031,379223,369171,1200.0010557800001,1203.12701795
c040,0,3,3,193949,194134,191083,1800.0039101450002,1804.20531685
c040,0,3,4,191426,191616,187866,2400.005044848,2404.788962671
c040,0,3,5,136990,137183,136067,3000.0055188650003,3005.415777982
c040,0,3,6,77412,77598,77044,3600.0125214000004,3606.158075013
c040,0,3,7,72080,72283,71758,4200.0167469610005,4206.804806522
c040,0,3,8,55849,56045,55661,4800.018704033,4807.424819203
c040,0,3,9,44112,44308,43904,5400.020152555,5408.25382121
c040,0,3,10,41747,41938,41668,6000.030808949,6008.992872088
c040,0,3,11,39389,39573,39260,6600.03985084,6609.689626869
# search time: 6600.040s
# total time: 6610.083s
c040,1,3,1,983551,983552,871558,600.000145523,600.393772968
c040,1,3,2,384666,384829,374654,1200.0054019220001,1200.855826878
c040,1,3,3,199714,199879,197502,1800.006604228,1801.199135823
c040,1,3,4,190261,190421,186715,2400.0074912600003,2401.488564478
c040,1,3,5,135570,135734,134663,3000.008213463,3001.816684332
c040,1,3,6,76488,76648,76105,3600.0084863320003,3602.218720143
c040,1,3,7,71657,71820,71294,4200.008671623,4202.532241969
c040,1,3,8,54531,54694,54328,4800.010581532,4802.847188035
c040,1,3,9,52506,52664,52209,5400.013366287,5403.305000884
c040,1,3,10,48446,48611,48295,6000.020800135,6003.657008427
c040,1,3,11,43307,43474,43132,6600.041863268,6604.152374582
# search time: 6600.042s
# total time: 13214.907s
c040,2,3,1,1025000,1025001,897165,600.000041694,600.315858924
c040,2,3,2,368308,368478,358401,1200.0004759839999,1200.616367855
c040,2,3,3,192569,192741,190135,1800.002227023,1800.902482889
c040,2,3,4,185903,186074,182564,2400.002867421,2401.092421862
c040,2,3,5,131948,132121,131102,3000.0054081069998,3001.302730698
c040,2,3,6,73839,74000,73487,3600.0061731789997,3601.582252634
c040,2,3,7,69224,69397,68845,4200.009024205,4201.854606338
c040,2,3,8,53252,53420,53050,4800.009505566,4802.092330451
c040,2,3,9,43700,43875,43460,5400.043489558,5402.37925944
c040,2,3,10,39762,39932,39711,6000.051863026,6002.719877779
c040,2,3,11,37652,37820,37531,6600.054404724,6602.924081811
# search time: 6600.054s
# total time: 19818.530s
c040,3,3,1,931863,931864,831010,600.000141175,600.236640417
c040,3,3,2,370851,371015,361093,1200.003094399,1200.488828367
c040,3,3,3,193637,193809,191387,1800.003301206,1800.690513459
c040,3,3,4,183993,184158,180602,2400.017176833,2400.847819652
c040,3,3,5,129088,129256,128342,3000.023995044,3001.0584219
c040,3,3,6,73997,74155,73622,3600.027615524,3601.297132593
c040,3,3,7,69152,69321,68787,4200.035289265,4201.52788098
c040,3,3,8,52689,52863,52505,4800.042174409,4801.679309403
c040,3,3,9,43109,43277,42861,5400.049816268,5401.930644202
c040,3,3,10,40931,41102,40845,6000.05232174,6002.110236538
c040,3,3,11,38043,38213,37945,6600.060686676,6602.27185701
# search time: 6600.061s
# total time: 26421.592s
c040,4,3,1,974152,974153,832816,600.000283255,600.185777904
c040,4,3,2,356879,357051,347447,1200.000437655,1200.392019447
c040,4,3,3,184933,185110,182282,1800.000504776,1800.579236666
c040,4,3,4,182498,182673,179164,2400.002650808,2400.784050105
c040,4,3,5,129784,129963,128963,3000.00881201,3000.955498919
c040,4,3,6,74157,74336,73811,3600.01152516,3601.1912599
c040,4,3,7,67416,67600,67091,4200.013345434,4201.399335037
c040,4,3,8,52818,53000,52661,4800.019648756001,4801.573305326
c040,4,3,9,42204,42384,41985,5400.027856823001,5401.755478432
c040,4,3,10,40389,40567,40285,6000.043630540001,6001.866421905
c040,4,3,11,37097,37274,37036,6600.043773183001,6602.033216761
# search time: 6600.044s
# total time: 33024.151s
