    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.60s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c070_1.json out/1594225984/results/c070_1_best.csv out/1594225984/results/c070_1_predictions.csv out/1594225984/results/c070_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 2, 0, 9]), o: IntList([3, 2, 0, 9, 3, 2, 0, 9]) }
#   Datum { i: IntList([7, 1, 1, 2, 1, 2]), o: IntList([7, 1, 1, 2, 1, 2, 7, 1, 1, 2, 1, 2]) }
#   Datum { i: IntList([7]), o: IntList([7, 7]) }
#   Datum { i: IntList([0, 8, 4, 3, 6, 8, 4]), o: IntList([0, 8, 4, 3, 6, 8, 4, 0, 8, 4, 3, 6, 8, 4]) }
#   Datum { i: IntList([5, 5]), o: IntList([5, 5, 5, 5]) }
#   Datum { i: IntList([4, 3, 5]), o: IntList([4, 3, 5, 4, 3, 5]) }
#   Datum { i: IntList([4, 4, 4, 4, 4]), o: IntList([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) }
#   Datum { i: IntList([9, 0, 3, 3, 3, 1, 9]), o: IntList([9, 0, 3, 3, 3, 1, 9, 9, 0, 3, 3, 3, 1, 9]) }
#   Datum { i: IntList([6, 7, 0, 9, 1, 8]), o: IntList([6, 7, 0, 9, 1, 8, 6, 7, 0, 9, 1, 8]) }
#   Datum { i: IntList([7, 6, 9, 0, 5, 1, 2]), o: IntList([7, 6, 9, 0, 5, 1, 2, 7, 6, 9, 0, 5, 1, 2]) }
#   Datum { i: IntList([5, 2, 7, 8, 3, 2]), o: IntList([5, 2, 7, 8, 3, 2, 5, 2, 7, 8, 3, 2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c070,0,1,1,1040806,1040807,928215,600.003017863,602.628074905
c070,0,1,2,309704,309871,301266,1200.0035521119999,1203.763150849
c070,0,1,3,146450,146616,145316,1800.0080411119998,1804.684058782
c070,0,1,4,140455,140629,139893,2400.0116794749997,2405.363425991
c070,0,1,5,82918,83099,82752,3000.015856964,3005.915951231
c070,0,1,6,74066,74241,73843,3600.0171119859997,3606.575181493
c070,0,1,7,68439,68616,68343,4200.045093942999,4207.064422639
c070,0,1,8,54900,55072,54859,4800.052216188999,4807.605017477
c070,0,1,9,43992,44168,43944,5400.081416378,5408.141287012
c070,0,1,10,37116,37292,37083,6000.10518658,6008.693243689
c070,0,1,11,30558,30738,30535,6600.121045608,6609.191103563
# search time: 6600.121s
# total time: 6609.527s
c070,1,1,1,957924,957925,840153,600.000544543,600.357848532
c070,1,1,2,300712,300882,292156,1200.0018536060002,1200.816187137
c070,1,1,3,141850,142027,140670,1800.003387919,1801.216242911
c070,1,1,4,139689,139869,139090,2400.0035411970002,2401.52002029
c070,1,1,5,82072,82247,81998,3000.0069311720003,3001.85585665
c070,1,1,6,73604,73782,73339,3600.0112347120003,3602.157190792
c070,1,1,7,67547,67725,67505,4200.012463799,4202.430168184
c070,1,1,8,55274,55450,55171,4800.0192135180005,4802.636008447
c070,1,1,9,51166,51348,51078,5400.023337007,5402.936608622
c070,1,1,10,42869,43049,42796,6000.030543206,6003.217617515
c070,1,1,11,35139,35324,35093,6600.037539100001,6603.534799379
# search time: 6600.038s
# total time: 13213.721s
c070,2,1,1,1204095,1204096,1094540,600.00277116,600.342004962
c070,2,1,2,296074,296248,288088,1200.0029110599999,1200.648136502
c070,2,1,3,140841,141009,139743,1800.003350169,1800.942410506
c070,2,1,4,134738,134908,134178,2400.006375896,2401.164414386
c070,2,1,5,79459,79634,79311,3000.0063848170003,3001.364110021
c070,2,1,6,70933,71108,70759,3600.0178139340005,3601.607456666
c070,2,1,7,65633,65816,65562,4200.024145818001,4201.801219137
c070,2,1,8,53211,53388,53107,4800.040620456,4801.994503585
c070,2,1,9,42041,42211,41992,5400.044787715,5402.147566632
c070,2,1,10,35659,35829,35613,6000.047116946,6002.330220271
c070,2,1,11,29085,29259,29063,6600.052101288,6602.561010621
# search time: 6600.052s
# total time: 19816.619s
c070,3,1,1,1021204,1021205,872109,600.014227766,600.217784741
c070,3,1,2,289532,289713,281692,1200.0148616000001,1200.458595948
c070,3,1,3,136297,136479,135313,1800.0195528080003,1800.66975638
c070,3,1,4,135117,135304,134618,2400.0207824460003,2400.828144892
c070,3,1,5,79416,79604,79268,3000.0242449940006,3000.997693538
c070,3,1,6,69548,69733,69385,3600.0288302590006,3601.136341394
c070,3,1,7,64699,64882,64679,4200.033721783,4201.271470649
c070,3,1,8,50980,51165,50966,4800.035104762001,4801.453472709
c070,3,1,9,41167,41353,41165,5400.043230053001,5401.613182883
c070,3,1,10,35494,35677,35465,6000.048181236001,6001.705610694
c070,3,1,11,29416,29598,29403,6600.067717286001,6601.88615172
# search time: 6600.068s
# total time: 26419.201s
c070,4,1,1,979578,979579,877010,600.000105079,600.286353682
c070,4,1,2,298870,299030,290358,1200.009839534,1200.49220748
c070,4,1,3,137465,137630,136200,1800.009973764,1800.683820273
c070,4,1,4,135121,135299,134563,2400.015732929,2400.81021642
c070,4,1,5,79408,79586,79354,3000.019697627,3000.966307914
c070,4,1,6,70351,70527,70194,3600.023147386,3601.087204569
c070,4,1,7,66422,66596,66338,4200.0288474339995,4201.214705391
c070,4,1,8,53660,53830,53597,4800.034379543999,4801.343927162
c070,4,1,9,42848,43017,42778,5400.036165402999,5401.42204108
c070,4,1,10,35123,35289,35116,6000.0451674549995,6001.544513042
c070,4,1,11,29587,29753,29546,6600.051132690999,6601.63329026
# search time: 6600.051s
# total time: 33021.394s
