    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.66s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c070_5.json out/1594225984/results/c070_5_best.csv out/1594225984/results/c070_5_predictions.csv out/1594225984/results/c070_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 7, 0, 9, 1, 8]), o: IntList([6, 7, 0, 9, 1, 8, 6, 7, 0, 9, 1, 8]) }
#   Datum { i: IntList([7, 1, 1, 2, 1, 2]), o: IntList([7, 1, 1, 2, 1, 2, 7, 1, 1, 2, 1, 2]) }
#   Datum { i: IntList([4, 4, 4, 4, 4]), o: IntList([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) }
#   Datum { i: IntList([9, 0, 3, 3, 3, 1, 9]), o: IntList([9, 0, 3, 3, 3, 1, 9, 9, 0, 3, 3, 3, 1, 9]) }
#   Datum { i: IntList([4, 3, 5]), o: IntList([4, 3, 5, 4, 3, 5]) }
#   Datum { i: IntList([5, 5]), o: IntList([5, 5, 5, 5]) }
#   Datum { i: IntList([5, 2, 7, 8, 3, 2]), o: IntList([5, 2, 7, 8, 3, 2, 5, 2, 7, 8, 3, 2]) }
#   Datum { i: IntList([7]), o: IntList([7, 7]) }
#   Datum { i: IntList([3, 2, 0, 9]), o: IntList([3, 2, 0, 9, 3, 2, 0, 9]) }
#   Datum { i: IntList([0, 8, 4, 3, 6, 8, 4]), o: IntList([0, 8, 4, 3, 6, 8, 4, 0, 8, 4, 3, 6, 8, 4]) }
#   Datum { i: IntList([7, 6, 9, 0, 5, 1, 2]), o: IntList([7, 6, 9, 0, 5, 1, 2, 7, 6, 9, 0, 5, 1, 2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c070,0,5,1,968572,968573,823117,600.000033118,602.136687893
c070,0,5,2,204543,204725,198748,1200.001793741,1203.555855671
c070,0,5,3,116412,116599,114393,1800.00327422,1804.707589272
c070,0,5,4,74719,74908,74329,2400.006691617,2406.185205969
c070,0,5,5,48171,48360,48108,3000.021790744,3007.876641896
c070,0,5,6,58493,58682,58384,3600.023633185,3608.637112571
c070,0,5,7,54753,54944,54684,4200.026510478,4209.328064968
c070,0,5,8,45490,45678,45452,4800.031005337,4810.001029172
c070,0,5,9,43580,43775,43500,5400.045136415,5410.707133577
c070,0,5,10,38795,38986,38759,6000.081253219,6011.367753594
c070,0,5,11,32108,32301,32123,6600.098510854,6612.093538677
# search time: 6600.099s
# total time: 6612.440s
c070,1,5,1,949634,949635,847590,600.001842277,600.383698045
c070,1,5,2,207770,207931,201965,1200.004403801,1200.923702687
c070,1,5,3,116215,116376,114241,1800.00759355,1801.396300437
c070,1,5,4,86126,86296,85703,2400.007627676,2401.821303135
c070,1,5,5,59033,59204,58964,3000.0190221370003,3002.266014395
c070,1,5,6,57009,57172,56946,3600.0215818510005,3602.615549053
c070,1,5,7,54500,54672,54398,4200.024150174,4202.993892625
c070,1,5,8,45608,45782,45540,4800.029895673,4803.338305099
c070,1,5,9,54647,54826,54550,5400.038011846,5403.594775295
c070,1,5,10,50692,50865,50627,6000.0454093749995,6003.929218737
c070,1,5,11,41788,41962,41733,6600.077058297999,6604.304691496
# search time: 6600.077s
# total time: 13217.363s
c070,2,5,1,1148972,1148973,980613,600.001149277,600.250695411
c070,2,5,2,202034,202211,196396,1200.002651248,1200.592514892
c070,2,5,3,110917,111099,109138,1800.007028429,1800.928841987
c070,2,5,4,84644,84835,84238,2400.017651477,2401.244971592
c070,2,5,5,57693,57884,57628,3000.01776994,3001.550928813
c070,2,5,6,56481,56680,56425,3600.017971236,3601.811104227
c070,2,5,7,52992,53182,52948,4200.021804779,4202.018434155
c070,2,5,8,44093,44283,44061,4800.037198105,4802.19384983
c070,2,5,9,42043,42230,42015,5400.062483495,5402.44016407
c070,2,5,10,36734,36923,36759,6000.0742941710005,6002.708715701
c070,2,5,11,29215,29405,29273,6600.085567771001,6602.961276682
# search time: 6600.086s
# total time: 19820.985s
c070,3,5,1,948867,948868,842652,600.000208288,600.267578498
c070,3,5,2,197738,197909,192148,1200.000415867,1200.505698776
c070,3,5,3,108032,108204,106310,1800.0013670619999,1800.781266932
c070,3,5,4,82379,82552,81930,2400.001773058,2401.046864913
c070,3,5,5,56554,56725,56484,3000.012075072,3001.375269127
c070,3,5,6,54405,54571,54363,3600.0238093899998,3601.61409602
c070,3,5,7,50923,51096,50907,4200.029234468,4201.810121613
c070,3,5,8,42518,42691,42564,4800.041486038001,4801.959769262
c070,3,5,9,40239,40416,40239,5400.043223287001,5402.199897497
c070,3,5,10,36048,36225,36054,6000.0560073550005,6002.354954023
c070,3,5,11,29576,29751,29596,6600.056696256001,6602.703005836
# search time: 6600.057s
# total time: 26424.513s
c070,4,5,1,897808,897809,793564,600.000113822,600.220854553
c070,4,5,2,200243,200402,194574,1200.002302112,1200.431384722
c070,4,5,3,107411,107578,105678,1800.002870904,1800.6414222
c070,4,5,4,78676,78842,78359,2400.006469866,2400.826001308
c070,4,5,5,53849,54017,53863,3000.010693047,3001.104623865
c070,4,5,6,55379,55546,55282,3600.01771529,3601.225250412
c070,4,5,7,52030,52198,51943,4200.025039677,4201.362041823
c070,4,5,8,43380,43539,43278,4800.02926494,4801.500815515
c070,4,5,9,40428,40601,40320,5400.037604448,5401.669888364
c070,4,5,10,36305,36478,36288,6000.041836834,6001.813238226
c070,4,5,11,30706,30875,30694,6600.043832003,6601.909568008
# search time: 6600.044s
# total time: 33026.865s
