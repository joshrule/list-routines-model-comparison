    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.49s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c028_1.json out/1594225984/results/c028_1_best.csv out/1594225984/results/c028_1_predictions.csv out/1594225984/results/c028_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([5, 8, 1, 0]), o: IntList([5, 8, 0]) }
#   Datum { i: IntList([7, 8, 6, 1, 2]), o: IntList([7, 8, 1, 2]) }
#   Datum { i: IntList([1, 8, 5, 4, 3, 2, 0, 6, 7, 9]), o: IntList([1, 5, 4, 3, 2, 0, 6, 7, 9]) }
#   Datum { i: IntList([5, 3, 0]), o: IntList([5, 3]) }
#   Datum { i: IntList([4, 3, 9, 5, 1, 7, 2]), o: IntList([4, 9, 5, 1, 7, 2]) }
#   Datum { i: IntList([6, 9, 9, 6, 5, 9]), o: IntList([6, 9, 6, 5, 9]) }
#   Datum { i: IntList([2, 2, 1, 1, 6, 8, 5, 3, 8]), o: IntList([2, 2, 1, 6, 8, 5, 3, 8]) }
#   Datum { i: IntList([9, 3, 6, 3, 8, 3, 1, 7, 5, 4]), o: IntList([9, 3, 3, 8, 3, 1, 7, 5, 4]) }
#   Datum { i: IntList([4, 6, 6, 6, 4, 4, 4, 4]), o: IntList([4, 6, 6, 4, 4, 4, 4]) }
#   Datum { i: IntList([2, 7, 0, 7]), o: IntList([2, 7, 7]) }
#   Datum { i: IntList([0, 1, 8, 0, 0]), o: IntList([0, 8, 0, 0]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c028,0,1,1,1068745,1068746,950167,600.004552688,602.537895017
c028,0,1,2,546143,546305,531299,1200.005173716,1203.666941762
c028,0,1,3,326171,326336,314173,1800.005557083,1804.231795296
c028,0,1,4,156751,156911,155902,2400.0060352689998,2405.175521882
c028,0,1,5,159791,159954,158865,3000.0165839109995,3005.797804919
c028,0,1,6,118162,118336,117005,3600.0212145979995,3606.374067872
c028,0,1,7,96074,96242,95129,4200.029384379,4207.049275224
c028,0,1,8,73413,73585,72601,4800.038349441999,4807.739128859
c028,0,1,9,56172,56346,55699,5400.0413052389995,5408.576105182
c028,0,1,10,45944,46112,45519,6000.04221582,6009.324005449
c028,0,1,11,45109,45278,44677,6600.043372714,6609.928592414
# search time: 6600.043s
# total time: 6610.307s
c028,1,1,1,961278,961279,842588,600.006996675,600.297365428
c028,1,1,2,539916,540082,525438,1200.007699914,1200.732357942
c028,1,1,3,332761,332936,319738,1800.008119471,1800.993868863
c028,1,1,4,154845,155021,153998,2400.008154045,2401.372828536
c028,1,1,5,156845,157020,155985,3000.011330114,3001.668933387
c028,1,1,6,117152,117331,116155,3600.011778121,3602.010860685
c028,1,1,7,96333,96509,95262,4200.015102312,4202.299624012
c028,1,1,8,73544,73721,72741,4800.031612711,4802.643694052
c028,1,1,9,63849,64029,63243,5400.036765614,5402.955954378
c028,1,1,10,54690,54867,54148,6000.042912164,6003.316392282
c028,1,1,11,50584,50767,50021,6600.0507268149995,6603.737322084
# search time: 6600.051s
# total time: 13214.703s
c028,2,1,1,1105314,1105315,996464,600.007887227,600.319200571
c028,2,1,2,534879,535053,520776,1200.008793033,1200.613353679
c028,2,1,3,319280,319456,307748,1800.0088355050002,1800.788161934
c028,2,1,4,160005,160173,159126,2400.0163347760003,2401.090821611
c028,2,1,5,155040,155218,154096,3000.0165250830005,3001.308878018
c028,2,1,6,117287,117466,116310,3600.0186303000005,3601.504088835
c028,2,1,7,95661,95832,94609,4200.0226896,4201.697272103
c028,2,1,8,72620,72800,71802,4800.023349928,4801.895662145
c028,2,1,9,55739,55918,55195,5400.026895779,5402.135417124
c028,2,1,10,45765,45939,45382,6000.0294895140005,6002.430957309
c028,2,1,11,43477,43651,43004,6600.032163785,6602.748659098
# search time: 6600.032s
# total time: 19818.128s
c028,3,1,1,1019661,1019662,912655,600.007381472,600.274725174
c028,3,1,2,524210,524373,510227,1200.0122567409999,1200.52838502
c028,3,1,3,326282,326456,313927,1800.0136274259999,1800.681751049
c028,3,1,4,158723,158902,157835,2400.0168148039998,2400.891396724
c028,3,1,5,153594,153774,152636,3000.0202630159997,3001.018617422
c028,3,1,6,116422,116597,115279,3600.0209259529997,3601.191891239
c028,3,1,7,95007,95189,93921,4200.025268623,4201.347346414
c028,3,1,8,70552,70730,69779,4800.035223049999,4801.521325891
c028,3,1,9,55598,55778,55062,5400.043753984999,5401.681282369
c028,3,1,10,46317,46497,45874,6000.046783267999,6001.902181066
c028,3,1,11,44647,44825,44216,6600.050508572998,6602.13829675
# search time: 6600.051s
# total time: 26420.896s
c028,4,1,1,1024422,1024423,916473,600.005557148,600.217872262
c028,4,1,2,539642,539806,525687,1200.0062693559998,1200.432962343
c028,4,1,3,316265,316433,304592,1800.0063329339998,1800.57258448
c028,4,1,4,150250,150416,149413,2400.009663605,2400.770095453
c028,4,1,5,152902,153069,152017,3000.0105947959996,3000.896427976
c028,4,1,6,114786,114959,113673,3600.0132987069996,3601.041775592
c028,4,1,7,94104,94268,93087,4200.019688116,4201.180296063
c028,4,1,8,70894,71060,70123,4800.024318702,4801.338307176
c028,4,1,9,54796,54961,54238,5400.0251776489995,5401.469127506
c028,4,1,10,46598,46754,46126,6000.031950719999,6001.656703614
c028,4,1,11,44701,44868,44278,6600.046605035999,6601.805108831
# search time: 6600.047s
# total time: 33023.311s
