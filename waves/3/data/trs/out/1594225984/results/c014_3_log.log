    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.60s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c014_3.json out/1594225984/results/c014_3_best.csv out/1594225984/results/c014_3_predictions.csv out/1594225984/results/c014_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([2, 3, 0]), o: IntList([0]) }
#   Datum { i: IntList([9, 9, 4, 4, 9, 4]), o: IntList([4, 4, 9, 4]) }
#   Datum { i: IntList([0, 7, 9, 6, 1, 8, 2, 3]), o: IntList([9, 6, 1, 8, 2]) }
#   Datum { i: IntList([9, 9]), o: IntList([]) }
#   Datum { i: IntList([3, 0, 5, 7, 7, 5, 3, 0, 5]), o: IntList([5, 7, 7, 5, 3]) }
#   Datum { i: IntList([6, 3, 0, 4]), o: IntList([0, 4]) }
#   Datum { i: IntList([1, 0, 0, 1, 1]), o: IntList([0, 1, 1]) }
#   Datum { i: IntList([9, 9, 1]), o: IntList([1]) }
#   Datum { i: IntList([9]), o: IntList([]) }
#   Datum { i: IntList([4, 2, 3, 3, 6, 7, 8]), o: IntList([3, 3, 6, 7, 8]) }
#   Datum { i: IntList([5, 4, 5, 8, 6, 2, 8]), o: IntList([5, 8, 6, 2, 8]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c014,0,3,1,1077477,1077478,966544,600.000091682,602.591438154
c014,0,3,2,785744,785916,763330,1200.000242731,1203.698316797
c014,0,3,3,395375,395558,382514,1800.001115998,1804.219349853
c014,0,3,4,235068,235242,233562,2400.002699288,2405.008350154
c014,0,3,5,247933,248110,241785,3000.003676927,3005.585386087
c014,0,3,6,149273,149449,145511,3600.005581684,3606.302745118
c014,0,3,7,144670,144840,141037,4200.009836752,4206.883168305
c014,0,3,8,110230,110401,106542,4800.011199126,4807.672225752
c014,0,3,9,115256,115426,111285,5400.014306335,5408.204310617
c014,0,3,10,112133,112307,108545,6000.016645569,6008.71008225
c014,0,3,11,90023,90195,86637,6600.022514597,6609.228586316
# search time: 6600.023s
# total time: 6609.651s
c014,1,3,1,1075445,1075446,972237,600.000134751,600.342960017
c014,1,3,2,774570,774742,752819,1200.001935755,1200.781073823
c014,1,3,3,406500,406665,393796,1800.002133472,1801.04505529
c014,1,3,4,239565,239740,238038,2400.004241007,2401.378676799
c014,1,3,5,257663,257844,251449,3000.004898024,3001.654672568
c014,1,3,6,146629,146798,142972,3600.006578095,3601.975422085
c014,1,3,7,143450,143622,139531,4200.007046989,4202.271490811
c014,1,3,8,119947,120124,115928,4800.0096223479995,4802.661135761
c014,1,3,9,127245,127418,122884,5400.019263452999,5402.946416842
c014,1,3,10,122856,123029,118588,6000.021193862,6003.192540475
c014,1,3,11,98699,98872,95465,6600.024192479,6603.478930537
# search time: 6600.024s
# total time: 13213.845s
c014,2,3,1,1214170,1214171,1086190,600.000615552,600.2879521
c014,2,3,2,959857,960025,932710,1200.000734706,1200.662582329
c014,2,3,3,512562,512734,496017,1800.006413763,1800.878960291
c014,2,3,4,287915,288078,286359,2400.0065308929998,2401.115598896
c014,2,3,5,319634,319814,311627,3000.007632547,3001.336190477
c014,2,3,6,188126,188299,183307,3600.018406132,3601.572701641
c014,2,3,7,180429,180611,175518,4200.018767754,4201.774479675
c014,2,3,8,139573,139750,135087,4800.020132678,4801.998352204
c014,2,3,9,146169,146346,141224,5400.023184393,5402.182076708
c014,2,3,10,141368,141547,136518,6000.0243334199995,6002.346659177
c014,2,3,11,113074,113251,108871,6600.028318219999,6602.517392862
# search time: 6600.028s
# total time: 19817.091s
c014,3,3,1,1325856,1325857,1186812,600.000049156,600.30331751
c014,3,3,2,942519,942691,915693,1200.005511123,1200.60901207
c014,3,3,3,498306,498477,481689,1800.0064505149999,1800.775570096
c014,3,3,4,287964,288136,286360,2400.007096429,2400.988309582
c014,3,3,5,323382,323556,315291,3000.0075313919997,3001.143116214
c014,3,3,6,189896,190064,184987,3600.0089698599995,3601.329495197
c014,3,3,7,181238,181407,176219,4200.0106312259995,4201.504760559
c014,3,3,8,139143,139318,134733,4800.010669107,4801.689965087
c014,3,3,9,144836,145000,140434,5400.021719881,5401.836384137
c014,3,3,10,138268,138438,133420,6000.022934049,6001.972796208
c014,3,3,11,114211,114387,110157,6600.027810856,6602.130668067
# search time: 6600.028s
# total time: 26419.999s
c014,4,3,1,1284298,1284299,1149451,600.001654194,600.311518622
c014,4,3,2,944110,944275,917390,1200.001758201,1200.585970325
c014,4,3,3,504114,504280,487621,1800.00253301,1800.740269383
c014,4,3,4,285640,285807,284030,2400.002722156,2400.891879001
c014,4,3,5,327156,327324,319194,3000.0030496729996,3001.042641597
c014,4,3,6,188416,188578,183543,3600.0041416809995,3601.228400165
c014,4,3,7,182667,182837,177728,4200.005330774,4201.352385486
c014,4,3,8,140449,140609,135936,4800.007145506,4801.484957191
c014,4,3,9,148414,148578,143799,5400.008537553999,5401.59111508
c014,4,3,10,142164,142329,137809,6000.009980462999,6001.708329185
c014,4,3,11,112391,112557,108416,6600.013684794999,6601.835448778
# search time: 6600.014s
# total time: 33022.637s
