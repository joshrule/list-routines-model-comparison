    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.63s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c035_2.json out/1594225984/results/c035_2_best.csv out/1594225984/results/c035_2_predictions.csv out/1594225984/results/c035_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 5, 4, 4]), o: IntList([6, 4, 5, 4]) }
#   Datum { i: IntList([9, 9, 6, 2, 0, 2, 6, 0, 4]), o: IntList([2, 9, 6, 9, 0, 2, 6, 0, 4]) }
#   Datum { i: IntList([3, 1, 3, 3, 1, 1, 1]), o: IntList([3, 3, 1, 3, 1, 1, 1]) }
#   Datum { i: IntList([7, 6, 7, 6, 6, 7]), o: IntList([6, 6, 7, 7, 6, 7]) }
#   Datum { i: IntList([0, 8, 2, 8, 6, 8, 0, 2, 0, 2]), o: IntList([8, 8, 2, 0, 6, 8, 0, 2, 0, 2]) }
#   Datum { i: IntList([7, 3, 3, 3, 1, 9, 2, 7]), o: IntList([3, 3, 3, 7, 1, 9, 2, 7]) }
#   Datum { i: IntList([4, 6, 7, 8]), o: IntList([4, 7, 6, 8]) }
#   Datum { i: IntList([9, 0, 7, 6, 4, 1, 1, 6, 4]), o: IntList([6, 0, 7, 9, 4, 1, 1, 6, 4]) }
#   Datum { i: IntList([9, 6, 9, 5, 3]), o: IntList([9, 9, 6, 5, 3]) }
#   Datum { i: IntList([9, 4, 6, 4, 4, 9]), o: IntList([4, 4, 6, 9, 4, 9]) }
#   Datum { i: IntList([7, 8, 6, 5, 1, 3, 2]), o: IntList([7, 6, 8, 5, 1, 3, 2]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c035,0,2,1,993295,993296,880366,600.001991299,602.616075544
c035,0,2,2,469506,469679,456303,1200.0030386140002,1203.77070395
c035,0,2,3,189498,189667,188091,1800.0081104280002,1804.819479612
c035,0,2,4,139689,139861,138690,2400.01200392,2405.736555021
c035,0,2,5,135113,135276,131341,3000.017735188,3006.169876933
c035,0,2,6,97473,97634,94694,3600.021476959,3606.588756452
c035,0,2,7,59584,59752,59323,4200.031033644,4207.392602891
c035,0,2,8,54715,54881,54589,4800.037600162999,4808.163417327
c035,0,2,9,45586,45751,45449,5400.038681761999,5408.891975039
c035,0,2,10,42097,42272,41932,6000.070072422999,6009.518535859
c035,0,2,11,37009,37176,36920,6600.079925788999,6610.291314095
# search time: 6600.080s
# total time: 6610.677s
c035,1,2,1,1053071,1053072,896993,600.000565515,600.292404654
c035,1,2,2,460934,461129,448371,1200.0148850209998,1200.78388755
c035,1,2,3,192522,192716,191199,1800.0165029169998,1801.19903253
c035,1,2,4,138600,138792,137675,2400.0184324089996,2401.614819236
c035,1,2,5,133250,133443,129440,3000.0207724559996,3001.825127576
c035,1,2,6,97137,97323,94465,3600.0212928079995,3602.022621916
c035,1,2,7,55300,55487,55063,4200.028218709999,4202.432444465
c035,1,2,8,54803,54986,54671,4800.035712997999,4802.773805755
c035,1,2,9,50537,50725,50472,5400.040015502,5403.219900285
c035,1,2,10,47713,47903,47516,6000.045590572,6003.594696855
c035,1,2,11,39232,39420,39258,6600.05728951,6603.98208521
# search time: 6600.057s
# total time: 13215.343s
c035,2,2,1,1159675,1159676,985434,600.005745118,600.239464325
c035,2,2,2,462745,462923,449954,1200.005942971,1200.554956983
c035,2,2,3,182123,182305,180837,1800.009222867,1800.864931167
c035,2,2,4,133802,133990,132883,2400.016728049,2401.158376496
c035,2,2,5,128217,128406,124385,3000.019011685,3001.31010895
c035,2,2,6,94142,94323,91653,3600.020429464,3601.502394083
c035,2,2,7,56643,56828,56365,4200.029871074,4201.831894457
c035,2,2,8,52734,52917,52538,4800.03019132,4802.056382118
c035,2,2,9,43553,43740,43392,5400.037440744,5402.342494095
c035,2,2,10,40521,40703,40340,6000.046609005,6002.62101411
c035,2,2,11,35335,35527,35280,6600.04700348,6602.997492071
# search time: 6600.047s
# total time: 19819.225s
c035,3,2,1,1013602,1013603,863072,600.008034301,600.194216639
c035,3,2,2,456070,456252,443901,1200.009455234,1200.455817072
c035,3,2,3,185163,185345,183899,1800.011110203,1800.682715081
c035,3,2,4,132142,132322,131224,2400.015722695,2400.903811402
c035,3,2,5,129234,129413,125539,3000.017451416,3001.023854775
c035,3,2,6,93691,93866,91347,3600.021458674,3601.141558899
c035,3,2,7,54746,54923,54583,4200.056692929,4201.352838073
c035,3,2,8,52256,52433,52095,4800.0620408879995,4801.534345224
c035,3,2,9,41874,42055,41800,5400.082432159999,5401.740421692
c035,3,2,10,38934,39112,38811,6000.094627295999,6002.006774693
c035,3,2,11,35252,35433,35166,6600.097649796999,6602.218477631
# search time: 6600.098s
# total time: 26421.821s
c035,4,2,1,1005873,1005874,857792,600.000048447,600.189050808
c035,4,2,2,457549,457733,444933,1200.0007135750002,1200.423600615
c035,4,2,3,186919,187107,185635,1800.0028080060001,1800.611120421
c035,4,2,4,125575,125769,124860,2400.004887818,2400.790728568
c035,4,2,5,122109,122303,118685,3000.0074233679998,3000.91723675
c035,4,2,6,93299,93479,90654,3600.011016222,3601.021688124
c035,4,2,7,55022,55206,54846,4200.021599649,4201.19063636
c035,4,2,8,52597,52781,52422,4800.029547644999,4801.338701667
c035,4,2,9,41635,41822,41549,5400.034816214999,5401.484818854
c035,4,2,10,36878,37067,36816,6000.043550396999,6001.648650515
c035,4,2,11,33393,33580,33425,6600.062649695999,6601.810484279
# search time: 6600.063s
# total time: 33024.276s
