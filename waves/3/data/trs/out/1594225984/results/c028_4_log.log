    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.67s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c028_4.json out/1594225984/results/c028_4_best.csv out/1594225984/results/c028_4_predictions.csv out/1594225984/results/c028_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([5, 3, 0]), o: IntList([5, 3]) }
#   Datum { i: IntList([2, 7, 0, 7]), o: IntList([2, 7, 7]) }
#   Datum { i: IntList([4, 6, 6, 6, 4, 4, 4, 4]), o: IntList([4, 6, 6, 4, 4, 4, 4]) }
#   Datum { i: IntList([7, 8, 6, 1, 2]), o: IntList([7, 8, 1, 2]) }
#   Datum { i: IntList([9, 3, 6, 3, 8, 3, 1, 7, 5, 4]), o: IntList([9, 3, 3, 8, 3, 1, 7, 5, 4]) }
#   Datum { i: IntList([4, 3, 9, 5, 1, 7, 2]), o: IntList([4, 9, 5, 1, 7, 2]) }
#   Datum { i: IntList([5, 8, 1, 0]), o: IntList([5, 8, 0]) }
#   Datum { i: IntList([2, 2, 1, 1, 6, 8, 5, 3, 8]), o: IntList([2, 2, 1, 6, 8, 5, 3, 8]) }
#   Datum { i: IntList([0, 1, 8, 0, 0]), o: IntList([0, 8, 0, 0]) }
#   Datum { i: IntList([1, 8, 5, 4, 3, 2, 0, 6, 7, 9]), o: IntList([1, 5, 4, 3, 2, 0, 6, 7, 9]) }
#   Datum { i: IntList([6, 9, 9, 6, 5, 9]), o: IntList([6, 9, 6, 5, 9]) }
# searching
problem,run,order,trial,steps,tree,hypotheses,search_time,total_time
c028,0,4,1,1030380,1030381,878213,600.006608156,602.111923066
c028,0,4,2,647719,647893,630848,1200.018803022,1203.24970174
c028,0,4,3,436748,436922,424468,1800.020035068,1804.053626701
c028,0,4,4,248334,248513,240607,2400.021307869,2404.531939886
c028,0,4,5,202232,202411,195712,3000.022398733,3004.993865426
c028,0,4,6,121825,122001,118489,3600.023714907,3605.651230296
c028,0,4,7,92021,92200,91382,4200.027751787,4206.15941935
c028,0,4,8,87401,87584,86844,4800.028013285,4806.761694714
c028,0,4,9,69261,69441,68767,5400.029880091,5407.337702091
c028,0,4,10,58968,59148,58370,6000.040468585001,6007.963464655
c028,0,4,11,45654,45825,45397,6600.046269744001,6608.660230969
# search time: 6600.046s
# total time: 6609.188s
c028,1,4,1,1073901,1073902,951884,600.003851303,600.337484225
c028,1,4,2,630939,631100,613662,1200.0041807490002,1200.737149059
c028,1,4,3,438289,438452,426430,1800.0046828670002,1801.111532737
c028,1,4,4,250063,250226,241929,2400.005516665,2401.35522224
c028,1,4,5,200684,200849,194325,3000.008073891,3001.576479781
c028,1,4,6,119123,119282,114962,3600.0136285940002,3601.871120879
c028,1,4,7,92024,92187,91372,4200.019256522,4202.181206964
c028,1,4,8,92305,92468,91524,4800.023043723,4802.455062647
c028,1,4,9,76233,76398,75645,5400.028011275001,5402.74405175
c028,1,4,10,65473,65644,64837,6000.0359885630005,6003.007230003
c028,1,4,11,50735,50899,50399,6600.038003592001,6603.24307902
# search time: 6600.038s
# total time: 13212.831s
c028,2,4,1,1262890,1262891,1127240,600.000357692,600.278939208
c028,2,4,2,818881,819051,797459,1200.000722457,1200.594202965
c028,2,4,3,552085,552256,537031,1800.001206846,1800.886882543
c028,2,4,4,312175,312349,302214,2400.002620837,2401.071462131
c028,2,4,5,254848,255022,246628,3000.004770848,3001.230453778
c028,2,4,6,152559,152732,148177,3600.006196866,3601.437819803
c028,2,4,7,115486,115661,114630,4200.007483896,4201.645723848
c028,2,4,8,110510,110685,109796,4800.01229689,4801.801373658
c028,2,4,9,85244,85421,84631,5400.01252512,5402.011743915
c028,2,4,10,74016,74186,73249,6000.020822142999,6002.209647757
c028,2,4,11,58525,58703,58068,6600.0223212129995,6602.440189964
# search time: 6600.022s
# total time: 19816.012s
c028,3,4,1,1254625,1254626,1100675,600.000119932,600.266190468
c028,3,4,2,790031,790200,768862,1200.000562016,1200.528795037
c028,3,4,3,554977,555148,539618,1800.00072552,1800.762263028
c028,3,4,4,314963,315128,304692,2400.003088932,2400.905214341
c028,3,4,5,250932,251107,242478,3000.005466874,3001.039293778
c028,3,4,6,152458,152629,148059,3600.005535808,3601.190069619
c028,3,4,7,115805,115976,114979,4200.009261828,4201.355794109
c028,3,4,8,109945,110113,109217,4800.010691656999,4801.488010921
c028,3,4,9,84305,84475,83653,5400.023347557999,5401.652486355
c028,3,4,10,73356,73528,72544,6000.030441293999,6001.795823867
c028,3,4,11,59306,59477,58894,6600.033269304999,6601.913910458
# search time: 6600.033s
# total time: 26419.001s
c028,4,4,1,1288957,1288958,1152470,600.000504366,600.292424877
c028,4,4,2,771331,771498,750772,1200.005509948,1200.517357417
c028,4,4,3,560262,560431,544847,1800.005676666,1800.711944021
c028,4,4,4,312445,312609,301994,2400.007709613,2400.831946037
c028,4,4,5,255355,255523,246845,3000.0095186099998,3000.942810807
c028,4,4,6,151229,151393,146742,3600.009923705,3601.094749235
c028,4,4,7,116327,116494,115500,4200.015261684,4201.233177707
c028,4,4,8,109691,109859,108958,4800.020762579999,4801.347228815
c028,4,4,9,87597,87763,86881,5400.032255454,5401.504646879
c028,4,4,10,75715,75880,74936,6000.033928647999,6001.662770201
c028,4,4,11,57207,57372,56763,6600.036055316999,6601.800410387
# search time: 6600.036s
# total time: 33021.246s
