    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.71s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c005_5.json out/1593091766/results/c005_5_best.csv out/1593091766/results/c005_5_predictions.csv out/1593091766/results/c005_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([4, 4, 4, 4, 4]), o: IntList([4]) }
#   Datum { i: IntList([2, 2, 2]), o: IntList([2]) }
#   Datum { i: IntList([3, 3, 6, 3]), o: IntList([3]) }
#   Datum { i: IntList([1, 7]), o: IntList([7]) }
#   Datum { i: IntList([1, 5, 5, 3]), o: IntList([5]) }
#   Datum { i: IntList([3, 0, 0, 9, 6]), o: IntList([9]) }
#   Datum { i: IntList([2, 0, 8, 7, 6, 2]), o: IntList([8]) }
#   Datum { i: IntList([3, 5, 8, 1, 2]), o: IntList([1]) }
#   Datum { i: IntList([2, 9, 0]), o: IntList([0]) }
#   Datum { i: IntList([1, 1]), o: IntList([1]) }
#   Datum { i: IntList([3, 2, 8, 6]), o: IntList([6]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c005,0,5,1,1224721,1041484,1184530,1184530,600.000640361,601.816107341
c005,0,5,2,783675,739492,761012,761012,1200.001103124,1202.902760826
c005,0,5,3,714711,655004,684515,684515,1800.005789063,1803.736224371
c005,0,5,4,568303,516790,542723,542723,2400.006038306,2404.418187507
c005,0,5,5,465031,432175,450299,450299,3000.00675739,3004.872377353
c005,0,5,6,357662,333038,346415,346415,3600.007180176,3605.397837396
c005,0,5,7,306101,280306,292324,292324,4200.017636794,4205.929143978
c005,0,5,8,244867,227032,236277,236277,4800.018948642,4806.47778869
c005,0,5,9,201469,187045,194593,194593,5400.020851709,5407.02360615
c005,0,5,10,171030,159972,165673,165673,6000.022003654,6007.546423396
c005,0,5,11,157294,147545,152704,152704,6600.024453564,6608.058432551
# search time: 6600.024s
# total time: 6608.673s
c005,1,5,1,1258586,1029109,1206360,1206360,600.000071405,600.220736007
c005,1,5,2,770869,728807,749541,749541,1200.007583526,1200.578040545
c005,1,5,3,710251,650457,680331,680331,1800.007652092,1800.923605664
c005,1,5,4,562337,511132,535957,535957,2400.008407152,2401.246161582
c005,1,5,5,455379,422277,440325,440325,3000.010804028,3001.47359547
c005,1,5,6,356040,330766,344409,344409,3600.012094424,3601.745863738
c005,1,5,7,303550,279150,291016,291016,4200.01288783,4202.040537576
c005,1,5,8,247004,229442,238742,238742,4800.013818428,4802.349451246
c005,1,5,9,206507,191105,198135,198135,5400.017493379,5402.64519295
c005,1,5,10,173913,162908,168860,168860,6000.020480227,6002.919351615
c005,1,5,11,156774,146983,152243,152243,6600.020617362,6603.226061551
# search time: 6600.021s
# total time: 13212.824s
c005,2,5,1,1271419,1089785,1231727,1231727,600.000361794,600.256983559
c005,2,5,2,774280,732334,752869,752869,1200.00559586,1200.539611814
c005,2,5,3,734071,672818,703897,703897,1800.005847029,1800.820011987
c005,2,5,4,566898,515173,541300,541300,2400.006651431,2401.077871328
c005,2,5,5,459432,426362,444068,444068,3000.0090377200004,3001.282677818
c005,2,5,6,360230,334579,348615,348615,3600.00942784,3601.484938613
c005,2,5,7,306449,281762,293633,293633,4200.010644795,4201.679861378
c005,2,5,8,246016,228396,237685,237685,4800.011626154001,4801.888061386
c005,2,5,9,200880,186291,193745,193745,5400.0128206770005,5402.089765552
c005,2,5,10,173062,162350,168571,168571,6000.013048739001,6002.323587109
c005,2,5,11,161255,151191,157069,157069,6600.013660879001,6602.528319225
# search time: 6600.014s
# total time: 19816.139s
c005,3,5,1,1282074,1106890,1244238,1244238,600.010107524,600.287430784
c005,3,5,2,785265,741721,762855,762855,1200.0116074960001,1200.535389537
c005,3,5,3,696640,639437,667577,667577,1800.0119213920002,1800.751008305
c005,3,5,4,567782,516557,542306,542306,2400.012885982,2400.945079385
c005,3,5,5,454438,422110,439825,439825,3000.014851188,3001.104965856
c005,3,5,6,361864,336740,350397,350397,3600.0158832390002,3601.26474021
c005,3,5,7,310045,284287,296260,296260,4200.018022886,4201.41504634
c005,3,5,8,250031,231767,240810,240810,4800.019854309,4801.563242491
c005,3,5,9,205184,189756,196853,196853,5400.020401812,5401.727716011
c005,3,5,10,172694,161727,167526,167526,6000.024058852,6001.893590925
c005,3,5,11,160860,150708,156602,156602,6600.027778099,6602.034094869
# search time: 6600.028s
# total time: 26419.052s
c005,4,5,1,1311086,1140121,1274984,1274984,600.00024502,600.296310434
c005,4,5,2,766174,725164,745078,745078,1200.001243903,1200.518199544
c005,4,5,3,702164,644164,672734,672734,1800.001948334,1800.71217827
c005,4,5,4,568006,517003,542618,542618,2400.004779837,2400.901373858
c005,4,5,5,472662,439508,457631,457631,3000.004850875,3001.051379932
c005,4,5,6,363403,337952,351672,351672,3600.005436239,3601.197387265
c005,4,5,7,310318,284510,296468,296468,4200.010659585,4201.346074177
c005,4,5,8,246384,228613,237903,237903,4800.012494056,4801.484956491
c005,4,5,9,202693,188189,195704,195704,5400.02347935,5401.624827885
c005,4,5,10,172833,161750,167682,167682,6000.052340158,6001.798718716
c005,4,5,11,162221,152142,158078,158078,6600.053623616001,6601.944781967
# search time: 6600.054s
# total time: 33022.134s
