    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.06s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c017_5.json out/1593091766/results/c017_5_best.csv out/1593091766/results/c017_5_predictions.csv out/1593091766/results/c017_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 3]), o: IntList([3, 8]) }
#   Datum { i: IntList([1, 4, 2, 5, 3, 9, 7, 2]), o: IntList([1, 8, 2, 5, 3, 9, 7, 2]) }
#   Datum { i: IntList([]), o: IntList([]) }
#   Datum { i: IntList([6]), o: IntList([6]) }
#   Datum { i: IntList([0]), o: IntList([0]) }
#   Datum { i: IntList([9]), o: IntList([9]) }
#   Datum { i: IntList([9, 1, 7, 7]), o: IntList([9, 8, 7, 7]) }
#   Datum { i: IntList([7]), o: IntList([7]) }
#   Datum { i: IntList([5, 7, 2, 4, 0]), o: IntList([5, 8, 2, 4, 0]) }
#   Datum { i: IntList([9, 2, 1, 6, 4, 0]), o: IntList([9, 8, 1, 6, 4, 0]) }
#   Datum { i: IntList([0, 2, 2]), o: IntList([0, 8, 2]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c017,0,5,1,1373280,1188001,1333111,1333111,600.002231048,601.927523441
c017,0,5,2,701794,663808,682881,682881,1200.009532486,1202.702083368
c017,0,5,3,311398,276340,282605,282605,1800.010289117,1803.461821115
c017,0,5,4,328385,290068,307014,307014,2400.010458022,2403.912565543
c017,0,5,5,317145,290034,303261,303261,3000.011297287,3004.246802575
c017,0,5,6,297680,272407,285021,285021,3600.011712858,3604.553960423
c017,0,5,7,273572,248726,260458,260458,4200.012185431,4204.862461283
c017,0,5,8,232672,211976,222383,222383,4800.014111864,4805.127368323
c017,0,5,9,214725,194866,204209,204209,5400.014278633001,5405.392316045
c017,0,5,10,177939,159692,167845,167845,6000.017330085001,6005.641668724
c017,0,5,11,141087,124161,130778,130778,6600.021734491002,6605.925329939
# search time: 6600.022s
# total time: 6606.319s
c017,1,5,1,1403236,1228588,1369650,1369650,600.001402715,600.343562914
c017,1,5,2,726365,686315,705830,705830,1200.001463867,1200.64444591
c017,1,5,3,311128,275890,282284,282284,1800.0056812120001,1800.937601781
c017,1,5,4,332456,295626,311961,311961,2400.005872359,2401.149263907
c017,1,5,5,319693,293071,305912,305912,3000.007406999,3001.316187156
c017,1,5,6,299164,273791,286327,286327,3600.010729272,3601.483562334
c017,1,5,7,271246,246623,258235,258235,4200.011666732,4201.64595704
c017,1,5,8,233527,212806,223373,223373,4800.012826853,4801.789275677
c017,1,5,9,213633,193864,203071,203071,5400.014386092,5401.923009454
c017,1,5,10,176669,158712,166669,166669,6000.01692131,6002.069536686
c017,1,5,11,140054,123281,129799,129799,6600.025620468,6602.240047422
# search time: 6600.026s
# total time: 13209.158s
c017,2,5,1,1388852,1202667,1348708,1348708,600.003084103,600.317492586
c017,2,5,2,710892,672111,691404,691404,1200.007193858,1200.550029007
c017,2,5,3,308749,273806,280140,280140,1800.0080831599998,1800.770908911
c017,2,5,4,317214,279842,296171,296171,2400.009790955,2400.927186015
c017,2,5,5,317598,290294,303412,303412,3000.018232692,3001.055724347
c017,2,5,6,298453,273589,285885,285885,3600.018461827,3601.185030386
c017,2,5,7,272839,248222,259903,259903,4200.025892503,4201.317728339
c017,2,5,8,230466,209777,220509,220509,4800.027824413,4801.423916598
c017,2,5,9,213859,194131,203401,203401,5400.027865525,5401.548895352
c017,2,5,10,177425,159005,167225,167225,6000.028667482,6001.669746809
c017,2,5,11,140146,123632,130164,130164,6600.0295776759995,6601.775142098
# search time: 6600.030s
# total time: 19811.752s
c017,3,5,1,1372963,1185974,1332395,1332395,600.000680566,600.297575123
c017,3,5,2,710414,672008,691004,691004,1200.008792805,1200.506945194
c017,3,5,3,308919,274154,280320,280320,1800.0099967689998,1800.681735081
c017,3,5,4,327683,289663,306509,306509,2400.010584145,2400.807900103
c017,3,5,5,311591,284785,297870,297870,3000.010806825,3000.934882235
c017,3,5,6,291978,266656,279373,279373,3600.014097112,3601.044645391
c017,3,5,7,268508,244201,255779,255779,4200.015477336,4201.142426766
c017,3,5,8,232814,212088,222560,222560,4800.0157203359995,4801.234129725
c017,3,5,9,214006,193977,203456,203456,5400.015760615,5401.324106992
c017,3,5,10,177694,159516,167767,167767,6000.017601301,6001.427157867
c017,3,5,11,140342,123623,130227,130227,6600.020579825999,6601.512273353
# search time: 6600.021s
# total time: 26413.855s
c017,4,5,1,1270295,1080045,1228668,1228668,600.000105413,600.222910461
c017,4,5,2,720334,680566,700043,700043,1200.000288367,1200.407301878
c017,4,5,3,307981,273203,279531,279531,1800.001412393,1800.548893002
c017,4,5,4,322134,284619,301278,301278,2400.00202243,2400.659852538
c017,4,5,5,316740,289880,302705,302705,3000.0027224230003,3000.760035748
c017,4,5,6,295304,270214,282847,282847,3600.0035266100003,3600.858865054
c017,4,5,7,270752,246707,258081,258081,4200.004054088,4200.953695845
c017,4,5,8,230378,209843,220424,220424,4800.007735919,4801.04294262
c017,4,5,9,213775,193964,203328,203328,5400.008874879,5401.133688039
c017,4,5,10,177658,159465,167645,167645,6000.011530597,6001.220735056
c017,4,5,11,139464,123304,129692,129692,6600.0150057,6601.309251949
# search time: 6600.015s
# total time: 33015.733s
