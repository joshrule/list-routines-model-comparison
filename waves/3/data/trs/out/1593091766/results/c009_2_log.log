    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.59s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c009_2.json out/1593091766/results/c009_2_best.csv out/1593091766/results/c009_2_predictions.csv out/1593091766/results/c009_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 2, 1, 4, 3, 0, 4]), o: IntList([3, 2, 1, 4, 3, 0]) }
#   Datum { i: IntList([]), o: IntList([]) }
#   Datum { i: IntList([6, 6]), o: IntList([6, 6]) }
#   Datum { i: IntList([7]), o: IntList([7]) }
#   Datum { i: IntList([5, 8, 8, 9, 9, 5, 8, 5]), o: IntList([5, 8, 8, 9, 9, 5]) }
#   Datum { i: IntList([6, 2, 4, 4, 4, 8, 8]), o: IntList([6, 2, 4, 4, 4, 8]) }
#   Datum { i: IntList([6, 7, 0]), o: IntList([6, 7, 0]) }
#   Datum { i: IntList([5, 3, 7, 3, 8, 7, 8, 7]), o: IntList([5, 3, 7, 3, 8, 7]) }
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1, 1, 1, 1]) }
#   Datum { i: IntList([0, 5, 2, 2, 2]), o: IntList([0, 5, 2, 2, 2]) }
#   Datum { i: IntList([9, 4, 9, 9, 4, 9, 9]), o: IntList([9, 4, 9, 9, 4, 9]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c009,0,2,1,1086425,887595,1040876,1040876,600.000053408,601.876922696
c009,0,2,2,366545,337880,347405,347405,1200.0066812750001,1203.357883707
c009,0,2,3,376920,339233,354459,354459,1800.0093467370002,1804.281731865
c009,0,2,4,302996,281457,291086,291086,2400.0101539710004,2404.950762162
c009,0,2,5,275014,255000,263624,263624,3000.010304882,3005.491682504
c009,0,2,6,202474,181668,189793,189793,3600.011468728,3605.93257369
c009,0,2,7,148782,134687,140888,140888,4200.011931192,4206.450610462
c009,0,2,8,123587,110819,116102,116102,4800.01574353,4807.051220885
c009,0,2,9,108651,97431,102448,102448,5400.015935743,5407.541252201
c009,0,2,10,96062,85956,90524,90524,6000.021346457001,6008.129571641
c009,0,2,11,81460,72544,76380,76380,6600.045647625,6608.681041668
# search time: 6600.046s
# total time: 6608.992s
c009,1,2,1,1070092,877760,1026206,1026206,600.001142211,600.267869341
c009,1,2,2,362736,334283,343682,343682,1200.002227046,1200.736678795
c009,1,2,3,376839,340140,354725,354725,1800.002544343,1801.099232653
c009,1,2,4,303816,281804,291569,291569,2400.003726257,2401.384668143
c009,1,2,5,274546,254783,263337,263337,3000.0136247299997,3001.658223515
c009,1,2,6,201020,179936,188131,188131,3600.013746324,3601.867419572
c009,1,2,7,148274,133967,140146,140146,4200.0163108629995,4202.123405592
c009,1,2,8,71521,63658,66978,66978,4800.020323993,4802.441699836
c009,1,2,9,61241,54773,57888,57888,5400.020385510999,5402.684387713
c009,1,2,10,55389,49536,52319,52319,6000.041750234999,6002.962481879
c009,1,2,11,45851,40887,43124,43124,6600.047529227999,6603.322927015
# search time: 6600.048s
# total time: 13212.794s
c009,2,2,1,671150,581020,651623,651623,600.000341142,600.252989773
c009,2,2,2,225499,207766,213560,213560,1200.005713775,1200.569200228
c009,2,2,3,229708,205934,215176,215176,1800.007495635,1800.816917432
c009,2,2,4,187417,173644,179752,179752,2400.033982461,2401.052999764
c009,2,2,5,166278,153547,159145,159145,3000.037238102,3001.246480227
c009,2,2,6,118284,104788,110086,110086,3600.040666058,3601.394184532
c009,2,2,7,86930,78004,82038,82038,4200.041946216,4201.61423872
c009,2,2,8,71528,63687,67075,67075,4800.046015696,4801.854903829
c009,2,2,9,61419,54839,57965,57965,5400.0549536749995,5402.075622437
c009,2,2,10,55472,49508,52370,52370,6000.057189208999,6002.25547359
c009,2,2,11,46699,41405,43827,43827,6600.063051607,6602.502890387
# search time: 6600.063s
# total time: 19815.817s
c009,3,2,1,656312,538973,629328,629328,600.00026728,600.170350759
c009,3,2,2,220103,202152,208040,208040,1200.00450266,1200.45085603
c009,3,2,3,234278,210374,219924,219924,1800.006305088,1800.65269332
c009,3,2,4,187692,173388,179625,179625,2400.006696674,2400.840442997
c009,3,2,5,167747,154976,160514,160514,3000.009325345,3001.019552252
c009,3,2,6,119254,105885,111122,111122,3600.01214769,3601.17624459
c009,3,2,7,85583,76777,80754,80754,4200.013112432,4201.351636932
c009,3,2,8,71727,63747,67136,67136,4800.018581275999,4801.556910407
c009,3,2,9,61493,54837,57950,57950,5400.020042107999,5401.720919809
c009,3,2,10,55373,49380,52272,52272,6000.023438606999,6001.878613875
c009,3,2,11,46514,41181,43638,43638,6600.036137051999,6602.082624329
# search time: 6600.036s
# total time: 26418.269s
c009,4,2,1,679301,592049,660647,660647,600.00048309,600.232582873
c009,4,2,2,221064,203097,209005,209005,1200.0027918780002,1200.466811277
c009,4,2,3,230769,207320,216571,216571,1800.003717274,1800.670320094
c009,4,2,4,185610,171589,177756,177756,2400.007830371,2400.864410563
c009,4,2,5,165473,152607,158243,158243,3000.0127071280003,3001.013967321
c009,4,2,6,118633,104941,110252,110252,3600.0147332490005,3601.13781638
c009,4,2,7,86542,77613,81645,81645,4200.015590177,4201.289618068
c009,4,2,8,70916,62959,66380,66380,4800.020783766,4801.427575019
c009,4,2,9,61310,54788,57872,57872,5400.022890984,5401.550911966
c009,4,2,10,54978,49217,52004,52004,6000.028733392,6001.714151183
c009,4,2,11,46175,40938,43397,43397,6600.03821058,6601.866996227
# search time: 6600.038s
# total time: 33020.515s
