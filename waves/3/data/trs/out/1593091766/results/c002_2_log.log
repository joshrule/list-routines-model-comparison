    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.36s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c002_2.json out/1593091766/results/c002_2_best.csv out/1593091766/results/c002_2_predictions.csv out/1593091766/results/c002_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([9, 3, 6, 0]), o: IntList([6]) }
#   Datum { i: IntList([1, 1, 1]), o: IntList([1]) }
#   Datum { i: IntList([5, 5]), o: IntList([]) }
#   Datum { i: IntList([7, 7, 7, 7]), o: IntList([7]) }
#   Datum { i: IntList([4]), o: IntList([]) }
#   Datum { i: IntList([9, 9, 9, 9, 0, 0, 9]), o: IntList([9]) }
#   Datum { i: IntList([3, 1]), o: IntList([]) }
#   Datum { i: IntList([7, 3, 2, 1, 6, 2, 4, 5]), o: IntList([2]) }
#   Datum { i: IntList([8]), o: IntList([]) }
#   Datum { i: IntList([8, 8, 4, 7, 7, 9, 5, 0]), o: IntList([4]) }
#   Datum { i: IntList([3, 3]), o: IntList([]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c002,0,2,1,1247865,1057940,1206129,1206129,600.000130886,601.775112355
c002,0,2,2,826143,779438,802397,802397,1200.000616977,1202.85703379
c002,0,2,3,690194,639294,665078,665078,1800.001123767,1803.624145535
c002,0,2,4,626375,583978,604519,604519,2400.0018003210002,2404.154305759
c002,0,2,5,545512,499239,523527,523527,3000.0021874090003,3004.705848097
c002,0,2,6,516447,480296,499398,499398,3600.0024464720004,3605.091481011
c002,0,2,7,414036,384993,400410,400410,4200.002962445001,4205.523463142
c002,0,2,8,364547,338621,352332,352332,4800.003517166001,4805.922796583
c002,0,2,9,334706,310055,323096,323096,5400.003647801001,5406.307420253
c002,0,2,10,293063,271493,283139,283139,6000.004196006001,6006.713439554
c002,0,2,11,270465,249708,261085,261085,6600.0061985130005,6607.080070252
# search time: 6600.006s
# total time: 6607.724s
c002,1,2,1,1298162,1067299,1245583,1245583,600.000309798,600.219856304
c002,1,2,2,848204,799963,823192,823192,1200.005691866,1200.56078881
c002,1,2,3,681925,631998,657460,657460,1800.005937572,1800.86269653
c002,1,2,4,621926,579671,600026,600026,2400.006395546,2401.121629672
c002,1,2,5,538151,491670,515796,515796,3000.008607584,3001.389520465
c002,1,2,6,504871,469311,488355,488355,3600.009979065,3601.601954956
c002,1,2,7,404244,375563,391010,391010,4200.01046304,4201.834634231
c002,1,2,8,360359,334545,348306,348306,4800.0111807230005,4802.074165745
c002,1,2,9,332141,307570,320726,320726,5400.012491868,5402.297567288
c002,1,2,10,290417,269108,280676,280676,6000.016512799,6002.532590786
c002,1,2,11,269412,248412,259932,259932,6600.0214739250005,6602.757203163
# search time: 6600.021s
# total time: 13211.255s
c002,2,2,1,1342304,1171190,1306121,1306121,600.001947533,600.294123084
c002,2,2,2,827154,780932,803394,803394,1200.002446607,1200.556167242
c002,2,2,3,703012,650073,676925,676925,1800.0030871519998,1800.793202414
c002,2,2,4,623608,581375,601796,601796,2400.0033250019997,2400.988885931
c002,2,2,5,549996,503391,528520,528520,3000.0038113429996,3001.203736085
c002,2,2,6,518740,482799,501521,501521,3600.0129346659996,3601.401125808
c002,2,2,7,397452,368693,384285,384285,4200.019569321,4201.583125098
c002,2,2,8,359031,333060,346824,346824,4800.0197760949995,4801.753736735
c002,2,2,9,325061,301053,313918,313918,5400.020358678999,5401.924860083
c002,2,2,10,292151,270805,282456,282456,6000.024427656999,6002.113618023
c002,2,2,11,269590,248715,260024,260024,6600.027421851999,6602.27296323
# search time: 6600.027s
# total time: 19814.372s
c002,3,2,1,1326478,1160186,1291390,1291390,600.007349512,600.270811527
c002,3,2,2,825381,779805,802022,802022,1200.007441427,1200.501523938
c002,3,2,3,706460,652874,680180,680180,1800.00782387,1800.708308682
c002,3,2,4,623334,581259,601607,601607,2400.019265774,2400.894681647
c002,3,2,5,540537,494176,518378,518378,3000.019771772,3001.067542635
c002,3,2,6,515778,480261,498789,498789,3600.021219878,3601.233882619
c002,3,2,7,394634,366596,381774,381774,4200.0237877790005,4201.398618443
c002,3,2,8,358990,333720,347145,347145,4800.024050357,4801.559070644
c002,3,2,9,329968,305292,318580,318580,5400.025269334001,5401.704410115
c002,3,2,10,292332,270783,282419,282419,6000.026173758,6001.828492007
c002,3,2,11,270273,249780,260908,260908,6600.031510762001,6601.975795134
# search time: 6600.032s
# total time: 26417.248s
c002,4,2,1,1241728,1019599,1191214,1191214,600.001416583,600.178753339
c002,4,2,2,846853,797735,821541,821541,1200.001516971,1200.380121133
c002,4,2,3,698980,645840,673048,673048,1800.003244655,1800.563331453
c002,4,2,4,622048,579873,600116,600116,2400.003658711,2400.72609827
c002,4,2,5,548215,501725,526953,526953,3000.003887549,3000.881839991
c002,4,2,6,515490,480015,498545,498545,3600.00467631,3601.030389002
c002,4,2,7,400379,371806,387310,387310,4200.007242588,4201.159198432
c002,4,2,8,361190,335397,349024,349024,4800.021258946,4801.313426792
c002,4,2,9,329575,304690,318106,318106,5400.032754369,5401.441547677
c002,4,2,10,290272,268944,280436,280436,6000.032850278,6001.575106413
c002,4,2,11,269499,248983,260105,260105,6600.034279882,6601.709073846
# search time: 6600.034s
# total time: 33020.097s
