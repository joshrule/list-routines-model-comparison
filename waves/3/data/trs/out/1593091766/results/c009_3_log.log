    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.77s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c009_3.json out/1593091766/results/c009_3_best.csv out/1593091766/results/c009_3_predictions.csv out/1593091766/results/c009_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 2, 4, 4, 4, 8, 8]), o: IntList([6, 2, 4, 4, 4, 8]) }
#   Datum { i: IntList([7]), o: IntList([7]) }
#   Datum { i: IntList([5, 8, 8, 9, 9, 5, 8, 5]), o: IntList([5, 8, 8, 9, 9, 5]) }
#   Datum { i: IntList([6, 7, 0]), o: IntList([6, 7, 0]) }
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1, 1, 1, 1]) }
#   Datum { i: IntList([9, 4, 9, 9, 4, 9, 9]), o: IntList([9, 4, 9, 9, 4, 9]) }
#   Datum { i: IntList([3, 2, 1, 4, 3, 0, 4]), o: IntList([3, 2, 1, 4, 3, 0]) }
#   Datum { i: IntList([]), o: IntList([]) }
#   Datum { i: IntList([5, 3, 7, 3, 8, 7, 8, 7]), o: IntList([5, 3, 7, 3, 8, 7]) }
#   Datum { i: IntList([6, 6]), o: IntList([6, 6]) }
#   Datum { i: IntList([0, 5, 2, 2, 2]), o: IntList([0, 5, 2, 2, 2]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c009,0,3,1,1108287,908621,1062559,1062559,600.00011039,601.939720342
c009,0,3,2,358347,336097,345412,345412,1200.000878283,1203.193946835
c009,0,3,3,350104,320952,328101,328101,1800.001222159,1804.094551195
c009,0,3,4,206262,188716,190297,190297,2400.0019835069997,2405.022223969
c009,0,3,5,192585,176998,182665,182665,3000.01566049,3005.608575359
c009,0,3,6,159522,145987,150757,150757,3600.0157829259997,3606.231253205
c009,0,3,7,121101,111002,114278,114278,4200.018089298,4206.925236145
c009,0,3,8,91273,80396,82079,82079,4800.018563283999,4807.620456972
c009,0,3,9,98551,88223,92742,92742,5400.019353530999,5408.227064597
c009,0,3,10,89819,80530,84890,84890,6000.024102183999,6008.757376791
c009,0,3,11,85156,76209,80343,80343,6600.024483003999,6609.222191513
# search time: 6600.024s
# total time: 6609.560s
c009,1,3,1,1119546,968455,1086767,1086767,600.000999663,600.423280934
c009,1,3,2,370906,347913,357194,357194,1200.002275639,1200.863369884
c009,1,3,3,348244,319073,326602,326602,1800.002670637,1801.269752846
c009,1,3,4,205286,187807,189396,189396,2400.0036987579997,2401.678106402
c009,1,3,5,194148,178233,183915,183915,3000.0037742189998,3001.955995569
c009,1,3,6,160180,146655,151304,151304,3600.0042377699997,3602.225043086
c009,1,3,7,121803,111307,114768,114768,4200.008105979,4202.549468922
c009,1,3,8,91375,80539,82216,82216,4800.009592492,4802.838423754
c009,1,3,9,97591,87507,91824,91824,5400.009961132,5403.186802578
c009,1,3,10,88707,79715,83812,83812,6000.014645285,6003.424313036
c009,1,3,11,84883,75968,80088,80088,6600.018346885,6603.694614374
# search time: 6600.018s
# total time: 13213.742s
c009,2,3,1,1050722,890918,1015609,1015609,600.000382503,600.292046499
c009,2,3,2,369686,346176,355902,355902,1200.0011720809998,1200.577291573
c009,2,3,3,353748,324252,331327,331327,1800.0083202029998,1800.833728173
c009,2,3,4,215591,197136,198894,198894,2400.009205553,2401.092651339
c009,2,3,5,193913,178038,183766,183766,3000.00961533,3001.281338439
c009,2,3,6,160854,147102,151869,151869,3600.0134850940003,3601.457715908
c009,2,3,7,121318,110834,114159,114159,4200.020195036001,4201.669266419
c009,2,3,8,93832,83165,84983,84983,4800.024210239,4801.905400229
c009,2,3,9,97590,87514,91836,91836,5400.03507437,5402.162170732
c009,2,3,10,89870,80558,84858,84858,6000.03988329,6002.33991851
c009,2,3,11,84749,76022,80199,80199,6600.041038845,6602.51343043
# search time: 6600.041s
# total time: 19816.706s
c009,3,3,1,1042452,883605,1007577,1007577,600.003754462,600.22710844
c009,3,3,2,352316,330181,339494,339494,1200.004581597,1200.459741279
c009,3,3,3,345386,316385,323959,323959,1800.006968534,1800.662073096
c009,3,3,4,213326,195249,197006,197006,2400.0098787019997,2400.87757408
c009,3,3,5,193440,177351,183041,183041,3000.012064519,3001.031648093
c009,3,3,6,159229,145600,150235,150235,3600.012725535,3601.186038053
c009,3,3,7,120153,109851,113081,113081,4200.014650898,4201.40147048
c009,3,3,8,91392,80724,82370,82370,4800.015898852,4801.590052472
c009,3,3,9,97681,87507,91921,91921,5400.018008270999,5401.725388559
c009,3,3,10,89092,79895,84174,84174,6000.021537252,6001.863145069
c009,3,3,11,84637,75585,79763,79763,6600.024348131999,6602.010523177
# search time: 6600.024s
# total time: 26419.174s
c009,4,3,1,1112863,972129,1083006,1083006,600.00002089,600.275547363
c009,4,3,2,368300,345261,354691,354691,1200.0002261529999,1200.469331038
c009,4,3,3,345911,316908,324396,324396,1800.003510352,1800.649665731
c009,4,3,4,212656,194423,196265,196265,2400.003981391,2400.80865701
c009,4,3,5,192572,176899,182474,182474,3000.005788822,3000.934269411
c009,4,3,6,159621,146143,150816,150816,3600.007880671,3601.079485805
c009,4,3,7,120518,110050,113495,113495,4200.009360724,4201.247479278
c009,4,3,8,93551,82974,84678,84678,4800.009887565,4801.421520245
c009,4,3,9,96966,86809,91275,91275,5400.013742434,5401.575820892
c009,4,3,10,88658,79338,83696,83696,6000.014426262,6001.736168211
c009,4,3,11,84625,75895,79951,79951,6600.021589596,6601.857556762
# search time: 6600.022s
# total time: 33021.592s
