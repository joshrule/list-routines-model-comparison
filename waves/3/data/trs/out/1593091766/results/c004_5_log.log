    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.47s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c004_5.json out/1593091766/results/c004_5_best.csv out/1593091766/results/c004_5_predictions.csv out/1593091766/results/c004_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([0]), o: IntList([]) }
#   Datum { i: IntList([5, 9, 8, 8, 5, 0, 0, 2]), o: IntList([0]) }
#   Datum { i: IntList([9, 9]), o: IntList([]) }
#   Datum { i: IntList([0, 1, 0, 6, 9, 1, 1, 0]), o: IntList([1]) }
#   Datum { i: IntList([3, 7, 3]), o: IntList([]) }
#   Datum { i: IntList([0, 3, 2, 9, 4, 6, 8, 4, 8]), o: IntList([8]) }
#   Datum { i: IntList([5, 6, 0, 2, 9, 7, 3, 2, 1, 8]), o: IntList([3]) }
#   Datum { i: IntList([9, 6, 1, 0, 6, 4, 7]), o: IntList([7]) }
#   Datum { i: IntList([4, 4, 4]), o: IntList([]) }
#   Datum { i: IntList([7, 4]), o: IntList([]) }
#   Datum { i: IntList([5, 3, 4, 3, 4, 4, 5]), o: IntList([5]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c004,0,5,1,1169890,1006578,1135801,1135801,600.005499267,601.894530662
c004,0,5,2,1090381,1009739,1064550,1064550,1200.005618596,1202.647024198
c004,0,5,3,780773,729699,758707,758707,1800.0056813669999,1803.529361185
c004,0,5,4,696125,656538,679664,679664,2400.0059655,2404.136221853
c004,0,5,5,462026,420744,438907,438907,3000.006507813,3004.743505817
c004,0,5,6,430796,392635,409367,409367,3600.007278978,3605.290613404
c004,0,5,7,246880,227712,237395,237395,4200.00859683,4205.986558462
c004,0,5,8,190228,176221,183908,183908,4800.010267497,4806.743350634
c004,0,5,9,153698,142202,147938,147938,5400.011086019001,5407.491345302
c004,0,5,10,148448,137682,143369,143369,6000.011293463001,6008.051167522
c004,0,5,11,139744,129534,134889,134889,6600.012373689001,6608.712375534
# search time: 6600.012s
# total time: 6609.239s
c004,1,5,1,1194051,1033988,1161421,1161421,600.00148583,600.323319662
c004,1,5,2,1055435,976692,1030527,1030527,1200.001691486,1200.669067478
c004,1,5,3,776343,725713,754717,754717,1800.002189594,1801.056529076
c004,1,5,4,693207,653491,676515,676515,2400.00447852,2401.388029725
c004,1,5,5,472091,429992,448610,448610,3000.0079888009996,3001.739080022
c004,1,5,6,430137,391415,408406,408406,3600.0197940409994,3602.061159603
c004,1,5,7,247916,228887,238474,238474,4200.024767595999,4202.433958321
c004,1,5,8,191714,177013,184744,184744,4800.026539660999,4802.754900411
c004,1,5,9,155065,143803,149618,149618,5400.027730913999,5403.149643561
c004,1,5,10,146501,135747,141372,141372,6000.028994991999,6003.445863359
c004,1,5,11,138727,128622,133666,133666,6600.030543116999,6603.783895494
# search time: 6600.031s
# total time: 13213.842s
c004,2,5,1,1304734,1069176,1251043,1251043,600.000007039,600.214135776
c004,2,5,2,1028950,955378,1006277,1006277,1200.0001592859999,1200.521214068
c004,2,5,3,743292,694969,721272,721272,1800.0006221459998,1800.826397062
c004,2,5,4,692863,652475,675198,675198,2400.001966287,2401.100746561
c004,2,5,5,469260,427591,445890,445890,3000.002413723,3001.3500398
c004,2,5,6,440092,400101,417536,417536,3600.0031994739998,3601.594085875
c004,2,5,7,277536,255267,266705,266705,4200.004123269,4201.878393635
c004,2,5,8,213110,195993,205222,205222,4800.006149547,4802.078423469
c004,2,5,9,168998,155213,162113,162113,5400.007808989,5402.38119631
c004,2,5,10,160587,147925,154400,154400,6000.018530207,6002.604210776
c004,2,5,11,151348,139333,145822,145822,6600.020280602001,6602.871405576
# search time: 6600.020s
# total time: 19817.867s
c004,3,5,1,1193538,1033743,1160595,1160595,600.001149972,600.250490338
c004,3,5,2,1068734,990087,1043739,1043739,1200.007052931,1200.512439641
c004,3,5,3,771239,721500,750149,750149,1800.00727649,1800.758343662
c004,3,5,4,710186,668009,692983,692983,2400.00747721,2400.988747078
c004,3,5,5,468219,426935,445178,445178,3000.0081396590003,3001.205914552
c004,3,5,6,436754,397506,414778,414778,3600.0091639730003,3601.395452726
c004,3,5,7,279898,257504,269143,269143,4200.0093988690005,4201.581860005
c004,3,5,8,211424,194893,203821,203821,4800.009849885,4801.744336163
c004,3,5,9,169786,156394,163504,163504,5400.011417303001,5401.944995441
c004,3,5,10,161160,148074,154681,154681,6000.014467678001,6002.136760229
c004,3,5,11,151339,139467,145677,145677,6600.030783457001,6602.329580039
# search time: 6600.031s
# total time: 26421.020s
c004,4,5,1,1069694,908462,1035631,1035631,600.001827819,600.194025473
c004,4,5,2,1040065,963637,1015908,1015908,1200.0029978930002,1200.422565048
c004,4,5,3,784248,733675,763422,763422,1800.0030422650002,1800.650677614
c004,4,5,4,691713,651244,674112,674112,2400.003065723,2400.863775075
c004,4,5,5,469726,428111,446332,446332,3000.0033069319998,3001.045766999
c004,4,5,6,439208,399423,417108,417108,3600.004297745,3601.219699407
c004,4,5,7,279951,257533,269180,269180,4200.005842894,4201.380867914
c004,4,5,8,215729,198530,207741,207741,4800.006471121,4801.507778482
c004,4,5,9,169433,155918,163077,163077,5400.007525714,5401.653282509
c004,4,5,10,163115,150033,156810,156810,6000.010098291999,6001.775564701
c004,4,5,11,152064,140061,146520,146520,6600.011239828999,6601.896448708
# search time: 6600.011s
# total time: 33023.728s
