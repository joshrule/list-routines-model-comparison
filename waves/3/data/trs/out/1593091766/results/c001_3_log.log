    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.26s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c001_3.json out/1593091766/results/c001_3_best.csv out/1593091766/results/c001_3_predictions.csv out/1593091766/results/c001_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1]) }
#   Datum { i: IntList([5, 3, 6]), o: IntList([6]) }
#   Datum { i: IntList([0, 0, 0, 0, 0]), o: IntList([0]) }
#   Datum { i: IntList([7, 9, 3, 4]), o: IntList([3]) }
#   Datum { i: IntList([2, 2, 2, 8]), o: IntList([2]) }
#   Datum { i: IntList([5, 7, 5, 7, 5]), o: IntList([5]) }
#   Datum { i: IntList([8, 1, 8]), o: IntList([8]) }
#   Datum { i: IntList([2, 4, 3, 2]), o: IntList([3]) }
#   Datum { i: IntList([9, 6, 9, 8, 6]), o: IntList([9]) }
#   Datum { i: IntList([0, 6, 4, 4, 0, 6, 4]), o: IntList([4]) }
#   Datum { i: IntList([7, 7, 7]), o: IntList([7]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c001,0,3,1,1247251,1024477,1196468,1196468,600.000184366,601.757776131
c001,0,3,2,773119,731243,752486,752486,1200.005582776,1202.782008675
c001,0,3,3,581670,541916,562644,562644,1800.005907643,1803.329148891
c001,0,3,4,480029,445220,463624,463624,2400.00757944,2403.829056399
c001,0,3,5,427156,396132,412527,412527,3000.008608907,3004.292646522
c001,0,3,6,374343,346756,361345,361345,3600.008774426,3604.692856791
c001,0,3,7,277289,257043,268150,268150,4200.009275242,4205.304254158
c001,0,3,8,247754,228110,238730,238730,4800.016375517999,4805.942084731
c001,0,3,9,217619,200315,209760,209760,5400.016606398,5406.492584818
c001,0,3,10,190261,174100,182917,182917,6000.0212763889995,6007.138280548
c001,0,3,11,167789,153655,161252,161252,6600.022553479999,6607.762377103
# search time: 6600.023s
# total time: 6608.205s
c001,1,3,1,1284168,1053237,1231486,1231486,600.00284191,600.244923574
c001,1,3,2,782383,741334,761858,761858,1200.0030054590002,1200.597597002
c001,1,3,3,584943,545821,566660,566660,1800.0034467710002,1800.853402173
c001,1,3,4,490631,454782,473838,473838,2400.003940338,2401.099240899
c001,1,3,5,429621,398602,414979,414979,3000.0061953550003,3001.331385919
c001,1,3,6,381559,353258,367844,367844,3600.006971367,3601.574856541
c001,1,3,7,276599,256010,267234,267234,4200.01180026,4201.897945945
c001,1,3,8,252139,232243,242956,242956,4800.011934876,4802.15569124
c001,1,3,9,219360,201862,211586,211586,5400.012792063,5402.497101844
c001,1,3,10,192288,175900,184896,184896,6000.015406733,6002.783396805
c001,1,3,11,165502,151491,159195,159195,6600.017743497,6603.128550811
# search time: 6600.018s
# total time: 13212.010s
c001,2,3,1,1304057,1141522,1270497,1270497,600.004283591,600.29775242
c001,2,3,2,771809,731735,752252,752252,1200.004294395,1200.562252269
c001,2,3,3,600495,559540,580989,580989,1800.0077262969999,1800.763701787
c001,2,3,4,499294,463006,482143,482143,2400.009978017,2400.952068105
c001,2,3,5,429393,398015,414726,414726,3000.015082986,3001.142302184
c001,2,3,6,374821,346939,361454,361454,3600.015415574,3601.338940071
c001,2,3,7,273712,253712,264738,264738,4200.016219468,4201.536926257
c001,2,3,8,247801,228098,238843,238843,4800.016723707,4801.765728345
c001,2,3,9,217224,199524,209233,209233,5400.018669242,5401.984264994
c001,2,3,10,188645,172600,181417,181417,6000.019063964,6002.231255037
c001,2,3,11,168146,153864,161574,161574,6600.031953654,6602.488732707
# search time: 6600.032s
# total time: 19815.108s
c001,3,3,1,1314216,1159565,1282359,1282359,600.00153496,600.30025067
c001,3,3,2,782537,741381,762072,762072,1200.0019967399999,1200.527737845
c001,3,3,3,589544,549172,570462,570462,1800.00261529,1800.701204249
c001,3,3,4,484209,449611,468218,468218,2400.0029647789997,2400.86419107
c001,3,3,5,431076,399916,416462,416462,3000.003502689,3001.021865131
c001,3,3,6,376263,348331,363150,363150,3600.00421655,3601.176439427
c001,3,3,7,276705,255944,267268,267268,4200.005325552,4201.333429228
c001,3,3,8,249383,229466,240294,240294,4800.014543679999,4801.532871307
c001,3,3,9,217641,199666,209586,209586,5400.016606624999,5401.69667956
c001,3,3,10,186228,170246,178932,178932,6000.016994856,6001.867013309
c001,3,3,11,169080,154436,162347,162347,6600.017847665999,6602.025709435
# search time: 6600.018s
# total time: 26417.769s
c001,4,3,1,1305045,1137168,1269858,1269858,600.001474318,600.253726576
c001,4,3,2,754236,716626,735844,735844,1200.001540391,1200.455275306
c001,4,3,3,582603,543007,563810,563810,1800.0023229059998,1800.61504784
c001,4,3,4,496625,459368,478902,478902,2400.0024177449995,2400.761478922
c001,4,3,5,434658,403125,419705,419705,3000.0032107599995,3000.917830621
c001,4,3,6,378284,350253,364895,364895,3600.0039625849995,3601.057810551
c001,4,3,7,274776,254123,265526,265526,4200.004494639999,4201.226543811
c001,4,3,8,249107,229675,240163,240163,4800.004856402,4801.388024984
c001,4,3,9,215014,197759,207210,207210,5400.005604742,5401.527588391
c001,4,3,10,187997,172274,180728,180728,6000.009527709,6001.707147038
c001,4,3,11,165810,151782,159307,159307,6600.0119421320005,6601.868626523
# search time: 6600.012s
# total time: 33020.234s
