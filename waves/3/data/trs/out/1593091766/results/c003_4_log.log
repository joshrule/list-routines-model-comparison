    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.42s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c003_4.json out/1593091766/results/c003_4_best.csv out/1593091766/results/c003_4_predictions.csv out/1593091766/results/c003_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 9, 0, 8, 2, 8, 2, 3, 2]), o: IntList([2]) }
#   Datum { i: IntList([0, 8, 7, 8, 0, 8, 7, 0, 0, 8]), o: IntList([7]) }
#   Datum { i: IntList([7, 2, 3, 9, 0, 4, 5, 6]), o: IntList([5]) }
#   Datum { i: IntList([6, 1, 6, 4, 4, 7, 0, 4, 6, 1]), o: IntList([0]) }
#   Datum { i: IntList([5, 2, 0, 3, 1, 8, 9, 4, 9, 5]), o: IntList([9]) }
#   Datum { i: IntList([6, 8, 5, 0, 2, 9, 8, 2]), o: IntList([8]) }
#   Datum { i: IntList([1, 0, 8, 6, 7, 2, 9, 3, 5, 4]), o: IntList([9]) }
#   Datum { i: IntList([9, 3, 0, 4, 3, 6, 4, 8, 7]), o: IntList([4]) }
#   Datum { i: IntList([0, 5, 7, 4, 9, 1, 3, 6, 7, 8]), o: IntList([3]) }
#   Datum { i: IntList([1, 3, 1, 1, 5, 5, 1, 9, 1, 3]), o: IntList([1]) }
#   Datum { i: IntList([0, 6, 4, 3, 2, 7, 6, 1]), o: IntList([6]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c003,0,4,1,1161613,949911,1113457,1113457,600.009437279,601.772537479
c003,0,4,2,649135,611038,629354,629354,1200.010432475,1203.324344331
c003,0,4,3,432715,399605,415746,415746,1800.0106770769999,1804.492253869
c003,0,4,4,347454,320353,334517,334517,2400.0124088889997,2405.341522068
c003,0,4,5,176210,162682,169731,169731,3000.015142278,3006.796645961
c003,0,4,6,133519,122621,128063,128063,3600.015806508,3608.246336932
c003,0,4,7,109364,100699,105236,105236,4200.018912489,4209.806887494
c003,0,4,8,87018,80109,83660,83660,4800.023959023,4811.376223597
c003,0,4,9,73020,67015,70109,70109,5400.027256396001,5412.884999246
c003,0,4,10,60219,55489,57991,57991,6000.0301463900005,6014.517213958
c003,0,4,11,52903,48602,50894,50894,6600.030777633001,6615.67395697
# search time: 6600.031s
# total time: 6615.922s
c003,1,4,1,1205956,985141,1155748,1155748,600.000171931,600.223138116
c003,1,4,2,697198,654785,674894,674894,1200.000338153,1200.779257149
c003,1,4,3,447292,412621,429856,429856,1800.000606708,1801.272422032
c003,1,4,4,354771,327347,341534,341534,2400.001104032,2401.623616741
c003,1,4,5,174945,161506,168628,168628,3000.001871413,3002.383692292
c003,1,4,6,133852,122928,128316,128316,3600.008159761,3603.047168834
c003,1,4,7,108153,99647,104025,104025,4200.0082993,4203.665144162
c003,1,4,8,87402,80286,83983,83983,4800.012900977999,4804.38646681
c003,1,4,9,72676,66936,69934,69934,5400.022685380999,5405.148347505
c003,1,4,10,60177,55296,57874,57874,6000.025973283999,6005.771672124
c003,1,4,11,52342,48024,50262,50262,6600.043258630999,6606.762339547
# search time: 6600.043s
# total time: 13223.074s
c003,2,4,1,1215541,1059330,1182279,1182279,600.003158786,600.26421148
c003,2,4,2,716884,672175,692976,692976,1200.003234194,1200.639159907
c003,2,4,3,456344,420760,438564,438564,1800.005267388,1800.964925621
c003,2,4,4,349756,322437,336826,336826,2400.005679027,2401.223155123
c003,2,4,5,172333,159124,166019,166019,3000.006485786,3001.682697421
c003,2,4,6,133171,122372,127671,127671,3600.009168646,3602.133774574
c003,2,4,7,107660,99155,103519,103519,4200.010941657,4202.550826605
c003,2,4,8,87131,80059,83682,83682,4800.024156944,4803.112408398
c003,2,4,9,72504,66676,69670,69670,5400.040392213001,5403.579462919
c003,2,4,10,59441,54671,57269,57269,6000.069272744001,6004.094914103
c003,2,4,11,51843,47557,49798,49798,6600.0909642980005,6604.599660364
# search time: 6600.091s
# total time: 19828.001s
c003,3,4,1,1194788,979754,1145683,1145683,600.00003024,600.168079328
c003,3,4,2,691959,650070,670072,670072,1200.00026118,1200.463713451
c003,3,4,3,456710,420856,438946,438946,1800.003458415,1800.733025126
c003,3,4,4,352488,326785,340127,340127,2400.00445246,2400.948510363
c003,3,4,5,177969,164553,171597,171597,3000.006824756,3001.272146919
c003,3,4,6,134770,123934,129364,129364,3600.008969361,3601.623690936
c003,3,4,7,109776,101016,105604,105604,4200.012396794,4201.998392822
c003,3,4,8,87251,80271,83828,83828,4800.018453784,4802.283194923
c003,3,4,9,74460,68361,71526,71526,5400.021876968,5402.623442768
c003,3,4,10,59422,54450,57015,57015,6000.030064842999,6003.006714833
c003,3,4,11,51875,47487,49797,49797,6600.034950007,6603.362672292
# search time: 6600.035s
# total time: 26431.721s
c003,4,4,1,1185739,973958,1137408,1137408,600.000249054,600.169852306
c003,4,4,2,693689,652036,671928,671928,1200.0006177290002,1200.42005312
c003,4,4,3,444336,410815,427578,427578,1800.0125927880001,1800.64350027
c003,4,4,4,352325,325799,339816,339816,2400.013192928,2400.831638508
c003,4,4,5,177647,164088,171108,171108,3000.013822746,3001.08736086
c003,4,4,6,135428,124374,129809,129809,3600.013878969,3601.393250735
c003,4,4,7,107532,99085,103471,103471,4200.018823966,4201.663096193
c003,4,4,8,86738,79763,83288,83288,4800.02674702,4801.989427562
c003,4,4,9,72615,66582,69635,69635,5400.031892571999,5402.2729884
c003,4,4,10,61323,56279,58911,58911,6000.043232298,6002.612849318
c003,4,4,11,52367,47996,50274,50274,6600.074842147999,6602.880153536
# search time: 6600.075s
# total time: 33035.034s
