    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.40s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c003_3.json out/1593091766/results/c003_3_best.csv out/1593091766/results/c003_3_predictions.csv out/1593091766/results/c003_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([6, 8, 5, 0, 2, 9, 8, 2]), o: IntList([8]) }
#   Datum { i: IntList([1, 3, 1, 1, 5, 5, 1, 9, 1, 3]), o: IntList([1]) }
#   Datum { i: IntList([7, 2, 3, 9, 0, 4, 5, 6]), o: IntList([5]) }
#   Datum { i: IntList([0, 8, 7, 8, 0, 8, 7, 0, 0, 8]), o: IntList([7]) }
#   Datum { i: IntList([9, 3, 0, 4, 3, 6, 4, 8, 7]), o: IntList([4]) }
#   Datum { i: IntList([6, 9, 0, 8, 2, 8, 2, 3, 2]), o: IntList([2]) }
#   Datum { i: IntList([5, 2, 0, 3, 1, 8, 9, 4, 9, 5]), o: IntList([9]) }
#   Datum { i: IntList([0, 6, 4, 3, 2, 7, 6, 1]), o: IntList([6]) }
#   Datum { i: IntList([0, 5, 7, 4, 9, 1, 3, 6, 7, 8]), o: IntList([3]) }
#   Datum { i: IntList([1, 0, 8, 6, 7, 2, 9, 3, 5, 4]), o: IntList([9]) }
#   Datum { i: IntList([6, 1, 6, 4, 4, 7, 0, 4, 6, 1]), o: IntList([0]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c003,0,3,1,1096689,954386,1066426,1066426,600.000638021,602.111568077
c003,0,3,2,620412,584268,601613,601613,1200.000807805,1203.632040661
c003,0,3,3,384075,355465,370509,370509,1800.000877998,1804.535536175
c003,0,3,4,321246,296696,309433,309433,2400.001410534,2405.424668859
c003,0,3,5,257029,236425,247077,247077,3000.008602724,3006.323985672
c003,0,3,6,207760,191032,199476,199476,3600.009654989,3607.201283679
c003,0,3,7,99601,91584,95570,95570,4200.013436454,4208.707672098
c003,0,3,8,80212,73396,76788,76788,4800.019309727,4810.01888201
c003,0,3,9,67515,61746,64696,64696,5400.0270327690005,5411.215591882
c003,0,3,10,55424,50984,53300,53300,6000.040305421,6012.92450746
c003,0,3,11,47005,43127,45097,45097,6600.0492962710005,6614.242125877
# search time: 6600.049s
# total time: 6614.481s
c003,1,3,1,1063674,916973,1031814,1031814,600.005390392,600.327821683
c003,1,3,2,648512,607936,627102,627102,1200.005769205,1200.830664514
c003,1,3,3,383361,355296,370096,370096,1800.005937557,1801.209447481
c003,1,3,4,320332,297040,309218,309218,2400.00951456,2401.599341016
c003,1,3,5,257355,236938,247714,247714,3000.0097054649996,3002.036574275
c003,1,3,6,209805,192903,201439,201439,3600.0102212639995,3602.472538624
c003,1,3,7,99286,91261,95276,95276,4200.014822124,4203.020971091
c003,1,3,8,80470,73680,77007,77007,4800.021877607,4803.780646319
c003,1,3,9,68434,62592,65544,65544,5400.023135828,5404.414350139
c003,1,3,10,56816,52227,54687,54687,6000.02516166,6005.19123119
c003,1,3,11,46908,43242,45160,45160,6600.029959444,6606.006680088
# search time: 6600.030s
# total time: 13220.832s
c003,2,3,1,1072375,878508,1028390,1028390,600.00166871,600.188420577
c003,2,3,2,654736,613980,633091,633091,1200.001734978,1200.5454605
c003,2,3,3,386904,358018,372982,372982,1800.013068552,1800.808017606
c003,2,3,4,317831,293485,306302,306302,2400.015345256,2401.073639853
c003,2,3,5,256140,236668,246832,246832,3000.016651513,3001.333357737
c003,2,3,6,206633,189923,198473,198473,3600.032175205,3601.662846173
c003,2,3,7,97532,89457,93485,93485,4200.036464398,4202.066929049
c003,2,3,8,79428,72676,76055,76055,4800.041684645,4802.581384631
c003,2,3,9,67269,61525,64442,64442,5400.053942785,5403.198912266
c003,2,3,10,55744,51237,53623,53623,6000.0581659,6003.590634432
c003,2,3,11,48080,44093,46209,46209,6600.077380801,6604.087360499
# search time: 6600.077s
# total time: 19825.262s
c003,3,3,1,1071968,918065,1038519,1038519,600.000077358,600.237492701
c003,3,3,2,613085,576909,594375,594375,1200.0001857769998,1200.511047842
c003,3,3,3,388720,359443,374284,374284,1800.0004379519999,1800.71047838
c003,3,3,4,320170,295730,308452,308452,2400.003610025,2400.924537667
c003,3,3,5,254900,235219,245515,245515,3000.010940848,3001.163450007
c003,3,3,6,206385,189973,198242,198242,3600.0195000609997,3601.398676211
c003,3,3,7,100325,92061,96240,96240,4200.0237508089995,4201.709653866
c003,3,3,8,80581,73630,77096,77096,4800.028064685,4802.06529565
c003,3,3,9,68248,62492,65393,65393,5400.0359282379995,5402.429426945
c003,3,3,10,55320,50762,53151,53151,6000.037386505999,6002.862723872
c003,3,3,11,47926,44052,46036,46036,6600.039070621999,6603.414171013
# search time: 6600.039s
# total time: 26428.984s
c003,4,3,1,1075514,881113,1030851,1030851,600.000465768,600.162093476
c003,4,3,2,642784,602858,621528,621528,1200.001072039,1200.417746593
c003,4,3,3,387543,358895,373679,373679,1800.001875821,1800.589276705
c003,4,3,4,315364,291297,304087,304087,2400.0020907010003,2400.775713977
c003,4,3,5,258124,238143,248533,248533,3000.0166870460002,3000.957015955
c003,4,3,6,208305,191379,199955,199955,3600.017872595,3601.19084686
c003,4,3,7,99275,91255,95212,95212,4200.020140218,4201.525312066
c003,4,3,8,80013,73238,76667,76667,4800.02461293,4801.89909401
c003,4,3,9,67577,61912,64860,64860,5400.031008296,5402.144819234
c003,4,3,10,55284,50775,53119,53119,6000.048196867,6002.538083491
c003,4,3,11,48998,44944,47083,47083,6600.049956971,6602.815583306
# search time: 6600.050s
# total time: 33032.139s
