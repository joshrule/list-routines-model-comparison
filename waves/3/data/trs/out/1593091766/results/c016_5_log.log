    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.07s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c016_5.json out/1593091766/results/c016_5_best.csv out/1593091766/results/c016_5_predictions.csv out/1593091766/results/c016_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([9, 2]), o: IntList([9, 8]) }
#   Datum { i: IntList([9, 1, 8, 7, 2, 1, 0, 5, 7]), o: IntList([9, 8, 8, 7, 2, 1, 0, 5, 7]) }
#   Datum { i: IntList([2, 6, 7, 3, 1]), o: IntList([2, 8, 7, 3, 1]) }
#   Datum { i: IntList([8, 1, 9, 6, 0, 7, 5]), o: IntList([8, 8, 9, 6, 0, 7, 5]) }
#   Datum { i: IntList([6, 6, 4, 4, 6, 6, 6, 4, 6, 4]), o: IntList([6, 8, 4, 4, 6, 6, 6, 4, 6, 4]) }
#   Datum { i: IntList([3, 6, 1, 4, 0, 5, 2, 7]), o: IntList([3, 8, 1, 4, 0, 5, 2, 7]) }
#   Datum { i: IntList([5, 9, 4, 4, 5, 0]), o: IntList([5, 8, 4, 4, 5, 0]) }
#   Datum { i: IntList([5, 5, 5]), o: IntList([5, 8, 5]) }
#   Datum { i: IntList([1, 1, 0, 2]), o: IntList([1, 8, 0, 2]) }
#   Datum { i: IntList([1, 1, 2, 2, 9, 9, 2]), o: IntList([1, 8, 2, 2, 9, 9, 2]) }
#   Datum { i: IntList([6, 1, 2, 4, 3, 5, 3, 9, 0, 7]), o: IntList([6, 8, 2, 4, 3, 5, 3, 9, 0, 7]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c016,0,5,1,718287,586721,687955,687955,600.000186043,602.846781802
c016,0,5,2,420333,393331,406717,406717,1200.000292209,1204.382177468
c016,0,5,3,165619,147322,152503,152503,1800.0012971810002,1805.391756457
c016,0,5,4,119726,110608,114302,114302,2400.004051377,2406.299538494
c016,0,5,5,87256,80339,83159,83159,3000.008191042,3006.83030215
c016,0,5,6,101627,92885,96451,96451,3600.010498401,3607.719450977
c016,0,5,7,81763,74409,77225,77225,4200.012489069,4208.647744559
c016,0,5,8,72184,66048,68282,68282,4800.01503483,4809.481040942
c016,0,5,9,67901,60962,63336,63336,5400.022088522001,5410.370244838
c016,0,5,10,63153,56726,58685,58685,6000.027749170001,6011.091881303
c016,0,5,11,57274,51281,53057,53057,6600.030819289001,6611.889246553
# search time: 6600.031s
# total time: 6612.125s
c016,1,5,1,1164224,953879,1116144,1116144,600.007652586,600.318919484
c016,1,5,2,668204,626694,647639,647639,1200.0113759659998,1200.794525042
c016,1,5,3,272321,244040,251733,251733,1800.0120140919998,1801.181280426
c016,1,5,4,194794,181174,186924,186924,2400.01286962,2401.516679687
c016,1,5,5,144456,133573,138111,138111,3000.031638139,3001.80588788
c016,1,5,6,102200,93484,96929,96929,3600.0342521869998,3602.15196177
c016,1,5,7,81944,74951,77598,77598,4200.040325963,4202.57730539
c016,1,5,8,72519,66272,68548,68548,4800.043188005,4802.99737424
c016,1,5,9,67128,60240,62735,62735,5400.046439105,5403.344592036
c016,1,5,10,62942,56513,58559,58559,6000.057552431,6003.685906187
c016,1,5,11,56427,50720,52345,52345,6600.062931691999,6603.928218595
# search time: 6600.063s
# total time: 13216.474s
c016,2,5,1,1171320,1026724,1140925,1140925,600.000257377,600.312953078
c016,2,5,2,646217,607251,627255,627255,1200.0020257370002,1200.61163641
c016,2,5,3,274107,245081,252953,252953,1800.0032227590002,1800.835758012
c016,2,5,4,196845,183121,188836,188836,2400.013853201,2401.035986083
c016,2,5,5,144130,133664,137891,137891,3000.017734588,3001.24408528
c016,2,5,6,102061,93478,96590,96590,3600.0191269630004,3601.457778231
c016,2,5,7,82124,74481,77451,77451,4200.020751971,4201.716999635
c016,2,5,8,73869,67332,69686,69686,4800.027396217,4801.921057429
c016,2,5,9,67582,60850,62976,62976,5400.031624511001,5402.133027688
c016,2,5,10,61942,55623,57554,57554,6000.0325069890005,6002.351210905
c016,2,5,11,56856,50818,52532,52532,6600.038142869001,6602.554562047
# search time: 6600.038s
# total time: 19819.494s
c016,3,5,1,1135315,931606,1088774,1088774,600.007285806,600.197859469
c016,3,5,2,649893,610716,630701,630701,1200.007603741,1200.450476866
c016,3,5,3,274060,244693,252854,252854,1800.007726752,1800.619849864
c016,3,5,4,195478,181742,187324,187324,2400.011635396,2400.777489428
c016,3,5,5,134176,124045,128220,128220,3000.0130489000003,3000.945043686
c016,3,5,6,102312,93706,96932,96932,3600.0170527830005,3601.089399422
c016,3,5,7,80564,73955,76539,76539,4200.023876636001,4201.254645812
c016,3,5,8,71387,65486,67705,67705,4800.0304109710005,4801.387914891
c016,3,5,9,67418,60669,62848,62848,5400.032345759,5401.56021922
c016,3,5,10,62498,56308,58313,58313,6000.045206797,6001.803145597
c016,3,5,11,55957,50197,52032,52032,6600.045976298,6601.961829118
# search time: 6600.046s
# total time: 26421.895s
c016,4,5,1,1144900,937891,1097728,1097728,600.000905064,600.182569718
c016,4,5,2,667749,625283,646835,646835,1200.001682862,1200.410117126
c016,4,5,3,274517,245459,253774,253774,1800.002440275,1800.550038291
c016,4,5,4,197434,183252,189059,189059,2400.005093687,2400.687744005
c016,4,5,5,144299,133450,138013,138013,3000.0141247970005,3000.835297374
c016,4,5,6,101299,92499,95849,95849,3600.0152205580007,3600.962734215
c016,4,5,7,81018,74180,76619,76619,4200.022010059,4201.091616506
c016,4,5,8,71635,65431,67732,67732,4800.029963147001,4801.20646328
c016,4,5,9,65678,59494,61609,61609,5400.04088577,5401.357657756
c016,4,5,10,62294,55881,57935,57935,6000.050507281,6001.507686352
c016,4,5,11,56917,50710,52514,52514,6600.054399118,6601.627167
# search time: 6600.054s
# total time: 33023.967s
