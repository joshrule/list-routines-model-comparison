    Finished release [optimized] target(s) in 0.05s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c054_4.json out/1593091766/results/c054_4_best.csv out/1593091766/results/c054_4_predictions.csv out/1593091766/results/c054_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([4, 0, 0]), o: IntList([0, 0, 0]) }
#   Datum { i: IntList([7, 5, 2, 5, 7, 7, 2]), o: IntList([2, 2, 2, 5, 7, 7, 2]) }
#   Datum { i: IntList([4, 8, 4, 4, 8, 8, 8, 4, 8, 8]), o: IntList([4, 4, 4, 4, 8, 8, 8, 4, 8, 8]) }
#   Datum { i: IntList([9, 5, 9, 2, 3, 8, 2, 3, 8]), o: IntList([9, 9, 9, 2, 3, 8, 2, 3, 8]) }
#   Datum { i: IntList([6, 5, 6, 5, 6]), o: IntList([6, 6, 6, 5, 6]) }
#   Datum { i: IntList([9, 3, 9, 9, 0, 0]), o: IntList([9, 9, 9, 9, 0, 0]) }
#   Datum { i: IntList([4, 1, 1, 1, 1, 4, 4, 1, 3, 3]), o: IntList([1, 1, 1, 1, 1, 4, 4, 1, 3, 3]) }
#   Datum { i: IntList([9, 3, 6, 7, 0]), o: IntList([6, 6, 6, 7, 0]) }
#   Datum { i: IntList([2, 2, 7, 2, 2, 5, 7, 7, 0]), o: IntList([7, 7, 7, 2, 2, 5, 7, 7, 0]) }
#   Datum { i: IntList([5, 5, 9, 5]), o: IntList([9, 9, 9, 5]) }
#   Datum { i: IntList([8, 7, 3, 5, 5, 5, 5, 6]), o: IntList([3, 3, 3, 5, 5, 5, 5, 6]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c054,0,4,1,1370519,1194135,1333120,1333120,600.00019164,601.993515719
c054,0,4,2,631262,595102,612182,612182,1200.001619033,1202.837066288
c054,0,4,3,317645,293594,303733,303733,1800.002733115,1803.304318183
c054,0,4,4,171294,157134,161641,161641,2400.0125833820002,2403.939833484
c054,0,4,5,127254,116017,119548,119548,3000.0159573520004,3004.556189268
c054,0,4,6,112379,101992,105117,105117,3600.0176351390005,3605.104252574
c054,0,4,7,93683,84480,86951,86951,4200.017774711,4205.734841479
c054,0,4,8,70423,62951,64822,64822,4800.020751304,4806.403674267
c054,0,4,9,68308,61204,63076,63076,5400.030404030001,5406.894524308
c054,0,4,10,56455,50535,52072,52072,6000.0433738110005,6007.536557577
c054,0,4,11,53292,47470,49029,49029,6600.064237336001,6608.075167711
# search time: 6600.064s
# total time: 6608.462s
c054,1,4,1,1358864,1184386,1321746,1321746,600.000046343,600.360862541
c054,1,4,2,632612,595870,612988,612988,1200.0001122160002,1200.718597805
c054,1,4,3,316039,292520,302391,302391,1800.000302204,1800.945378632
c054,1,4,4,172111,158050,162155,162155,2400.0016884710003,2401.265184377
c054,1,4,5,127062,115632,119243,119243,3000.0023234940004,3001.54775754
c054,1,4,6,112064,101612,104804,104804,3600.0050325350003,3601.794400738
c054,1,4,7,93817,84598,87098,87098,4200.009349011,4202.084401187
c054,1,4,8,70229,62877,64812,64812,4800.020721013,4802.41514492
c054,1,4,9,67215,60397,62135,62135,5400.023613053,5402.709383876
c054,1,4,10,56626,50734,52236,52236,6000.031698907,6003.038518025
c054,1,4,11,52915,47556,48893,48893,6600.041457064,6603.374451935
# search time: 6600.041s
# total time: 13212.393s
c054,2,4,1,1364962,1189703,1327251,1327251,600.000921682,600.329702053
c054,2,4,2,637020,600123,617215,617215,1200.001148293,1200.605064807
c054,2,4,3,316593,293108,303092,303092,1800.007751656,1800.78057125
c054,2,4,4,169262,154822,159001,159001,2400.012499025,2400.971675969
c054,2,4,5,126141,114891,118388,118388,3000.016102992,3001.177121049
c054,2,4,6,111759,101448,104496,104496,3600.018386585,3601.383692726
c054,2,4,7,93019,83496,86284,86284,4200.021718663,4201.579424248
c054,2,4,8,69850,62387,64352,64352,4800.023664345999,4801.807093248
c054,2,4,9,67588,60642,62464,62464,5400.0265494099995,5401.970124196
c054,2,4,10,55677,49919,51380,51380,6000.032849386,6002.17439567
c054,2,4,11,52961,47399,48730,48730,6600.040451983,6602.375672055
# search time: 6600.040s
# total time: 19815.225s
c054,3,4,1,1321732,1084386,1267611,1267611,600.000384685,600.194557185
c054,3,4,2,638540,603484,619542,619542,1200.000545683,1200.433070831
c054,3,4,3,320150,296106,306078,306078,1800.001839261,1800.565141514
c054,3,4,4,168262,153759,158414,158414,2400.005726088,2400.720121286
c054,3,4,5,126079,115168,118713,118713,3000.008206989,3000.881043496
c054,3,4,6,111455,100839,104149,104149,3600.009386326,3601.045906321
c054,3,4,7,93002,84102,86708,86708,4200.013029814,4201.190165053
c054,3,4,8,69587,62393,64313,64313,4800.023547551,4801.425812214
c054,3,4,9,67514,60980,62589,62589,5400.0239087889995,5401.576107198
c054,3,4,10,55743,49927,51506,51506,6000.037160661,6001.806567175
c054,3,4,11,53112,47501,48873,48873,6600.0497708739995,6601.965617956
# search time: 6600.050s
# total time: 26417.657s
c054,4,4,1,1348774,1179533,1313504,1313504,600.000223671,600.261999111
c054,4,4,2,638671,601649,618800,618800,1200.000827442,1200.46986437
c054,4,4,3,315061,291512,301436,301436,1800.002179344,1800.604282757
c054,4,4,4,166968,153270,157645,157645,2400.010152738,2400.744857288
c054,4,4,5,125491,114165,117841,117841,3000.0111148630003,3000.866822526
c054,4,4,6,110294,99906,103144,103144,3600.0145237490005,3600.984725218
c054,4,4,7,92670,83468,86186,86186,4200.017842966001,4201.120635004
c054,4,4,8,69775,62434,64408,64408,4800.019112157001,4801.292592834
c054,4,4,9,68015,60913,62748,62748,5400.0247692230005,5401.428850062
c054,4,4,10,56295,50374,51792,51792,6000.029726670001,6001.56089706
c054,4,4,11,52933,47277,48669,48669,6600.031255416001,6601.712724176
# search time: 6600.031s
# total time: 33019.836s
