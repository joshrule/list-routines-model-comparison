    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.58s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c008_5.json out/1593091766/results/c008_5_best.csv out/1593091766/results/c008_5_predictions.csv out/1593091766/results/c008_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([4, 0, 5, 6, 5, 0, 5]), o: IntList([4, 0, 5, 6, 5, 0]) }
#   Datum { i: IntList([9, 0, 9, 0, 0, 9, 0]), o: IntList([9, 0, 9, 0, 0, 9]) }
#   Datum { i: IntList([8, 7, 9, 0, 1, 9, 3, 4, 6]), o: IntList([8, 7, 9, 0, 1, 9]) }
#   Datum { i: IntList([9, 2, 2, 6, 9, 9, 2, 9]), o: IntList([9, 2, 2, 6, 9, 9]) }
#   Datum { i: IntList([4, 4, 5, 8, 3, 5, 0, 0, 0]), o: IntList([4, 4, 5, 8, 3, 5]) }
#   Datum { i: IntList([0, 7, 0, 2, 3, 6, 7, 9]), o: IntList([0, 7, 0, 2, 3, 6]) }
#   Datum { i: IntList([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]), o: IntList([4, 4, 4, 4, 4, 4]) }
#   Datum { i: IntList([3, 7, 7, 0, 3, 8, 5]), o: IntList([3, 7, 7, 0, 3, 8]) }
#   Datum { i: IntList([1, 3, 9, 8, 1, 6, 7]), o: IntList([1, 3, 9, 8, 1, 6]) }
#   Datum { i: IntList([3, 5, 5, 8, 9, 6, 4, 0]), o: IntList([3, 5, 5, 8, 9, 6]) }
#   Datum { i: IntList([0, 4, 4, 0, 9, 0, 4]), o: IntList([0, 4, 4, 0, 9, 0]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c008,0,5,1,1114659,909950,1067800,1067800,600.000706698,601.897518011
c008,0,5,2,362527,340300,350044,350044,1200.000791379,1203.109148907
c008,0,5,3,220146,201793,204860,204860,1800.001412197,1804.214173689
c008,0,5,4,137495,128643,132815,132815,2400.002405761,2405.439146417
c008,0,5,5,108954,99808,102880,102880,3000.0028348799997,3006.605243749
c008,0,5,6,87941,80658,82850,82850,3600.003628184,3607.886788928
c008,0,5,7,72564,66334,68212,68212,4200.009677524,4209.167720767
c008,0,5,8,61232,55825,57366,57366,4800.026950102,4810.392993602
c008,0,5,9,53100,48408,49666,49666,5400.042697475,5411.484715199
c008,0,5,10,46954,42810,43992,43992,6000.060919879,6012.615567325
c008,0,5,11,41258,37623,38643,38643,6600.065385015,6613.875928659
# search time: 6600.065s
# total time: 6614.165s
c008,1,5,1,1054406,861634,1011019,1011019,600.004264268,600.251618558
c008,1,5,2,361686,339758,349211,349211,1200.004827683,1200.724340165
c008,1,5,3,221593,202992,206119,206119,1800.005068532,1801.243705992
c008,1,5,4,137313,128502,132581,132581,2400.012399678,2401.795207218
c008,1,5,5,109347,100001,103118,103118,3000.013253991,3002.326893148
c008,1,5,6,86697,79007,81474,81474,3600.020883411,3602.878995321
c008,1,5,7,72535,66105,68061,68061,4200.026525192,4203.380296793
c008,1,5,8,59988,54796,56222,56222,4800.052832404,4803.96242488
c008,1,5,9,52428,47924,49119,49119,5400.054477177,5404.597929589
c008,1,5,10,47327,42763,44214,44214,6000.073667814,6005.170502118
c008,1,5,11,40480,37061,37962,37962,6600.084190988,6605.756414063
# search time: 6600.084s
# total time: 13220.234s
c008,2,5,1,1109167,962510,1077758,1077758,600.003591165,600.312637518
c008,2,5,2,353246,332008,341442,341442,1200.003655161,1200.626347165
c008,2,5,3,227134,207373,210806,210806,1800.00477354,1800.937401671
c008,2,5,4,136983,128381,132347,132347,2400.00690037,2401.269831772
c008,2,5,5,108233,99181,102154,102154,3000.0076838160003,3001.620354926
c008,2,5,6,86272,78645,81136,81136,3600.0079497190004,3601.942906053
c008,2,5,7,71090,64967,66804,66804,4200.01228451,4202.311787424
c008,2,5,8,60137,55036,56478,56478,4800.026792634,4802.754632171
c008,2,5,9,52319,47380,49041,49041,5400.0360931390005,5403.056811301
c008,2,5,10,45741,41763,42851,42851,6000.0488392610005,6003.453236672
c008,2,5,11,41384,37769,38802,38802,6600.069899868,6603.85959006
# search time: 6600.070s
# total time: 19824.468s
c008,3,5,1,1082339,886336,1037851,1037851,600.00104729,600.187754216
c008,3,5,2,350773,329899,339081,339081,1200.005871149,1200.422995448
c008,3,5,3,224901,205032,208588,208588,1800.0066838980001,1800.678793668
c008,3,5,4,135618,126889,130947,130947,2400.0071009460003,2400.960612304
c008,3,5,5,108560,99294,102431,102431,3000.0084206740003,3001.276632339
c008,3,5,6,87202,79814,82051,82051,3600.023353846,3601.611946464
c008,3,5,7,72477,66341,68069,68069,4200.034707855,4201.936735912
c008,3,5,8,59092,53968,55384,55384,4800.039062147001,4802.225713534
c008,3,5,9,51324,46923,48171,48171,5400.045129030001,5402.512508583
c008,3,5,10,46577,42400,43583,43583,6000.065556766001,6002.815389636
c008,3,5,11,40665,37247,38213,38213,6600.073031388,6603.186012754
# search time: 6600.073s
# total time: 26428.010s
c008,4,5,1,1072875,879851,1028947,1028947,600.001351464,600.170237283
c008,4,5,2,357077,335368,344847,344847,1200.006153668,1200.377925971
c008,4,5,3,221343,202129,205594,205594,1800.006362654,1800.578005337
c008,4,5,4,135754,126621,130850,130850,2400.009233895,2400.779132033
c008,4,5,5,107092,98137,101059,101059,3000.014742122,3000.970282248
c008,4,5,6,86161,78714,81035,81035,3600.015266821,3601.233100595
c008,4,5,7,71842,65628,67472,67472,4200.019654895999,4201.468470316
c008,4,5,8,60437,55023,56600,56600,4800.025322113999,4801.675232392
c008,4,5,9,51870,47391,48627,48627,5400.038618356999,5401.966998013
c008,4,5,10,46103,41660,43157,43157,6000.042270116999,6002.174513586
c008,4,5,11,40830,37281,38318,38318,6600.044730208999,6602.5633017
# search time: 6600.045s
# total time: 33030.930s
