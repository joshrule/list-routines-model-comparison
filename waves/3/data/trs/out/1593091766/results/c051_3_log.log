    Finished release [optimized] target(s) in 0.06s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c051_3.json out/1593091766/results/c051_3_best.csv out/1593091766/results/c051_3_predictions.csv out/1593091766/results/c051_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 3, 2, 6, 4]), o: IntList([3, 3, 3, 3, 3, 3, 3, 2, 6, 4]) }
#   Datum { i: IntList([2, 6, 4, 0, 8, 7, 0, 0, 9]), o: IntList([2, 2, 2, 2, 2, 2, 6, 4, 0, 8, 7, 0, 0, 9]) }
#   Datum { i: IntList([4, 1]), o: IntList([4, 4, 4, 4, 4, 4, 1]) }
#   Datum { i: IntList([5, 7, 0, 7, 3, 5, 8]), o: IntList([5, 5, 5, 5, 5, 5, 7, 0, 7, 3, 5, 8]) }
#   Datum { i: IntList([0, 1, 1]), o: IntList([0, 0, 0, 0, 0, 0, 1, 1]) }
#   Datum { i: IntList([6, 7, 6, 6, 7, 7]), o: IntList([6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 7]) }
#   Datum { i: IntList([5, 4, 4, 4, 2, 2, 5]), o: IntList([5, 5, 5, 5, 5, 5, 4, 4, 4, 2, 2, 5]) }
#   Datum { i: IntList([2, 4, 5, 1, 3, 6, 8, 0]), o: IntList([2, 2, 2, 2, 2, 2, 4, 5, 1, 3, 6, 8, 0]) }
#   Datum { i: IntList([8]), o: IntList([8, 8, 8, 8, 8, 8]) }
#   Datum { i: IntList([1, 9, 3, 8, 8, 1, 3, 3, 3]), o: IntList([1, 1, 1, 1, 1, 1, 9, 3, 8, 8, 1, 3, 3, 3]) }
#   Datum { i: IntList([9, 9, 9, 9]), o: IntList([9, 9, 9, 9, 9, 9, 9, 9, 9]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c051,0,3,1,807105,657012,772690,772690,600.000496033,602.831365853
c051,0,3,2,162967,147114,151412,151412,1200.00189215,1204.384631431
c051,0,3,3,129323,117170,120770,120770,1800.002545377,1805.553892742
c051,0,3,4,112172,102726,106070,106070,2400.005509112,2406.447105699
c051,0,3,5,82777,75444,78067,78067,3000.005811994,3007.247789053
c051,0,3,6,70928,63594,66564,66564,3600.00686111,3608.114532218
c051,0,3,7,57959,52168,54036,54036,4200.016581479,4209.031257253
c051,0,3,8,47632,42888,44103,44103,4800.016687698,4810.099005561
c051,0,3,9,40137,35904,36906,36906,5400.021122934,5410.895117719
c051,0,3,10,40071,35966,36899,36899,6000.038606006,6011.72507787
c051,0,3,11,33806,30141,30974,30974,6600.056050778,6612.52688811
# search time: 6600.056s
# total time: 6612.738s
c051,1,3,1,1102818,907163,1058159,1058159,600.004671907,600.34555494
c051,1,3,2,261230,235898,242616,242616,1200.006462524,1200.865623224
c051,1,3,3,127098,114810,118167,118167,1800.0086891619999,1801.338013267
c051,1,3,4,114045,104662,107765,107765,2400.012251231,2401.659367719
c051,1,3,5,82297,74967,77591,77591,3000.014661301,3002.010443971
c051,1,3,6,70283,63144,65771,65771,3600.016483327,3602.340565212
c051,1,3,7,57161,51283,53248,53248,4200.021242199,4202.800766608
c051,1,3,8,47374,42673,43801,43801,4800.030373018,4803.225121802
c051,1,3,9,39228,35125,36089,36089,5400.055086144001,5403.707144493
c051,1,3,10,39721,35361,36480,36480,6000.061723682001,6004.0424641
c051,1,3,11,33540,29840,30777,30777,6600.073391212,6604.387602213
# search time: 6600.073s
# total time: 13217.503s
c051,2,3,1,1103852,902968,1057984,1057984,600.00223544,600.242319033
c051,2,3,2,266195,240622,247199,247199,1200.0028487620002,1200.558069136
c051,2,3,3,128704,116379,120001,120001,1800.0050841410002,1800.795548965
c051,2,3,4,111226,102236,105351,105351,2400.0051512490004,2401.004158318
c051,2,3,5,85154,77958,80020,80020,3000.0077669090006,3001.257316049
c051,2,3,6,71977,65396,67445,67445,3600.0084939700005,3601.49446701
c051,2,3,7,56411,50352,52563,52563,4200.017772108001,4201.823198283
c051,2,3,8,47535,43087,44231,44231,4800.025893628001,4802.078520258
c051,2,3,9,39927,35547,36659,36659,5400.0282026800005,5402.300476868
c051,2,3,10,39599,35280,36379,36379,6000.033797897,6002.605182856
c051,2,3,11,33582,29972,30857,30857,6600.0411361120005,6602.815843198
# search time: 6600.041s
# total time: 19820.846s
c051,3,3,1,1107159,904010,1060534,1060534,600.000323701,600.332839724
c051,3,3,2,261866,236420,243069,243069,1200.0039308350001,1200.60090844
c051,3,3,3,126410,113974,117364,117364,1800.0059674880001,1800.806862261
c051,3,3,4,111076,101340,105053,105053,2400.0112815350003,2400.986485817
c051,3,3,5,81667,74180,76895,76895,3000.01463782,3001.138213414
c051,3,3,6,70021,63571,65837,65837,3600.025245008,3601.320344764
c051,3,3,7,56288,50354,52457,52457,4200.048768976,4201.539992411
c051,3,3,8,47393,42744,43863,43863,4800.0527608620005,4801.716564003
c051,3,3,9,40305,36130,37199,37199,5400.06340005,5401.90120647
c051,3,3,10,39696,35143,36494,36494,6000.077345294,6002.066021605
c051,3,3,11,33261,29722,30541,30541,6600.1133724910005,6602.317830343
# search time: 6600.113s
# total time: 26423.480s
c051,4,3,1,1089729,891805,1044587,1044587,600.250820504,600.429952517
c051,4,3,2,259495,234400,240761,240761,1200.25104793,1200.639471021
c051,4,3,3,127702,115652,119231,119231,1800.2519066109999,1800.794990146
c051,4,3,4,109381,99501,103291,103291,2400.2529245349997,2400.915300994
c051,4,3,5,80610,72681,75737,75737,3000.2582628129994,3001.029362815
c051,4,3,6,69936,63136,65439,65439,3600.2609832299995,3601.129347078
c051,4,3,7,56886,51078,52876,52876,4200.268268541,4201.35049725
c051,4,3,8,47456,42776,43943,43943,4800.269773393,4801.470899224
c051,4,3,9,39305,35242,36243,36243,5400.275023896,5401.633208513
c051,4,3,10,39346,35112,36196,36196,6000.289372822,6001.763643858
c051,4,3,11,33487,29798,30699,30699,6600.3036958309995,6601.895446105
# search time: 6600.304s
# total time: 33025.786s
