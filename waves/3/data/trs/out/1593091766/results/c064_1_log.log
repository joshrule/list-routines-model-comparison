    Finished release [optimized] target(s) in 0.03s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c064_1.json out/1593091766/results/c064_1_best.csv out/1593091766/results/c064_1_predictions.csv out/1593091766/results/c064_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([4, 5, 0, 0]), o: IntList([5, 0]) }
#   Datum { i: IntList([3, 8, 3, 8, 3]), o: IntList([8, 3, 8]) }
#   Datum { i: IntList([4, 9, 4, 9, 4, 9, 9, 9, 9, 9]), o: IntList([9, 4, 9, 4, 9, 9, 9, 9]) }
#   Datum { i: IntList([5, 7, 7, 9, 8, 1, 4, 0, 6]), o: IntList([7, 7, 9, 8, 1, 4, 0]) }
#   Datum { i: IntList([2, 1, 1, 2, 2, 7, 2, 7]), o: IntList([1, 1, 2, 2, 7, 2]) }
#   Datum { i: IntList([6, 6, 5, 8, 5, 6, 5, 8, 4, 1]), o: IntList([6, 5, 8, 5, 6, 5, 8, 4]) }
#   Datum { i: IntList([2, 0, 4, 5, 7, 9, 8]), o: IntList([0, 4, 5, 7, 9]) }
#   Datum { i: IntList([0, 2]), o: IntList([]) }
#   Datum { i: IntList([6, 1, 9, 5, 0, 2, 3, 7]), o: IntList([1, 9, 5, 0, 2, 3]) }
#   Datum { i: IntList([2, 0, 3, 1, 4, 8]), o: IntList([0, 3, 1, 4]) }
#   Datum { i: IntList([3, 0, 3]), o: IntList([0]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c064,0,1,1,1239184,1072250,1203167,1203167,600.000026747,601.909183491
c064,0,1,2,693437,653496,672762,672762,1200.001130294,1202.908798472
c064,0,1,3,446407,420831,426454,426454,1800.001194994,1803.766021539
c064,0,1,4,225415,205124,205952,205952,2400.003469726,2404.436384485
c064,0,1,5,164329,150419,151141,151141,3000.003695998,3005.01417816
c064,0,1,6,126624,115721,116274,116274,3600.004089105,3605.595493019
c064,0,1,7,94170,86459,86836,86836,4200.007746544,4206.205160864
c064,0,1,8,77997,70641,70965,70965,4800.009202382,4806.822728598
c064,0,1,9,72510,65339,67496,67496,5400.017198128,5407.418694726
c064,0,1,10,63123,57110,59061,59061,6000.0231166739995,6008.063781279
c064,0,1,11,58763,52982,54792,54792,6600.027726947999,6608.611086751
# search time: 6600.028s
# total time: 6609.031s
c064,1,1,1,1230210,1043907,1189327,1189327,600.004747668,600.313040545
c064,1,1,2,699876,660291,679112,679112,1200.0050177490002,1200.709074889
c064,1,1,3,455534,430319,435893,435893,1800.005167273,1801.078113712
c064,1,1,4,229072,208619,209527,209527,2400.00629943,2401.378386667
c064,1,1,5,162568,148586,149305,149305,3000.007822972,3001.625526824
c064,1,1,6,125909,115225,115593,115593,3600.008150764,3601.922277127
c064,1,1,7,93931,86259,86676,86676,4200.013359811001,4202.186807935
c064,1,1,8,78865,72337,72743,72743,4800.015606929001,4802.424779034
c064,1,1,9,72182,65025,67308,67308,5400.020474517,5402.791062513
c064,1,1,10,62768,56647,58700,58700,6000.024598899,6003.048633164
c064,1,1,11,58321,52818,54564,54564,6600.039365627,6603.377415289
# search time: 6600.039s
# total time: 13213.143s
c064,2,1,1,1302931,1062328,1247909,1247909,600.000035467,600.22532081
c064,2,1,2,693145,653585,672419,672419,1200.000071582,1200.525708514
c064,2,1,3,446738,421296,426944,426944,1800.009232898,1800.812003452
c064,2,1,4,229772,209397,210287,210287,2400.010173406,2401.027514264
c064,2,1,5,162283,148224,148953,148953,3000.011550938,3001.212026631
c064,2,1,6,125577,115039,115422,115422,3600.014621882,3601.440580409
c064,2,1,7,93498,85743,86143,86143,4200.017377289,4201.656676222
c064,2,1,8,78490,71390,71752,71752,4800.021205722001,4801.908637068
c064,2,1,9,72193,65147,67348,67348,5400.022231728,5402.158075854
c064,2,1,10,61875,55755,57662,57662,6000.024567958,6002.391510375
c064,2,1,11,57912,52177,53927,53927,6600.029816442,6602.607901625
# search time: 6600.030s
# total time: 19816.480s
c064,3,1,1,1296132,1118766,1257819,1257819,600.001024895,600.293155348
c064,3,1,2,705635,665886,684869,684869,1200.00124715,1200.546870807
c064,3,1,3,446267,420777,426438,426438,1800.0019174569998,1800.771989501
c064,3,1,4,228189,207251,208132,208132,2400.0023174599996,2400.943855407
c064,3,1,5,161438,147513,148208,148208,3000.004564522,3001.106881732
c064,3,1,6,125990,115261,115780,115780,3600.0047555949996,3601.223067501
c064,3,1,7,91137,83524,83762,83762,4200.008335326,4201.396405157
c064,3,1,8,77503,70789,71186,71186,4800.0126004349995,4801.594395168
c064,3,1,9,71721,64627,66754,66754,5400.018670418,5401.777096537
c064,3,1,10,61104,55065,56856,56856,6000.020391784,6001.978446992
c064,3,1,11,58203,52556,54302,54302,6600.026759513,6602.10511551
# search time: 6600.027s
# total time: 26419.630s
c064,4,1,1,1339257,1160620,1300850,1300850,600.00033849,600.31218143
c064,4,1,2,724948,681707,701882,701882,1200.009945663,1200.555522026
c064,4,1,3,453690,428179,433826,433826,1800.011688411,1800.752684858
c064,4,1,4,225878,205791,206737,206737,2400.014190646,2400.91568689
c064,4,1,5,160965,147175,147883,147883,3000.020702586,3001.056436616
c064,4,1,6,126240,115648,116214,116214,3600.022122214,3601.178310774
c064,4,1,7,92867,85340,85693,85693,4200.0312285479995,4201.347788568
c064,4,1,8,77546,70955,71345,71345,4800.0313440069995,4801.491445437
c064,4,1,9,71391,64180,66296,66296,5400.047838611999,5401.688282358
c064,4,1,10,64573,58469,60643,60643,6000.051247242,6001.874648394
c064,4,1,11,58035,52351,54129,54129,6600.054178824,6601.999108723
# search time: 6600.054s
# total time: 33022.346s
