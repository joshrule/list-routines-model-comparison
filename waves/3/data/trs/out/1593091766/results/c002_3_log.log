    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.38s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c002_3.json out/1593091766/results/c002_3_best.csv out/1593091766/results/c002_3_predictions.csv out/1593091766/results/c002_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 1, 1]), o: IntList([1]) }
#   Datum { i: IntList([8, 8, 4, 7, 7, 9, 5, 0]), o: IntList([4]) }
#   Datum { i: IntList([4]), o: IntList([]) }
#   Datum { i: IntList([9, 9, 9, 9, 0, 0, 9]), o: IntList([9]) }
#   Datum { i: IntList([3, 3]), o: IntList([]) }
#   Datum { i: IntList([3, 1]), o: IntList([]) }
#   Datum { i: IntList([7, 3, 2, 1, 6, 2, 4, 5]), o: IntList([2]) }
#   Datum { i: IntList([5, 5]), o: IntList([]) }
#   Datum { i: IntList([9, 3, 6, 0]), o: IntList([6]) }
#   Datum { i: IntList([7, 7, 7, 7]), o: IntList([7]) }
#   Datum { i: IntList([8]), o: IntList([]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c002,0,3,1,1256964,1033112,1205955,1205955,600.000119382,601.79968853
c002,0,3,2,767474,727587,748015,748015,1200.007075306,1202.747156214
c002,0,3,3,616032,570537,593149,593149,1800.007240883,1803.623185712
c002,0,3,4,565417,527849,548153,548153,2400.007671164,2404.110873334
c002,0,3,5,476826,435162,458941,458941,3000.007868263,3004.691606
c002,0,3,6,453292,419669,437194,437194,3600.009680084,3605.130564109
c002,0,3,7,444938,413179,430686,430686,4200.009934673,4205.537263354
c002,0,3,8,356733,330699,345243,345243,4800.0103664650005,4805.956705438
c002,0,3,9,292328,270966,282512,282512,5400.013275526,5406.477646038
c002,0,3,10,264245,243846,254566,254566,6000.013768339,6006.9666307
c002,0,3,11,282667,260051,272293,272293,6600.014054009001,6607.302942541
# search time: 6600.014s
# total time: 6607.916s
c002,1,3,1,1304406,1066451,1250126,1250126,600.001168057,600.227302052
c002,1,3,2,806554,763626,785421,785421,1200.001407468,1200.545751352
c002,1,3,3,638739,590110,614454,614454,1800.001838704,1800.87877875
c002,1,3,4,587103,549127,569305,569305,2400.004565713,2401.131360113
c002,1,3,5,479638,437937,461593,461593,3000.005674147,3001.40137456
c002,1,3,6,453114,419132,436758,436758,3600.006245341,3601.63113215
c002,1,3,7,438461,406785,424221,424221,4200.00697026,4201.856321862
c002,1,3,8,364146,337897,352281,352281,4800.00807688,4802.089121021
c002,1,3,9,295007,273334,285144,285144,5400.009131263,5402.340436322
c002,1,3,10,265094,244545,255338,255338,6000.0134449,6002.627978166
c002,1,3,11,283364,260890,272990,272990,6600.013980975,6602.841705311
# search time: 6600.014s
# total time: 13211.719s
c002,2,3,1,1272933,1042673,1221031,1221031,600.001466239,600.19161669
c002,2,3,2,799413,756626,778375,778375,1200.002530894,1200.429011983
c002,2,3,3,653381,604105,628740,628740,1800.009149734,1800.673069069
c002,2,3,4,582980,543612,564671,564671,2400.0094993069997,2400.854678814
c002,2,3,5,478757,436917,460901,460901,3000.0097540459997,3001.047920756
c002,2,3,6,453776,420762,437925,437925,3600.0098500589997,3601.231476408
c002,2,3,7,445201,413534,430841,430841,4200.010106035,4201.403414167
c002,2,3,8,365533,339562,353812,353812,4800.019333568,4801.578465703
c002,2,3,9,291345,269822,281357,281357,5400.0261468809995,5401.787446
c002,2,3,10,264162,243632,254485,254485,6000.026345654,6001.979573964
c002,2,3,11,280714,258699,270548,270548,6600.028327235,6602.143510588
# search time: 6600.028s
# total time: 19814.796s
c002,3,3,1,1296763,1065806,1244102,1244102,600.003162741,600.194841602
c002,3,3,2,791175,750059,770994,770994,1200.003742886,1200.400154805
c002,3,3,3,644966,596442,620708,620708,1800.004887063,1800.616595839
c002,3,3,4,583350,544324,565403,565403,2400.005159488,2400.790576252
c002,3,3,5,467613,425931,449356,449356,3000.0053198180003,3000.954938167
c002,3,3,6,454054,420675,438080,438080,3600.0128330650005,3601.124913659
c002,3,3,7,439083,407945,425071,425071,4200.017604256001,4201.284473562
c002,3,3,8,363830,337998,352193,352193,4800.018768774001,4801.418956309
c002,3,3,9,293371,271684,283464,283464,5400.0213173170005,5401.588634151
c002,3,3,10,266253,245661,256482,256482,6000.024129909,6001.773231326
c002,3,3,11,274410,252875,264399,264399,6600.024204303,6601.936388892
# search time: 6600.024s
# total time: 26417.661s
c002,4,3,1,1273131,1044549,1221301,1221301,600.005856798,600.197067665
c002,4,3,2,791397,749703,770839,770839,1200.005933211,1200.381958549
c002,4,3,3,647041,597614,622675,622675,1800.006877416,1800.569563663
c002,4,3,4,573160,535400,555894,555894,2400.006888375,2400.724219
c002,4,3,5,478237,436660,460456,460456,3000.007248895,3000.864695559
c002,4,3,6,459579,425372,442942,442942,3600.007629814,3600.998760599
c002,4,3,7,433768,402845,420106,420106,4200.008333099,4201.135499506
c002,4,3,8,360284,334416,348660,348660,4800.008922391,4801.271532857
c002,4,3,9,292183,270691,282322,282322,5400.009323135,5401.407360849
c002,4,3,10,262188,242015,252658,252658,6000.0097856990005,6001.527278465
c002,4,3,11,281839,259638,271584,271584,6600.016986966,6601.65168831
# search time: 6600.017s
# total time: 33020.167s
