    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.75s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c009_1.json out/1593091766/results/c009_1_best.csv out/1593091766/results/c009_1_predictions.csv out/1593091766/results/c009_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1, 1, 1, 1]) }
#   Datum { i: IntList([6, 6]), o: IntList([6, 6]) }
#   Datum { i: IntList([0, 5, 2, 2, 2]), o: IntList([0, 5, 2, 2, 2]) }
#   Datum { i: IntList([5, 3, 7, 3, 8, 7, 8, 7]), o: IntList([5, 3, 7, 3, 8, 7]) }
#   Datum { i: IntList([9, 4, 9, 9, 4, 9, 9]), o: IntList([9, 4, 9, 9, 4, 9]) }
#   Datum { i: IntList([3, 2, 1, 4, 3, 0, 4]), o: IntList([3, 2, 1, 4, 3, 0]) }
#   Datum { i: IntList([7]), o: IntList([7]) }
#   Datum { i: IntList([]), o: IntList([]) }
#   Datum { i: IntList([6, 7, 0]), o: IntList([6, 7, 0]) }
#   Datum { i: IntList([5, 8, 8, 9, 9, 5, 8, 5]), o: IntList([5, 8, 8, 9, 9, 5]) }
#   Datum { i: IntList([6, 2, 4, 4, 4, 8, 8]), o: IntList([6, 2, 4, 4, 4, 8]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c009,0,1,1,1104212,935058,1066966,1066966,600.000358386,602.032063136
c009,0,1,2,498249,465433,483543,483543,1200.000855062,1203.0942577
c009,0,1,3,477242,436169,456968,456968,1800.001064959,1803.770019763
c009,0,1,4,280237,262426,271841,271841,2400.001463154,2404.193439209
c009,0,1,5,178029,165749,167357,167357,3000.0015021179997,3004.819144276
c009,0,1,6,128668,116577,118814,118814,3600.005497326,3605.46142368
c009,0,1,7,95011,85955,86957,86957,4200.005941179999,4206.214231951
c009,0,1,8,97886,84851,85670,85670,4800.011515296,4806.917824047
c009,0,1,9,101039,86369,88419,88419,5400.011646277,5407.438341186
c009,0,1,10,92780,80694,83896,83896,6000.013740553,6007.923021786
c009,0,1,11,76748,67388,70109,70109,6600.021367689001,6608.331815033
# search time: 6600.021s
# total time: 6608.707s
c009,1,1,1,1155308,996668,1120862,1120862,600.000008175,600.320235418
c009,1,1,2,483934,452845,470102,470102,1200.000703016,1200.696040981
c009,1,1,3,476882,435879,456424,456424,1800.000803038,1801.005468215
c009,1,1,4,287701,269698,279321,279321,2400.002397649,2401.250126921
c009,1,1,5,163243,151220,152303,152303,3000.00491654,3001.577660679
c009,1,1,6,118611,108070,109291,109291,3600.006653138,3601.921429939
c009,1,1,7,94830,85903,86960,86960,4200.0108092909995,4202.324158605
c009,1,1,8,97642,84733,85535,85535,4800.027744507999,4802.641486925
c009,1,1,9,101677,86915,89065,89065,5400.028600424999,5402.930452174
c009,1,1,10,92619,80414,83542,83542,6000.033857461,6003.120502193
c009,1,1,11,73608,63980,66278,66278,6600.042804363,6603.41036885
# search time: 6600.043s
# total time: 13212.731s
c009,2,1,1,1096856,931918,1060623,1060623,600.007436539,600.287912761
c009,2,1,2,505491,471900,490374,490374,1200.015139558,1200.574321007
c009,2,1,3,475406,434776,455366,455366,1800.015799452,1800.82817709
c009,2,1,4,276166,258675,268019,268019,2400.016246305,2400.974742182
c009,2,1,5,177708,165589,167264,167264,3000.0173706570004,3001.177829526
c009,2,1,6,121707,109936,111772,111772,3600.018865803,3601.419731164
c009,2,1,7,91426,82407,83415,83415,4200.0206611250005,4201.675644436
c009,2,1,8,97927,85118,85935,85935,4800.020745270001,4801.939390174
c009,2,1,9,101028,86244,88443,88443,5400.034086897001,5402.135652098
c009,2,1,10,93078,80978,83837,83837,6000.041233532001,6002.308917439
c009,2,1,11,76120,66710,69404,69404,6600.047762259001,6602.468483474
# search time: 6600.048s
# total time: 19815.783s
c009,3,1,1,1084947,919011,1048432,1048432,600.001403609,600.220188547
c009,3,1,2,490280,457887,475903,475903,1200.001774092,1200.443909201
c009,3,1,3,473079,432400,453136,453136,1800.002201087,1800.634955208
c009,3,1,4,276227,258497,267950,267950,2400.003941591,2400.763582249
c009,3,1,5,163735,151780,152851,152851,3000.005871156,3000.94697615
c009,3,1,6,118860,108291,109561,109561,3600.008282368,3601.159597669
c009,3,1,7,89766,80958,81932,81932,4200.014950062,4201.364314425
c009,3,1,8,97053,84256,85051,85051,4800.018502511,4801.559419263
c009,3,1,9,99918,85396,87476,87476,5400.0197958690005,5401.710349369
c009,3,1,10,92669,80695,83771,83771,6000.0213681860005,6001.851989167
c009,3,1,11,74029,64576,66944,66944,6600.0264376430005,6601.985691852
# search time: 6600.026s
# total time: 26418.328s
c009,4,1,1,1129681,923917,1082551,1082551,600.000123642,600.173993479
c009,4,1,2,488640,456818,474421,474421,1200.000524392,1200.354208668
c009,4,1,3,470590,429960,450564,450564,1800.001937906,1800.520437617
c009,4,1,4,277102,259803,269128,269128,2400.00301464,2400.631118589
c009,4,1,5,162520,150530,151627,151627,3000.004912639,3000.782821163
c009,4,1,6,66859,60348,61021,61021,3600.0129224869997,3600.931648174
c009,4,1,7,55773,50384,50956,50956,4200.015949768,4201.109282032
c009,4,1,8,56870,49439,49894,49894,4800.018610534,4801.25424045
c009,4,1,9,57800,49859,51211,51211,5400.022509318,5401.391027103
c009,4,1,10,52812,45391,47286,47286,6000.044322979999,6001.486837145
c009,4,1,11,43253,37894,39644,39644,6600.062863363999,6601.623326453
# search time: 6600.063s
# total time: 33020.547s
