    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.72s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c006_4.json out/1593091766/results/c006_4_best.csv out/1593091766/results/c006_4_predictions.csv out/1593091766/results/c006_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([9, 9, 9]), o: IntList([9, 9]) }
#   Datum { i: IntList([2, 2, 2, 2, 2]), o: IntList([2, 2]) }
#   Datum { i: IntList([8, 0, 8, 7, 4, 0, 4]), o: IntList([8, 0]) }
#   Datum { i: IntList([6, 8, 5]), o: IntList([6, 8]) }
#   Datum { i: IntList([5, 5, 1, 5, 7, 7]), o: IntList([5, 5]) }
#   Datum { i: IntList([2, 0, 4, 6, 5]), o: IntList([2, 0]) }
#   Datum { i: IntList([0, 4, 0, 0, 0, 4]), o: IntList([0, 4]) }
#   Datum { i: IntList([9, 7, 7]), o: IntList([9, 7]) }
#   Datum { i: IntList([3, 1, 1, 1, 3, 1, 1]), o: IntList([3, 1]) }
#   Datum { i: IntList([4, 3, 3, 5, 5]), o: IntList([4, 3]) }
#   Datum { i: IntList([7, 8, 5, 7]), o: IntList([7, 8]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c006,0,4,1,1192977,1045664,1162559,1162559,600.000815291,602.19415515
c006,0,4,2,689076,645534,666140,666140,1200.00120449,1203.095280313
c006,0,4,3,479859,444822,455722,455722,1800.0034038499998,1803.921581629
c006,0,4,4,361663,334419,343866,343866,2400.003645628,2404.596514378
c006,0,4,5,301440,281896,291737,291737,3000.004664437,3005.040914548
c006,0,4,6,252325,235024,243565,243565,3600.005698989,3605.482599533
c006,0,4,7,185096,170888,178805,178805,4200.006334275,4206.110486786
c006,0,4,8,156618,144546,151359,151359,4800.00965774,4806.753745767
c006,0,4,9,142071,131028,137582,137582,5400.011114064,5407.34834809
c006,0,4,10,120769,111260,116600,116600,6000.013950683,6008.086984299
c006,0,4,11,107715,98988,103945,103945,6600.014038155,6608.776686494
# search time: 6600.014s
# total time: 6609.126s
c006,1,4,1,1126667,923757,1080301,1080301,600.000876859,600.24408098
c006,1,4,2,625297,592276,608484,608484,1200.001433858,1200.613198551
c006,1,4,3,489945,453522,465399,465399,1800.001448162,1800.952890362
c006,1,4,4,356138,329120,338236,338236,2400.0024370700003,2401.293063236
c006,1,4,5,299194,279962,289652,289652,3000.005031523,3001.518106339
c006,1,4,6,253860,236357,244727,244727,3600.006017703,3601.756890398
c006,1,4,7,183343,169738,177158,177158,4200.009910574,4202.09201453
c006,1,4,8,155971,144196,150765,150765,4800.010644451,4802.417946518
c006,1,4,9,141436,130883,136997,136997,5400.011871864001,5402.741298449
c006,1,4,10,119601,110193,115381,115381,6000.012700650001,6003.12375707
c006,1,4,11,107450,98510,103585,103585,6600.017839514001,6603.480760477
# search time: 6600.018s
# total time: 13213.091s
c006,2,4,1,1174352,1023100,1142283,1142283,600.000398408,600.300521053
c006,2,4,2,690299,645669,666705,666705,1200.000970994,1200.569902395
c006,2,4,3,481530,446191,457519,457519,1800.0044167,1800.812541036
c006,2,4,4,359936,332911,342414,342414,2400.004751112,2401.036954057
c006,2,4,5,299776,280550,290237,290237,3000.009640742,3001.200943727
c006,2,4,6,254562,236828,245149,245149,3600.010427562,3601.369173889
c006,2,4,7,181906,168400,175966,175966,4200.011615141,4201.612318725
c006,2,4,8,155484,143666,150306,150306,4800.016575374,4801.846871773
c006,2,4,9,140659,130143,136393,136393,5400.0184294910005,5402.101182346
c006,2,4,10,119836,110033,115585,115585,6000.027135531001,6002.328457663
c006,2,4,11,105915,97077,102016,102016,6600.028479980001,6602.589220449
# search time: 6600.028s
# total time: 19816.180s
c006,3,4,1,1156456,1004501,1124116,1124116,600.008055637,600.27446169
c006,3,4,2,686236,641891,662844,662844,1200.011764495,1200.49308233
c006,3,4,3,482593,447312,458508,458508,1800.0126987150002,1800.703532631
c006,3,4,4,351297,324320,333476,333476,2400.015386606,2400.893523316
c006,3,4,5,298108,278912,288484,288484,3000.020822171,3001.038293958
c006,3,4,6,246592,228198,237297,237297,3600.020941302,3601.184443427
c006,3,4,7,183823,169727,177552,177552,4200.023597749,4201.346245139
c006,3,4,8,154931,142928,149703,149703,4800.027888044,4801.517706882
c006,3,4,9,141860,131092,137380,137380,5400.0338807,5401.709162236
c006,3,4,10,120511,110847,116200,116200,6000.0338889839995,6001.899725429
c006,3,4,11,106395,97556,102577,102577,6600.038317512,6602.086253971
# search time: 6600.038s
# total time: 26418.890s
c006,4,4,1,1160849,1001068,1126192,1126192,600.001085184,600.230402554
c006,4,4,2,690371,646814,667338,667338,1200.001739579,1200.426753559
c006,4,4,3,481988,446597,457667,457667,1800.002843341,1800.607973844
c006,4,4,4,352911,326145,335207,335207,2400.00402457,2400.782982665
c006,4,4,5,299195,279509,289404,289404,3000.005029723,3000.903301407
c006,4,4,6,257123,239020,247945,247945,3600.006007241,3601.01508191
c006,4,4,7,181380,167548,175247,175247,4200.011422063,4201.14802185
c006,4,4,8,154076,142175,148941,148941,4800.012043165,4801.272878109
c006,4,4,9,140325,129580,135888,135888,5400.013158861,5401.432168912
c006,4,4,10,120040,110257,115751,115751,6000.014631777,6001.559712578
c006,4,4,11,106771,98231,103077,103077,6600.016793034,6601.826114724
# search time: 6600.017s
# total time: 33021.332s
