    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.46s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c004_2.json out/1593091766/results/c004_2_best.csv out/1593091766/results/c004_2_predictions.csv out/1593091766/results/c004_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 7, 3]), o: IntList([]) }
#   Datum { i: IntList([0, 3, 2, 9, 4, 6, 8, 4, 8]), o: IntList([8]) }
#   Datum { i: IntList([5, 3, 4, 3, 4, 4, 5]), o: IntList([5]) }
#   Datum { i: IntList([7, 4]), o: IntList([]) }
#   Datum { i: IntList([0, 1, 0, 6, 9, 1, 1, 0]), o: IntList([1]) }
#   Datum { i: IntList([4, 4, 4]), o: IntList([]) }
#   Datum { i: IntList([5, 9, 8, 8, 5, 0, 0, 2]), o: IntList([0]) }
#   Datum { i: IntList([9, 9]), o: IntList([]) }
#   Datum { i: IntList([9, 6, 1, 0, 6, 4, 7]), o: IntList([7]) }
#   Datum { i: IntList([5, 6, 0, 2, 9, 7, 3, 2, 1, 8]), o: IntList([3]) }
#   Datum { i: IntList([0]), o: IntList([]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c004,0,2,1,1248954,1058218,1206959,1206959,600.002409122,601.799292225
c004,0,2,2,953773,883237,928985,928985,1200.0082219390001,1202.781882154
c004,0,2,3,688348,650602,673469,673469,1800.0101347900002,1803.68566568
c004,0,2,4,458746,423925,443488,443488,2400.010288753,2404.51942466
c004,0,2,5,455489,419765,439789,439789,3000.010425839,3005.117212776
c004,0,2,6,250061,226898,237769,237769,3600.011296898,3605.984619859
c004,0,2,7,306047,283320,296075,296075,4200.012761370001,4206.691443369
c004,0,2,8,198247,185140,193064,193064,4800.014648374001,4807.418366918
c004,0,2,9,205938,192060,200374,200374,5400.016374165001,5408.107137982
c004,0,2,10,142008,131820,137675,137675,6000.016425226001,6008.979525712
c004,0,2,11,102488,94079,98449,98449,6600.021134870001,6609.747075052
# search time: 6600.021s
# total time: 6610.279s
c004,1,2,1,1352523,1192336,1319041,1319041,600.000618941,600.458038936
c004,1,2,2,938976,867505,913983,913983,1200.001931652,1200.879105585
c004,1,2,3,696860,659979,680881,680881,1800.0060658319999,1801.299499127
c004,1,2,4,475890,439703,460168,460168,2400.00946235,2401.698092239
c004,1,2,5,461472,426095,446244,446244,3000.01108269,3001.998824175
c004,1,2,6,243801,221516,232102,232102,3600.012528996,3602.406123593
c004,1,2,7,308702,285621,298519,298519,4200.016654307,4202.746198494
c004,1,2,8,231453,213962,223832,223832,4800.020493278,4803.065246364
c004,1,2,9,229298,212021,222127,222127,5400.021466047,5403.40314744
c004,1,2,10,155528,143799,150508,150508,6000.025175648,6003.776536115
c004,1,2,11,112392,103986,108757,108757,6600.029703401,6604.142192513
# search time: 6600.030s
# total time: 13215.298s
c004,2,2,1,1306555,1123025,1266368,1266368,600.000136496,600.276801176
c004,2,2,2,962647,887753,936166,936166,1200.009733366,1200.589676273
c004,2,2,3,695535,658320,679437,679437,1800.009742786,1800.886487209
c004,2,2,4,459043,424140,443625,443625,2400.010232124,2401.134068585
c004,2,2,5,463542,428169,448452,448452,3000.010800735,3001.370734238
c004,2,2,6,239428,216722,226916,226916,3600.011042211,3601.642295265
c004,2,2,7,290517,271409,282209,282209,4200.018972206,4201.895109012
c004,2,2,8,203491,189637,197667,197667,4800.026791444,4802.189963504
c004,2,2,9,206241,192365,200635,200635,5400.033213448,5402.478672222
c004,2,2,10,140880,130285,135957,135957,6000.046761745,6002.773612192
c004,2,2,11,108942,100667,105385,105385,6600.049225965,6603.081595809
# search time: 6600.049s
# total time: 19819.611s
c004,3,2,1,1277586,1047701,1225275,1225275,600.001094822,600.182927386
c004,3,2,2,966463,893990,940897,940897,1200.0018784200001,1200.442756654
c004,3,2,3,695632,658298,680064,680064,1800.0035067550002,1800.687204008
c004,3,2,4,453689,418930,438332,438332,2400.004517882,2400.88954191
c004,3,2,5,464437,428980,449267,449267,3000.004768197,3001.065722431
c004,3,2,6,236898,214536,224717,224717,3600.005761051,3601.271061978
c004,3,2,7,320839,296974,310287,310287,4200.006563751,4201.452005718
c004,3,2,8,226086,209410,219259,219259,4800.006927986,4801.635058135
c004,3,2,9,224347,207867,217663,217663,5400.007216427,5401.839431395
c004,3,2,10,153590,141825,148372,148372,6000.009010619,6002.072110273
c004,3,2,11,109765,101330,106094,106094,6600.012085176,6602.265892935
# search time: 6600.012s
# total time: 26422.391s
c004,4,2,1,1320677,1152410,1284501,1284501,600.000002567,600.265085762
c004,4,2,2,968751,892790,942098,942098,1200.00581902,1200.514917633
c004,4,2,3,688321,652095,672519,672519,1800.005904472,1800.745945486
c004,4,2,4,455841,420949,440556,440556,2400.006280705,2400.944808592
c004,4,2,5,462649,427133,447327,447327,3000.0105583719997,3001.121805144
c004,4,2,6,247094,224424,235200,235200,3600.010978303,3601.296835803
c004,4,2,7,319957,296442,309398,309398,4200.012438297999,4201.441936363
c004,4,2,8,224841,208209,218000,218000,4800.019503138999,4801.614678433
c004,4,2,9,226086,209096,219052,219052,5400.034123424999,5401.798439701
c004,4,2,10,155639,143724,150183,150183,6000.042475143999,6001.961233625
c004,4,2,11,107006,98505,103077,103077,6600.043058841999,6602.139150645
# search time: 6600.043s
# total time: 33025.397s
