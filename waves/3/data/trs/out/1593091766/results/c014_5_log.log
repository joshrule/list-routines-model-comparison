    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.07s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c014_5.json out/1593091766/results/c014_5_best.csv out/1593091766/results/c014_5_predictions.csv out/1593091766/results/c014_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([9, 9, 4, 4, 9, 4]), o: IntList([4, 4, 9, 4]) }
#   Datum { i: IntList([1, 0, 0, 1, 1]), o: IntList([0, 1, 1]) }
#   Datum { i: IntList([4, 2, 3, 3, 6, 7, 8]), o: IntList([3, 3, 6, 7, 8]) }
#   Datum { i: IntList([3, 0, 5, 7, 7, 5, 3, 0, 5]), o: IntList([5, 7, 7, 5, 3]) }
#   Datum { i: IntList([9, 9, 1]), o: IntList([1]) }
#   Datum { i: IntList([2, 3, 0]), o: IntList([0]) }
#   Datum { i: IntList([5, 4, 5, 8, 6, 2, 8]), o: IntList([5, 8, 6, 2, 8]) }
#   Datum { i: IntList([9]), o: IntList([]) }
#   Datum { i: IntList([0, 7, 9, 6, 1, 8, 2, 3]), o: IntList([9, 6, 1, 8, 2]) }
#   Datum { i: IntList([6, 3, 0, 4]), o: IntList([0, 4]) }
#   Datum { i: IntList([9, 9]), o: IntList([]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c014,0,5,1,902224,739193,864793,864793,600.014594435,603.041388191
c014,0,5,2,287553,269519,277155,277155,1200.025582106,1204.641654914
c014,0,5,3,211917,194675,200721,200721,1800.026439787,1805.877761985
c014,0,5,4,139293,128429,133398,133398,2400.026860424,2406.766150087
c014,0,5,5,81207,75227,75993,75993,3000.030458184,3008.209442342
c014,0,5,6,92996,85375,86043,86043,3600.036949155,3609.288566082
c014,0,5,7,81321,75828,77752,77752,4200.043070791,4210.250164562
c014,0,5,8,63765,60225,61595,61595,4800.046351939,4811.21766724
c014,0,5,9,62197,57534,59867,59867,5400.048750477,5412.164774088
c014,0,5,10,47480,43744,45647,45647,6000.052466114,6013.176388501
c014,0,5,11,45770,42610,44629,44629,6600.06015002,6614.024706357
# search time: 6600.060s
# total time: 6614.418s
c014,1,5,1,675620,580936,654855,654855,600.000849227,600.363409438
c014,1,5,2,288915,270912,278552,278552,1200.000940712,1200.955828114
c014,1,5,3,211487,194367,200267,200267,1800.002616921,1801.5129249
c014,1,5,4,136873,126471,131250,131250,2400.0043820250003,2401.971799896
c014,1,5,5,79971,74000,74754,74754,3000.010715018,3002.704854922
c014,1,5,6,93297,85580,86216,86216,3600.0144600800004,3603.219326849
c014,1,5,7,82553,76876,78682,78682,4200.015877442001,4203.768501785
c014,1,5,8,63111,59623,60858,60858,4800.021611802001,4804.396929008
c014,1,5,9,62538,57716,60137,60137,5400.022779522001,5404.841118553
c014,1,5,10,47762,44225,46223,46223,6000.030457779001,6005.306357934
c014,1,5,11,45762,42628,44656,44656,6600.038171878001,6605.757562145
# search time: 6600.038s
# total time: 13220.968s
c014,2,5,1,656806,557120,634765,634765,600.000673875,600.267422803
c014,2,5,2,280852,263050,270736,270736,1200.00347254,1200.645827932
c014,2,5,3,207500,190132,195877,195877,1800.004369929,1801.025505343
c014,2,5,4,229385,212912,220472,220472,2400.005495114,2401.304350677
c014,2,5,5,132982,122729,124008,124008,3000.005548191,3001.733745893
c014,2,5,6,155532,142683,143751,143751,3600.0081634589997,3602.090802303
c014,2,5,7,141066,131367,134276,134276,4200.009106859,4202.411658204
c014,2,5,8,110011,104177,106256,106256,4800.009500774,4802.76087171
c014,2,5,9,106580,98833,102797,102797,5400.01629548,5403.06142328
c014,2,5,10,81870,75644,78436,78436,6000.0222702559995,6003.425909389
c014,2,5,11,79048,73935,76826,76826,6600.025083543,6603.659565103
# search time: 6600.025s
# total time: 19825.255s
c014,3,5,1,1100649,902914,1055577,1055577,600.006016818,600.21526493
c014,3,5,2,452645,425128,437320,437320,1200.0074679690001,1200.502550408
c014,3,5,3,350806,322584,332049,332049,1800.009957444,1800.775768279
c014,3,5,4,228765,211946,219853,219853,2400.010844419,2400.967949938
c014,3,5,5,125668,115088,116342,116342,3000.0150511760003,3001.341131357
c014,3,5,6,155778,142938,143995,143995,3600.0164970160004,3601.577190364
c014,3,5,7,137432,128214,131149,131149,4200.0182579990005,4201.808515893
c014,3,5,8,109505,103624,105743,105743,4800.019974247,4802.048559441
c014,3,5,9,106494,98810,102683,102683,5400.024646303001,5402.256930635
c014,3,5,10,81780,75668,78788,78788,6000.048228226001,6002.485925009
c014,3,5,11,79528,74341,77311,77311,6600.048407650001,6602.702231255
# search time: 6600.048s
# total time: 26428.359s
c014,4,5,1,1075038,912137,1039222,1039222,600.00253559,600.268235395
c014,4,5,2,468067,438811,451283,451283,1200.003119833,1200.494972322
c014,4,5,3,349220,320977,330489,330489,1800.003746936,1800.705224932
c014,4,5,4,225255,208257,216419,216419,2400.004455398,2400.853646656
c014,4,5,5,133056,122923,124230,124230,3000.0088805980004,3001.080511494
c014,4,5,6,154972,142248,143243,143243,3600.0153207830003,3601.265536736
c014,4,5,7,139898,130232,133084,133084,4200.01793066,4201.465105689
c014,4,5,8,106085,100046,102301,102301,4800.024087807,4801.654868041
c014,4,5,9,106185,98596,102485,102485,5400.027676916,5401.780142013
c014,4,5,10,82324,76153,79297,79297,6000.048575127,6001.984932521
c014,4,5,11,74394,69394,71957,71957,6600.058397598,6602.42483537
# search time: 6600.058s
# total time: 33031.572s
