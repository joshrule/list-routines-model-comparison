    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.70s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c005_2.json out/1593091766/results/c005_2_best.csv out/1593091766/results/c005_2_predictions.csv out/1593091766/results/c005_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 3, 6, 3]), o: IntList([3]) }
#   Datum { i: IntList([3, 5, 8, 1, 2]), o: IntList([1]) }
#   Datum { i: IntList([2, 0, 8, 7, 6, 2]), o: IntList([8]) }
#   Datum { i: IntList([2, 9, 0]), o: IntList([0]) }
#   Datum { i: IntList([4, 4, 4, 4, 4]), o: IntList([4]) }
#   Datum { i: IntList([3, 2, 8, 6]), o: IntList([6]) }
#   Datum { i: IntList([2, 2, 2]), o: IntList([2]) }
#   Datum { i: IntList([1, 1]), o: IntList([1]) }
#   Datum { i: IntList([3, 0, 0, 9, 6]), o: IntList([9]) }
#   Datum { i: IntList([1, 7]), o: IntList([7]) }
#   Datum { i: IntList([1, 5, 5, 3]), o: IntList([5]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c005,0,2,1,1279667,1049420,1227221,1227221,600.0003984,601.762561819
c005,0,2,2,852732,800727,826729,826729,1200.000966004,1202.891496321
c005,0,2,3,650494,591504,620236,620236,1800.0014907280001,1803.819709801
c005,0,2,4,509079,471385,489563,489563,2400.0021933870003,2404.520964113
c005,0,2,5,431516,392462,413104,413104,3000.0189053120002,3005.120623248
c005,0,2,6,296084,271246,283768,283768,3600.0199356310004,3605.746546791
c005,0,2,7,250051,231884,241217,241217,4200.020575583,4206.469825219
c005,0,2,8,229798,215520,223895,223895,4800.024604186,4807.110319603
c005,0,2,9,210202,194942,202444,202444,5400.026869766,5407.621923659
c005,0,2,10,178981,168562,174777,174777,6000.029568773,6008.09691567
c005,0,2,11,169337,157405,163543,163543,6600.030557787,6608.562787573
# search time: 6600.031s
# total time: 6609.138s
c005,1,2,1,1291063,1121345,1254561,1254561,600.002588468,600.378154079
c005,1,2,2,854751,803179,828795,828795,1200.002771348,1200.768328093
c005,1,2,3,664742,603750,634160,634160,1800.0029572839999,1801.139346878
c005,1,2,4,507918,471044,488698,488698,2400.003199824,2401.480929288
c005,1,2,5,435410,394867,415703,415703,3000.003912356,3001.77074102
c005,1,2,6,293493,268436,280309,280309,3600.006423296,3602.121041068
c005,1,2,7,248702,231006,240623,240623,4200.0070084769995,4202.480138908
c005,1,2,8,233299,218749,227526,227526,4800.008133924999,4802.761755712
c005,1,2,9,203610,188211,195288,195288,5400.008319467999,5403.072818708
c005,1,2,10,182271,172118,178152,178152,6000.013800800999,6003.340881549
c005,1,2,11,169088,157069,163342,163342,6600.017962116999,6603.613708792
# search time: 6600.018s
# total time: 13213.685s
c005,2,2,1,1257064,1023850,1204232,1204232,600.00357595,600.185815711
c005,2,2,2,833442,782257,807832,807832,1200.014862469,1200.493794551
c005,2,2,3,653384,594436,623152,623152,1800.015566391,1800.775903274
c005,2,2,4,506723,470249,487862,487862,2400.015665609,2401.002017224
c005,2,2,5,435488,395468,415802,415802,3000.020618218,3001.203963287
c005,2,2,6,291546,266703,278532,278532,3600.021885503,3601.46186517
c005,2,2,7,249737,232083,241791,241791,4200.030081936,4201.702883816
c005,2,2,8,229844,215692,224163,224163,4800.031022698,4801.927436229
c005,2,2,9,210078,194875,202310,202310,5400.031032341,5402.134894923
c005,2,2,10,178431,167933,174238,174238,6000.033402563,6002.338969162
c005,2,2,11,166821,154481,160395,160395,6600.044705871,6602.55378434
# search time: 6600.045s
# total time: 19817.131s
c005,3,2,1,1267681,1036285,1215054,1215054,600.000093624,600.191150584
c005,3,2,2,855280,802388,828837,828837,1200.000583538,1200.461605411
c005,3,2,3,652475,592976,622256,622256,1800.001056957,1800.688916419
c005,3,2,4,505570,469091,486488,486488,2400.001598822,2400.877435831
c005,3,2,5,435194,394691,415478,415478,3000.0032168899997,3001.041243039
c005,3,2,6,298646,273184,286019,286019,3600.0042022109997,3601.211951409
c005,3,2,7,249044,231425,241056,241056,4200.004226589,4201.410211782
c005,3,2,8,223577,209700,218092,218092,4800.005319159,4801.570579154
c005,3,2,9,209035,193774,201152,201152,5400.006358342,5401.733625693
c005,3,2,10,175990,165679,171886,171886,6000.009217778,6001.880824694
c005,3,2,11,168099,155900,162084,162084,6600.0107367989995,6602.040847362
# search time: 6600.011s
# total time: 26420.106s
c005,4,2,1,1252998,1075273,1214479,1214479,600.00470566,600.243629295
c005,4,2,2,857208,804374,830781,830781,1200.0092172680002,1200.497153135
c005,4,2,3,656871,598205,627969,627969,1800.0092798260002,1800.716345291
c005,4,2,4,506123,468848,486762,486762,2400.009410314,2400.885780532
c005,4,2,5,432567,393861,414108,414108,3000.022764685,3001.065671909
c005,4,2,6,299495,274054,287059,287059,3600.02403066,3601.222643333
c005,4,2,7,248988,231226,240967,240967,4200.026157028,4201.379406527
c005,4,2,8,232156,217877,226440,226440,4800.02731404,4801.535736528
c005,4,2,9,209123,193914,201322,201322,5400.031123584,5401.691960303
c005,4,2,10,179203,168853,175060,175060,6000.034975556,6001.83294814
c005,4,2,11,168889,156932,163224,163224,6600.035875945,6601.97377473
# search time: 6600.036s
# total time: 33022.881s
