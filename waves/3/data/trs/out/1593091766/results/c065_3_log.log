    Finished release [optimized] target(s) in 0.05s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c065_3.json out/1593091766/results/c065_3_best.csv out/1593091766/results/c065_3_predictions.csv out/1593091766/results/c065_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 8, 2, 1, 9]), o: IntList([9, 7, 8, 2, 1, 9, 7]) }
#   Datum { i: IntList([6, 6, 3, 0, 0, 3]), o: IntList([9, 6, 6, 3, 0, 0, 3, 7]) }
#   Datum { i: IntList([0, 8, 2, 4, 1, 9, 6]), o: IntList([9, 0, 8, 2, 4, 1, 9, 6, 7]) }
#   Datum { i: IntList([1, 1, 1, 2, 1, 1, 1, 2]), o: IntList([9, 1, 1, 1, 2, 1, 1, 1, 2, 7]) }
#   Datum { i: IntList([3, 6, 4, 3, 6, 3, 5, 5, 4, 5]), o: IntList([9, 3, 6, 4, 3, 6, 3, 5, 5, 4, 5, 7]) }
#   Datum { i: IntList([2, 2, 8]), o: IntList([9, 2, 2, 8, 7]) }
#   Datum { i: IntList([7]), o: IntList([9, 7, 7]) }
#   Datum { i: IntList([1, 3, 1, 5, 6, 4, 4, 3, 8]), o: IntList([9, 1, 3, 1, 5, 6, 4, 4, 3, 8, 7]) }
#   Datum { i: IntList([4, 8]), o: IntList([9, 4, 8, 7]) }
#   Datum { i: IntList([]), o: IntList([9, 7]) }
#   Datum { i: IntList([1, 0, 0, 8]), o: IntList([9, 1, 0, 0, 8, 7]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c065,0,3,1,1224600,1037190,1183356,1183356,600.006152054,601.764421957
c065,0,3,2,395576,368781,378749,378749,1200.0154963710002,1202.811783018
c065,0,3,3,217644,206608,208318,208318,1800.0185268280002,1803.707803412
c065,0,3,4,144208,136846,137524,137524,2400.020238128,2404.477120762
c065,0,3,5,117086,108913,109388,109388,3000.022116593,3005.073399436
c065,0,3,6,72257,67840,68148,68148,3600.0274720300004,3605.786186407
c065,0,3,7,66147,61134,61408,61408,4200.0281487620005,4206.505798401
c065,0,3,8,66251,58441,59027,59027,4800.034127842,4807.213932013
c065,0,3,9,53281,48191,48429,48429,5400.038092752,5407.846010485
c065,0,3,10,50343,43419,43731,43731,6000.039824484,6008.533336413
c065,0,3,11,52972,42823,43237,43237,6600.044694165,6609.112482751
# search time: 6600.045s
# total time: 6609.514s
c065,1,3,1,1284925,1104170,1245713,1245713,600.000030929,600.392268677
c065,1,3,2,379915,354380,364072,364072,1200.00114882,1200.791740821
c065,1,3,3,217065,205855,207500,207500,1800.001650908,1801.175372166
c065,1,3,4,142718,135313,136001,136001,2400.004938745,2401.537829628
c065,1,3,5,116162,108190,108654,108654,3000.006917798,3001.810827927
c065,1,3,6,70906,66303,66585,66585,3600.0088014089997,3602.164273357
c065,1,3,7,62261,57193,57359,57359,4200.010214935,4202.638780214
c065,1,3,8,67878,60627,61108,61108,4800.0140336409995,4803.025950191
c065,1,3,9,52835,47770,48042,48042,5400.021540209999,5403.323485973
c065,1,3,10,51820,45272,45615,45615,6000.025424875999,6003.744538507
c065,1,3,11,52585,42714,43102,43102,6600.03530713,6604.009813977
# search time: 6600.035s
# total time: 13214.169s
c065,2,3,1,1298866,1135637,1264222,1264222,600.004194531,600.324289896
c065,2,3,2,387676,361222,371193,371193,1200.004462827,1200.600533835
c065,2,3,3,212217,200938,202511,202511,1800.0052141209999,1800.856433094
c065,2,3,4,143300,135912,136572,136572,2400.00634318,2401.122389111
c065,2,3,5,116369,108947,109619,109619,3000.010172628,3001.305948859
c065,2,3,6,71768,67204,67511,67511,3600.014677702,3601.60992497
c065,2,3,7,65602,60494,60784,60784,4200.020701198,4201.844500665
c065,2,3,8,67873,60619,61139,61139,4800.0364625170005,4802.100100728
c065,2,3,9,52562,47620,47855,47855,5400.036752328,5402.387175607
c065,2,3,10,51775,44900,45254,45254,6000.052256891,6002.692192826
c065,2,3,11,52901,42808,43190,43190,6600.052515739,6602.869800966
# search time: 6600.053s
# total time: 19817.713s
c065,3,3,1,1281458,1051778,1229106,1229106,600.004712598,600.207518239
c065,3,3,2,385586,359119,369246,369246,1200.0053807680001,1200.427205237
c065,3,3,3,216389,205243,206877,206877,1800.0083121540001,1800.672989176
c065,3,3,4,142552,135298,135926,135926,2400.008700955,2400.861309867
c065,3,3,5,116038,108631,109333,109333,3000.012372521,3001.006693721
c065,3,3,6,67652,62952,63198,63198,3600.01992427,3601.247982138
c065,3,3,7,63912,58615,58864,58864,4200.024649571,4201.471743258
c065,3,3,8,66937,58935,59386,59386,4800.033349429999,4801.651197698
c065,3,3,9,52407,46755,46970,46970,5400.037520137999,5401.871766331
c065,3,3,10,50909,44011,44329,44329,6000.063122109999,6002.102782399
c065,3,3,11,52636,43026,43440,43440,6600.075042838999,6602.279508626
# search time: 6600.075s
# total time: 26420.972s
c065,4,3,1,1244525,1018079,1193113,1193113,600.001866041,600.184120013
c065,4,3,2,393979,366630,376767,376767,1200.002530928,1200.368619073
c065,4,3,3,215934,204916,206530,206530,1800.00373197,1800.525437607
c065,4,3,4,139136,131548,132030,132030,2400.003795631,2400.705934013
c065,4,3,5,116143,108837,109492,109492,3000.005238668,3000.811169748
c065,4,3,6,70664,66067,66390,66390,3600.0065572149997,3601.02285811
c065,4,3,7,62864,57744,57926,57926,4200.022498132,4201.198272208
c065,4,3,8,67588,60225,60704,60704,4800.023915562,4801.370913262
c065,4,3,9,52666,47688,47933,47933,5400.037230778,5401.524754808
c065,4,3,10,51904,45207,45583,45583,6000.037605796,6001.663818099
c065,4,3,11,51860,42144,42566,42566,6600.042968411,6601.777161552
# search time: 6600.043s
# total time: 33023.120s
