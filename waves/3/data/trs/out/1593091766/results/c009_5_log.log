    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.61s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c009_5.json out/1593091766/results/c009_5_best.csv out/1593091766/results/c009_5_predictions.csv out/1593091766/results/c009_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([0, 5, 2, 2, 2]), o: IntList([0, 5, 2, 2, 2]) }
#   Datum { i: IntList([6, 7, 0]), o: IntList([6, 7, 0]) }
#   Datum { i: IntList([5, 3, 7, 3, 8, 7, 8, 7]), o: IntList([5, 3, 7, 3, 8, 7]) }
#   Datum { i: IntList([6, 2, 4, 4, 4, 8, 8]), o: IntList([6, 2, 4, 4, 4, 8]) }
#   Datum { i: IntList([]), o: IntList([]) }
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1, 1, 1, 1]) }
#   Datum { i: IntList([3, 2, 1, 4, 3, 0, 4]), o: IntList([3, 2, 1, 4, 3, 0]) }
#   Datum { i: IntList([6, 6]), o: IntList([6, 6]) }
#   Datum { i: IntList([7]), o: IntList([7]) }
#   Datum { i: IntList([9, 4, 9, 9, 4, 9, 9]), o: IntList([9, 4, 9, 9, 4, 9]) }
#   Datum { i: IntList([5, 8, 8, 9, 9, 5, 8, 5]), o: IntList([5, 8, 8, 9, 9, 5]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c009,0,5,1,1134128,931601,1087478,1087478,600.000665221,601.878236669
c009,0,5,2,444292,413510,429278,429278,1200.001246884,1203.048279546
c009,0,5,3,320352,300213,311449,311449,1800.002047725,1803.650895798
c009,0,5,4,202635,190412,192574,192574,2400.0022964130003,2404.442633046
c009,0,5,5,142811,128050,129184,129184,3000.0055057280006,3005.300581994
c009,0,5,6,148568,128192,132943,132943,3600.0105025560006,3605.935005013
c009,0,5,7,111248,94591,98349,98349,4200.012593821,4206.746367
c009,0,5,8,95008,82617,85992,85992,4800.012619831001,4807.491314149
c009,0,5,9,89853,78453,81710,81710,5400.012697208001,5408.166492179
c009,0,5,10,92057,80705,83773,83773,6000.018705053,6008.68457595
c009,0,5,11,74957,65492,68126,68126,6600.022775439,6609.188247972
# search time: 6600.023s
# total time: 6609.573s
c009,1,5,1,1137162,998448,1108280,1108280,600.001102717,600.424362529
c009,1,5,2,453706,421981,437878,437878,1200.001751013,1200.848991202
c009,1,5,3,320156,300059,311129,311129,1800.0027404880002,1801.132872551
c009,1,5,4,206560,194715,196848,196848,2400.008723274,2401.439860677
c009,1,5,5,141581,126718,127836,127836,3000.012142568,3001.879418073
c009,1,5,6,148166,127995,132668,132668,3600.020624296,3602.15296801
c009,1,5,7,109926,93197,96907,96907,4200.027900409999,4202.57510402
c009,1,5,8,91717,79223,82486,82486,4800.029017622999,4802.942824439
c009,1,5,9,88875,77319,80630,80630,5400.031053067999,5403.307274664
c009,1,5,10,91321,79515,82212,82212,6000.033245718999,6003.563161957
c009,1,5,11,74509,65203,67881,67881,6600.033579274999,6603.813167567
# search time: 6600.034s
# total time: 13214.137s
c009,2,5,1,1144654,986855,1110585,1110585,600.001762574,600.282944811
c009,2,5,2,446033,414849,430742,430742,1200.002175955,1200.569917895
c009,2,5,3,316027,295997,307236,307236,1800.003438578,1800.766745622
c009,2,5,4,201718,189592,191750,191750,2400.004484895,2401.001531484
c009,2,5,5,143793,129918,131047,131047,3000.004957233,3001.242778498
c009,2,5,6,146146,126066,130636,130636,3600.007781018,3601.448067078
c009,2,5,7,107857,91624,95184,95184,4200.014118609,4201.763886833
c009,2,5,8,91226,78807,82032,82032,4800.0168520160005,4802.012287637
c009,2,5,9,86524,74993,78079,78079,5400.017226755001,5402.296884121
c009,2,5,10,92505,81056,84011,84011,6000.021385737001,6002.496443208
c009,2,5,11,74797,65405,68016,68016,6600.035428810001,6602.713293469
# search time: 6600.035s
# total time: 19817.377s
c009,3,5,1,1144527,995312,1112444,1112444,600.000140809,600.294611511
c009,3,5,2,453786,421807,437891,437891,1200.010839757,1200.526876353
c009,3,5,3,325100,303551,315844,315844,1800.011806366,1800.688164694
c009,3,5,4,192537,180691,182060,182060,2400.013692605,2400.904571813
c009,3,5,5,139965,125466,126588,126588,3000.015489119,3001.093584847
c009,3,5,6,146483,126766,131363,131363,3600.025423422,3601.25886867
c009,3,5,7,108286,91935,95469,95469,4200.0284706190005,4201.475381364
c009,3,5,8,91657,79511,82695,82695,4800.032396928001,4801.694733073
c009,3,5,9,88538,77176,80351,80351,5400.0384385140005,5401.914789084
c009,3,5,10,89879,78726,81720,81720,6000.043908209001,6002.068442182
c009,3,5,11,73753,64605,67206,67206,6600.053200310001,6602.208860714
# search time: 6600.053s
# total time: 26420.162s
c009,4,5,1,1113263,912469,1067552,1067552,600.000524488,600.186627001
c009,4,5,2,427160,398351,413386,413386,1200.000806354,1200.385199186
c009,4,5,3,313417,293186,304506,304506,1800.00128387,1800.513700317
c009,4,5,4,195134,183259,184649,184649,2400.001451037,2400.681035466
c009,4,5,5,139736,125158,126306,126306,3000.057851692,3000.942646288
c009,4,5,6,145140,125149,129714,129714,3600.0788408529997,3601.079324467
c009,4,5,7,107566,91336,94874,94874,4200.082978463,4201.266433031
c009,4,5,8,93953,81311,84669,84669,4800.084867543,4801.41512784
c009,4,5,9,87461,76048,79274,79274,5400.091178564,5401.583042278
c009,4,5,10,89968,78620,81606,81606,6000.098544794,6001.698542575
c009,4,5,11,74371,64717,67108,67108,6600.110571794,6601.941939779
# search time: 6600.111s
# total time: 33022.865s
