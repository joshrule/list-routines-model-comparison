    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.33s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c001_5.json out/1593091766/results/c001_5_best.csv out/1593091766/results/c001_5_predictions.csv out/1593091766/results/c001_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([7, 7, 7]), o: IntList([7]) }
#   Datum { i: IntList([9, 6, 9, 8, 6]), o: IntList([9]) }
#   Datum { i: IntList([0, 6, 4, 4, 0, 6, 4]), o: IntList([4]) }
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1]) }
#   Datum { i: IntList([2, 4, 3, 2]), o: IntList([3]) }
#   Datum { i: IntList([8, 1, 8]), o: IntList([8]) }
#   Datum { i: IntList([5, 3, 6]), o: IntList([6]) }
#   Datum { i: IntList([0, 0, 0, 0, 0]), o: IntList([0]) }
#   Datum { i: IntList([2, 2, 2, 8]), o: IntList([2]) }
#   Datum { i: IntList([5, 7, 5, 7, 5]), o: IntList([5]) }
#   Datum { i: IntList([7, 9, 3, 4]), o: IntList([3]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c001,0,5,1,1303132,1121550,1263798,1263798,600.001151127,602.010145094
c001,0,5,2,762351,722934,743265,743265,1200.001458877,1202.886467627
c001,0,5,3,691677,638003,665845,665845,1800.001806741,1803.625215997
c001,0,5,4,471870,437927,455944,455944,2400.001919452,2404.119772917
c001,0,5,5,418218,386948,403144,403144,3000.002224224,3004.593160888
c001,0,5,6,372830,345426,359941,359941,3600.00394928,3605.013051508
c001,0,5,7,334661,309527,322796,322796,4200.004643399,4205.419028091
c001,0,5,8,300621,276684,289054,289054,4800.005818994,4805.838996114
c001,0,5,9,219428,201479,211172,211172,5400.006575604,5406.423629663
c001,0,5,10,196294,179732,188715,188715,6000.008011688,6006.965386346
c001,0,5,11,177920,162428,170912,170912,6600.016154752,6607.537874305
# search time: 6600.016s
# total time: 6607.988s
c001,1,5,1,1338061,1174140,1303313,1303313,600.006747464,600.319103499
c001,1,5,2,793004,751956,772951,772951,1200.009881593,1200.6357788
c001,1,5,3,691091,637811,665121,665121,1800.0164854660002,1800.9541149
c001,1,5,4,469936,435954,454056,454056,2400.017061345,2401.204553022
c001,1,5,5,419875,388936,404928,404928,3000.020487549,3001.444984609
c001,1,5,6,383782,355683,370101,370101,3600.020750755,3601.677259857
c001,1,5,7,332910,307355,320799,320799,4200.021010324,4201.904228244
c001,1,5,8,302266,278417,290828,290828,4800.021584432,4802.099764959
c001,1,5,9,217216,199213,208962,208962,5400.022618926,5402.411184057
c001,1,5,10,194911,178283,187267,187267,6000.024136136,6002.715123943
c001,1,5,11,172588,157609,165837,165837,6600.02451764,6602.998265786
# search time: 6600.025s
# total time: 13211.639s
c001,2,5,1,1343661,1194193,1314167,1314167,600.002605675,600.316192897
c001,2,5,2,777821,738600,759058,759058,1200.005895332,1200.554500544
c001,2,5,3,691105,638186,665213,665213,1800.011104142,1800.80367909
c001,2,5,4,505221,468489,488224,488224,2400.011285969,2400.993467926
c001,2,5,5,419423,388322,404471,404471,3000.012524285,3001.172955671
c001,2,5,6,372985,345150,359867,359867,3600.01255205,3601.357094336
c001,2,5,7,346000,320310,333761,333761,4200.012807492,4201.52966814
c001,2,5,8,303965,280198,292704,292704,4800.013815239,4801.692443131
c001,2,5,9,221816,202984,213121,213121,5400.014999139,5401.882613061
c001,2,5,10,198007,180956,190270,190270,6000.015008815,6002.067574317
c001,2,5,11,174047,158553,166970,166970,6600.018763018001,6602.255070227
# search time: 6600.019s
# total time: 19814.534s
c001,3,5,1,1290766,1109666,1251315,1251315,600.000139313,600.232944852
c001,3,5,2,795103,755067,775525,775525,1200.000230846,1200.445334342
c001,3,5,3,690311,637296,664271,664271,1800.002714857,1800.654291977
c001,3,5,4,471012,438357,456069,456069,2400.003168659,2400.809901373
c001,3,5,5,418190,387608,403514,403514,3000.007899658,3000.96706484
c001,3,5,6,369912,342464,356835,356835,3600.0085269680003,3601.120546988
c001,3,5,7,343339,316831,330524,330524,4200.010405904,4201.263293179
c001,3,5,8,309616,285220,297884,297884,4800.014064097,4801.413018566
c001,3,5,9,216015,198441,207927,207927,5400.014938382001,5401.58876273
c001,3,5,10,198873,181740,190992,190992,6000.016198395001,6001.792717807
c001,3,5,11,174012,158842,167178,167178,6600.016589936001,6601.935740759
# search time: 6600.017s
# total time: 26417.277s
c001,4,5,1,1216247,1031168,1175816,1175816,600.005970154,600.210277548
c001,4,5,2,785212,746421,766593,766593,1200.006501252,1200.401777419
c001,4,5,3,693638,639010,667425,667425,1800.008086578,1800.592744452
c001,4,5,4,476130,442121,460104,460104,2400.008342859,2400.728139344
c001,4,5,5,410730,381551,396878,396878,3000.0093152130003,3000.851610892
c001,4,5,6,366551,339194,353571,353571,3600.009518835,3600.973169483
c001,4,5,7,336009,309539,323292,323292,4200.009637728001,4201.085132677
c001,4,5,8,302912,278906,291357,291357,4800.010931230001,4801.188967315
c001,4,5,9,221148,202579,212612,212612,5400.013330587001,5401.31390406
c001,4,5,10,197724,180764,189994,189994,6000.013377588001,6001.470669201
c001,4,5,11,172837,158001,166116,166116,6600.014559329002,6601.616655173
# search time: 6600.015s
# total time: 33019.281s
