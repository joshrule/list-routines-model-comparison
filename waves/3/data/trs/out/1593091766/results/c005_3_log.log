    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.49s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c005_3.json out/1593091766/results/c005_3_best.csv out/1593091766/results/c005_3_predictions.csv out/1593091766/results/c005_3_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([1, 5, 5, 3]), o: IntList([5]) }
#   Datum { i: IntList([2, 2, 2]), o: IntList([2]) }
#   Datum { i: IntList([3, 0, 0, 9, 6]), o: IntList([9]) }
#   Datum { i: IntList([1, 1]), o: IntList([1]) }
#   Datum { i: IntList([2, 0, 8, 7, 6, 2]), o: IntList([8]) }
#   Datum { i: IntList([4, 4, 4, 4, 4]), o: IntList([4]) }
#   Datum { i: IntList([3, 5, 8, 1, 2]), o: IntList([1]) }
#   Datum { i: IntList([1, 7]), o: IntList([7]) }
#   Datum { i: IntList([3, 3, 6, 3]), o: IntList([3]) }
#   Datum { i: IntList([3, 2, 8, 6]), o: IntList([6]) }
#   Datum { i: IntList([2, 9, 0]), o: IntList([0]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c005,0,3,1,1311570,1127214,1271495,1271495,600.000052154,601.880798496
c005,0,3,2,802627,758034,780345,780345,1200.00069931,1202.898016363
c005,0,3,3,578814,542736,563362,563362,1800.0010342700002,1803.447454857
c005,0,3,4,494017,456187,475307,475307,2400.001084681,2404.200031526
c005,0,3,5,448684,411869,427931,427931,3000.0014938960003,3004.746304956
c005,0,3,6,334241,304565,317571,317571,3600.0021851500005,3605.335379231
c005,0,3,7,274246,252496,262889,262889,4200.002573769,4205.927727001
c005,0,3,8,235871,217146,225736,225736,4800.0028217320005,4806.457198593
c005,0,3,9,208180,190124,197518,197518,5400.0034863010005,5406.991428683
c005,0,3,10,186186,172400,179386,179386,6000.009199421001,6007.536082527
c005,0,3,11,155485,146125,151782,151782,6600.010643773001,6608.095851293
# search time: 6600.011s
# total time: 6608.684s
c005,1,3,1,1302465,1132811,1265982,1265982,600.00231321,600.380806699
c005,1,3,2,808774,763943,785861,785861,1200.003610604,1200.7516592
c005,1,3,3,574149,537600,558512,558512,1800.012075003,1801.029193539
c005,1,3,4,493674,456160,475385,475385,2400.012348715,2401.377817405
c005,1,3,5,459637,422893,439215,439215,3000.012627385,3001.659637568
c005,1,3,6,335202,307111,320165,320165,3600.013269358,3601.956664049
c005,1,3,7,276761,254761,265390,265390,4200.013664004,4202.254404309
c005,1,3,8,235236,216701,225241,225241,4800.014385597,4802.552759116
c005,1,3,9,209825,191924,199779,199779,5400.016912771,5402.840783098
c005,1,3,10,186909,172932,179986,179986,6000.017989026999,6003.092857243
c005,1,3,11,155310,146120,151710,151710,6600.027381097999,6603.379507502
# search time: 6600.027s
# total time: 13212.981s
c005,2,3,1,1227375,1004282,1176962,1176962,600.000962857,600.179069756
c005,2,3,2,859018,808210,832286,832286,1200.001093666,1200.462300408
c005,2,3,3,617520,578830,600365,600365,1800.001422375,1800.696392488
c005,2,3,4,495628,457703,476979,476979,2400.003832153,2400.947032469
c005,2,3,5,455213,418027,434243,434243,3000.004793142,3001.169014472
c005,2,3,6,339083,309088,322349,322349,3600.00520544,3601.382552154
c005,2,3,7,275987,254003,264611,264611,4200.012246562,4201.611682167
c005,2,3,8,236979,218686,227295,227295,4800.012544293,4801.820883627
c005,2,3,9,210222,192360,200249,200249,5400.013238839,5402.011235607
c005,2,3,10,186799,172772,179711,179711,6000.014423351,6002.196173012
c005,2,3,11,154781,145380,151088,151088,6600.016231716,6602.434810739
# search time: 6600.016s
# total time: 19816.640s
c005,3,3,1,1221431,1034717,1180483,1180483,600.01411833,600.251536007
c005,3,3,2,813237,768734,790416,790416,1200.0142514059999,1200.492344422
c005,3,3,3,585660,547854,569060,569060,1800.0146501499999,1800.663378681
c005,3,3,4,493425,455616,474884,474884,2400.015125498,2400.8434073
c005,3,3,5,458278,421161,437407,437407,3000.016389192,3001.038140043
c005,3,3,6,338594,310467,323605,323605,3600.017491119,3601.188238579
c005,3,3,7,275712,253633,264241,264241,4200.019179692,4201.352139209
c005,3,3,8,232825,214403,222638,222638,4800.022192265,4801.499652173
c005,3,3,9,209548,191656,199345,199345,5400.022820742,5401.654212509
c005,3,3,10,187514,173717,180704,180704,6000.024678768,6001.819900303
c005,3,3,11,154489,145488,151097,151097,6600.0407925009995,6601.994168571
# search time: 6600.041s
# total time: 26419.534s
c005,4,3,1,1276218,1048059,1224176,1224176,600.007218171,600.191664303
c005,4,3,2,808971,764985,786703,786703,1200.0091297509998,1200.417506413
c005,4,3,3,580647,544241,565019,565019,1800.0095745739998,1800.583313372
c005,4,3,4,496758,459237,478435,478435,2400.009601637,2400.752113305
c005,4,3,5,456055,419638,436112,436112,3000.018682813,3000.925905108
c005,4,3,6,339299,311023,324467,324467,3600.019784641,3601.083742361
c005,4,3,7,275304,253331,263736,263736,4200.024139378,4201.247701105
c005,4,3,8,235167,216676,224904,224904,4800.025101607,4801.405399262
c005,4,3,9,208721,191068,198910,198910,5400.027328011,5401.519653287
c005,4,3,10,187446,173643,180652,180652,6000.029316996,6001.650895492
c005,4,3,11,156963,147503,153224,153224,6600.0301587409995,6601.755637386
# search time: 6600.030s
# total time: 33022.181s
