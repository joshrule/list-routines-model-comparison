    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.06s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c059_5.json out/1593091766/results/c059_5_best.csv out/1593091766/results/c059_5_predictions.csv out/1593091766/results/c059_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([0, 5, 3, 8, 1, 9, 4, 6, 2]), o: IntList([0, 5, 3, 6, 1, 9, 4, 8, 2]) }
#   Datum { i: IntList([6, 1, 8, 5, 2, 3, 7, 9, 0, 4]), o: IntList([6, 1, 8, 9, 2, 3, 7, 5, 0, 4]) }
#   Datum { i: IntList([1, 0, 7, 8, 6, 4, 2, 6, 1, 9]), o: IntList([1, 0, 7, 6, 6, 4, 2, 8, 1, 9]) }
#   Datum { i: IntList([9, 5, 5, 9, 3, 7, 6, 3, 9, 3]), o: IntList([9, 5, 5, 3, 3, 7, 6, 9, 9, 3]) }
#   Datum { i: IntList([7, 3, 4, 0, 1, 6, 8, 1, 5]), o: IntList([7, 3, 4, 1, 1, 6, 8, 0, 5]) }
#   Datum { i: IntList([8, 3, 9, 2, 7, 4, 6, 3]), o: IntList([8, 3, 9, 3, 7, 4, 6, 2]) }
#   Datum { i: IntList([6, 7, 2, 6, 5, 4, 4, 0]), o: IntList([6, 7, 2, 0, 5, 4, 4, 6]) }
#   Datum { i: IntList([8, 9, 9, 6, 5, 2, 4, 0, 0]), o: IntList([8, 9, 9, 0, 5, 2, 4, 6, 0]) }
#   Datum { i: IntList([3, 1, 1, 5, 1, 0, 7, 0, 7]), o: IntList([3, 1, 1, 0, 1, 0, 7, 5, 7]) }
#   Datum { i: IntList([5, 2, 4, 3, 7, 0, 8, 6]), o: IntList([5, 2, 4, 6, 7, 0, 8, 3]) }
#   Datum { i: IntList([5, 2, 8, 8, 8, 8, 2, 5]), o: IntList([5, 2, 8, 5, 8, 8, 2, 8]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c059,0,5,1,987067,804989,945938,945938,600.008573949,601.763617419
c059,0,5,2,258659,239958,246933,246933,1200.008932123,1203.093295245
c059,0,5,3,144431,133578,138537,138537,1800.0116106579999,1803.987469117
c059,0,5,4,103878,95980,99428,99428,2400.0154868769996,2404.78884187
c059,0,5,5,57377,53599,54875,54875,3000.0157585339994,3006.566680626
c059,0,5,6,61088,56065,57931,57931,3600.023676141999,3607.746377141
c059,0,5,7,39990,37025,37990,37990,4200.0278370099995,4209.524815765
c059,0,5,8,41094,37553,38521,38521,4800.04644862,4811.008460531
c059,0,5,9,34685,31822,32529,32529,5400.047443192,5412.438320523
c059,0,5,10,30788,28130,28877,28877,6000.062848362,6013.978881479
c059,0,5,11,27705,25366,26018,26018,6600.070994475001,6615.430907568
# search time: 6600.071s
# total time: 6615.713s
c059,1,5,1,1034655,848388,992208,992208,600.001887605,600.289036601
c059,1,5,2,256320,237557,244552,244552,1200.00234172,1200.803897578
c059,1,5,3,144996,133619,138806,138806,1800.005413588,1801.18551653
c059,1,5,4,103261,95300,98853,98853,2400.021129474,2401.585987494
c059,1,5,5,56082,52401,53653,53653,3000.029204409,3002.333765405
c059,1,5,6,59660,54706,56599,56599,3600.041569717,3602.806902471
c059,1,5,7,39899,37130,37958,37958,4200.06157936,4203.739150442
c059,1,5,8,40967,37609,38500,38500,4800.063957345,4804.471759577
c059,1,5,9,35400,32332,33142,33142,5400.066648272,5405.119156671
c059,1,5,10,30369,27493,28415,28415,6000.098199477,6005.85479962
c059,1,5,11,27585,25045,25769,25769,6600.12276257,6606.720031049
# search time: 6600.123s
# total time: 13222.742s
c059,2,5,1,1053134,909632,1021894,1021894,600.000149119,600.310025195
c059,2,5,2,257075,238072,245312,245312,1200.005516565,1200.64979905
c059,2,5,3,143251,132291,137534,137534,1800.0055601630002,1800.8553125
c059,2,5,4,103374,95374,98793,98793,2400.010811125,2401.105838598
c059,2,5,5,55854,51661,53365,53365,3000.0317823590003,3001.927828409
c059,2,5,6,33589,30600,31677,31677,3600.0420079350006,3602.332360324
c059,2,5,7,22522,21069,21483,21483,4200.055655844,4203.046951763
c059,2,5,8,23042,20974,21509,21509,4800.0704852710005,4803.499775419
c059,2,5,9,20005,18133,18656,18656,5400.073417164001,5403.920234013
c059,2,5,10,17369,15823,16295,16295,6000.088258133001,6004.438016794
c059,2,5,11,15551,14171,14626,14626,6600.106365118001,6605.046271018
# search time: 6600.106s
# total time: 19828.092s
c059,3,5,1,632550,549231,614699,614699,600.000186666,600.253119535
c059,3,5,2,153197,141906,146035,146035,1200.00789358,1200.542920356
c059,3,5,3,83672,76778,79855,79855,1800.041845501,1800.768211443
c059,3,5,4,57942,52836,55096,55096,2400.053031136,2400.978211394
c059,3,5,5,32981,30752,31468,31468,3000.058317349,3001.330342454
c059,3,5,6,35976,33062,34125,34125,3600.070584048,3601.675872564
c059,3,5,7,23034,21380,21853,21853,4200.07370475,4202.187889649
c059,3,5,8,23025,20945,21472,21472,4800.124220564,4802.69542868
c059,3,5,9,19333,17640,18091,18091,5400.149619324,5403.225188277
c059,3,5,10,17145,15539,16015,16015,6000.183046683,6003.688517372
c059,3,5,11,15765,14328,14766,14766,6600.228810105,6604.025549465
# search time: 6600.229s
# total time: 26432.435s
c059,4,5,1,615575,503573,589757,589757,600.001709608,600.164057561
c059,4,5,2,151605,140353,144444,144444,1200.004397309,1200.391226733
c059,4,5,3,83889,77185,80066,80066,1800.012937004,1800.566108491
c059,4,5,4,58388,53580,55475,55475,2400.01768483,2400.765896233
c059,4,5,5,32287,30127,30817,30817,3000.050303911,3001.120716528
c059,4,5,6,47029,42934,44391,44391,3600.05062556,3601.336189515
c059,4,5,7,45858,42788,43710,43710,4200.079517467,4201.675520638
c059,4,5,8,46597,42836,43765,43765,4800.093189643,4802.052276903
c059,4,5,9,40479,37085,37968,37968,5400.098362019,5402.34653184
c059,4,5,10,34866,31860,32676,32676,6000.11513428,6002.727188536
c059,4,5,11,31761,28917,29727,29727,6600.116227452,6603.139351109
# search time: 6600.116s
# total time: 33035.878s
