    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.63s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation small_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c010_5.json out/1593091766/results/c010_5_best.csv out/1593091766/results/c010_5_predictions.csv out/1593091766/results/c010_5_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([3, 9, 8, 6, 5, 1]), o: IntList([9, 8, 6]) }
#   Datum { i: IntList([6, 2, 6, 1, 3, 6, 2, 9]), o: IntList([2, 6, 1, 3, 6, 2]) }
#   Datum { i: IntList([1, 2, 4, 5, 0, 8, 9, 7, 8]), o: IntList([2]) }
#   Datum { i: IntList([9, 7, 0, 9, 7, 9, 9, 4, 0, 7]), o: IntList([7, 0, 9, 7, 9, 9, 4, 0, 7]) }
#   Datum { i: IntList([4, 4, 4, 4, 4, 4, 4, 4, 4]), o: IntList([4, 4, 4, 4]) }
#   Datum { i: IntList([2, 3, 2, 7, 6]), o: IntList([3, 2]) }
#   Datum { i: IntList([8, 2, 5, 7, 1, 5, 5, 8, 8, 8]), o: IntList([2, 5, 7, 1, 5, 5, 8, 8]) }
#   Datum { i: IntList([1, 0, 2, 1, 2]), o: IntList([0]) }
#   Datum { i: IntList([0, 2]), o: IntList([]) }
#   Datum { i: IntList([3, 8, 3, 3, 8, 3, 3]), o: IntList([8, 3, 3]) }
#   Datum { i: IntList([5, 5, 5, 1, 1, 5]), o: IntList([5, 5, 1, 1, 5]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c010,0,5,1,1295092,1132695,1260874,1260874,600.00283183,602.045091171
c010,0,5,2,589760,553433,569293,569293,1200.003036186,1203.097437292
c010,0,5,3,299483,281369,283526,283526,1800.003778031,1803.988338059
c010,0,5,4,244376,222918,223719,223719,2400.005603479,2404.845920763
c010,0,5,5,146191,129687,130284,130284,3000.009556162,3005.614839875
c010,0,5,6,117152,103164,103764,103764,3600.011988473,3606.432923904
c010,0,5,7,102600,90823,91639,91639,4200.0140281310005,4207.21754421
c010,0,5,8,104551,92560,92901,92901,4800.021821536,4807.729462583
c010,0,5,9,76484,72254,73838,73838,5400.027979129,5408.453720583
c010,0,5,10,72137,67393,70458,70458,6000.0301220460005,6009.08054048
c010,0,5,11,58488,54539,57210,57210,6600.031854859,6609.821157146
# search time: 6600.032s
# total time: 6610.244s
c010,1,5,1,1252930,1027644,1201366,1201366,600.003682159,600.266723752
c010,1,5,2,584407,549396,564947,564947,1200.00372743,1200.723099287
c010,1,5,3,292690,273874,276067,276067,1800.0041184410002,1801.122923007
c010,1,5,4,248778,227605,228719,228719,2400.004828162,2401.482340352
c010,1,5,5,138614,122287,122585,122585,3000.009260893,3001.855893541
c010,1,5,6,118603,104703,105302,105302,3600.009789058,3602.322069239
c010,1,5,7,102617,90471,91283,91283,4200.02106327,4202.771721988
c010,1,5,8,107005,95394,95879,95879,4800.027050478,4803.026833821
c010,1,5,9,76747,72494,74152,74152,5400.033986152001,5403.433487752
c010,1,5,10,72524,67771,70902,70902,6000.038747935001,6003.767462426
c010,1,5,11,59567,55763,58362,58362,6600.057034942001,6604.183964849
# search time: 6600.057s
# total time: 13215.436s
c010,2,5,1,1180065,1003427,1141417,1141417,600.000037195,600.294486106
c010,2,5,2,579121,544242,559747,559747,1200.000517985,1200.599086656
c010,2,5,3,298612,280495,282621,282621,1800.003875415,1800.878577775
c010,2,5,4,245093,223516,224296,224296,2400.013586457,2401.16457058
c010,2,5,5,146460,129524,130067,130067,3000.0171102860004,3001.419651905
c010,2,5,6,111266,97640,98058,98058,3600.024808291,3601.699330385
c010,2,5,7,99426,87172,87942,87942,4200.027925442,4202.000884536
c010,2,5,8,108338,96370,96878,96878,4800.030075770001,4802.144638669
c010,2,5,9,76109,71891,73520,73520,5400.037768526001,5402.43489322
c010,2,5,10,73049,68212,71536,71536,6000.047606703001,6002.680349428
c010,2,5,11,60726,56837,59519,59519,6600.053526037002,6602.877321395
# search time: 6600.054s
# total time: 19818.799s
c010,3,5,1,1284979,1118662,1249547,1249547,600.000409771,600.272005433
c010,3,5,2,578004,542880,558495,558495,1200.001966756,1200.528713134
c010,3,5,3,293229,274241,276334,276334,1800.002431458,1800.735028306
c010,3,5,4,241907,220637,221411,221411,2400.002669556,2400.947741646
c010,3,5,5,138423,122114,122398,122398,3000.007102888,3001.16178988
c010,3,5,6,117074,102732,103321,103321,3600.0086798840002,3601.351922024
c010,3,5,7,101679,89733,90536,90536,4200.010187994,4201.545895671
c010,3,5,8,106804,94779,95371,95371,4800.010920477001,4801.675551364
c010,3,5,9,76816,72433,74190,74190,5400.025223377001,5401.838913769
c010,3,5,10,72588,67871,71115,71115,6000.051163606001,6002.044400658
c010,3,5,11,57121,53265,55871,55871,6600.063870902001,6602.290708402
# search time: 6600.064s
# total time: 26421.723s
c010,4,5,1,1272597,1112202,1239049,1239049,600.000024534,600.257259101
c010,4,5,2,589300,553388,569350,569350,1200.00062708,1200.479083955
c010,4,5,3,296588,278750,280859,280859,1800.002294717,1800.684645489
c010,4,5,4,248126,227433,228498,228498,2400.0048459990003,2400.846764682
c010,4,5,5,138569,122741,123055,123055,3000.006496924,3001.003633138
c010,4,5,6,116712,102776,103415,103415,3600.0123382760003,3601.17628952
c010,4,5,7,102158,90280,91075,91075,4200.044784757,4201.415670634
c010,4,5,8,107356,95618,96121,96121,4800.061412276001,4801.517632271
c010,4,5,9,76258,71966,73666,73666,5400.071992175001,5401.696296091
c010,4,5,10,71871,67152,70325,70325,6000.072618481001,6001.818032599
c010,4,5,11,57458,53585,56157,56157,6600.080047896001,6601.989194411
# search time: 6600.080s
# total time: 33024.744s
