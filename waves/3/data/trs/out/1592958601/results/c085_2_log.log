    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.50s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c085_2.json out/1592958601/results/c085_2_best.csv out/1592958601/results/c085_2_predictions.csv out/1592958601/results/c085_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([2, 7, 3, 9]), o: IntList([3]) }
#   Datum { i: IntList([8, 63, 70, 25, 0, 2, 19, 34, 60]), o: IntList([60]) }
#   Datum { i: IntList([5, 4, 3, 80, 36, 66, 75]), o: IntList([66]) }
#   Datum { i: IntList([1, 4, 4]), o: IntList([4]) }
#   Datum { i: IntList([2, 53, 38, 49, 78, 69, 6, 1, 3, 11]), o: IntList([38]) }
#   Datum { i: IntList([2, 67, 52, 72, 93, 9, 67, 5, 68]), o: IntList([52]) }
#   Datum { i: IntList([3, 98, 94, 94, 3]), o: IntList([94]) }
#   Datum { i: IntList([4, 28, 5, 26, 29, 6, 94, 3]), o: IntList([29]) }
#   Datum { i: IntList([1, 76, 9, 76]), o: IntList([76]) }
#   Datum { i: IntList([1, 8, 27, 27, 8, 1, 8]), o: IntList([8]) }
#   Datum { i: IntList([4, 39, 4, 48, 46, 48]), o: IntList([46]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c085,0,2,1,1039326,852056,997036,997036,600.00777149,601.801856748
c085,0,2,2,715118,677138,696207,696207,1200.008154226,1202.910552806
c085,0,2,3,444468,414169,427166,427166,1800.00881389,1803.659262572
c085,0,2,4,292107,274241,284971,284971,2400.009807115,2404.658124841
c085,0,2,5,270665,252199,261260,261260,3000.010502274,3005.464253601
c085,0,2,6,154442,141416,146362,146362,3600.0120903429997,3606.467518434
c085,0,2,7,110838,103390,107084,107084,4200.015452504,4207.527775315
c085,0,2,8,91580,85670,89297,89297,4800.018873408,4808.647840954
c085,0,2,9,74994,69799,72846,72846,5400.02201084,5409.652542843
c085,0,2,10,62424,58608,61435,61435,6000.02519552,6010.841767877
c085,0,2,11,59564,55269,57828,57828,6600.025958042,6611.861136442
# search time: 6600.026s
# total time: 6612.737s
c085,1,2,1,992786,858019,964255,964255,600.000642505,600.372173669
c085,1,2,2,671224,633248,651582,651582,1200.001373248,1200.772158404
c085,1,2,3,409811,381206,393074,393074,1800.001795782,1801.11968569
c085,1,2,4,256079,240469,249464,249464,2400.0032739010003,2401.60525936
c085,1,2,5,244652,227814,236113,236113,3000.0038937870004,3002.007567642
c085,1,2,6,138738,126842,131239,131239,3600.0057475490003,3602.520776803
c085,1,2,7,109639,102332,105949,105949,4200.007651465,4202.931485425
c085,1,2,8,94847,88683,91959,91959,4800.010671901,4803.325987359
c085,1,2,9,74964,70125,73153,73153,5400.015569966,5403.945447928
c085,1,2,10,66200,61507,64241,64241,6000.023038229,6004.415933825
c085,1,2,11,52896,48349,50893,50893,6600.04726207,6604.973072354
# search time: 6600.047s
# total time: 13218.332s
c085,2,2,1,924973,759406,887648,887648,600.000120748,600.179129605
c085,2,2,2,646623,611320,628976,628976,1200.000537297,1200.470948873
c085,2,2,3,405585,376585,388778,388778,1800.0007900159999,1800.70227021
c085,2,2,4,257219,241494,250729,250729,2400.00279552,2401.023515142
c085,2,2,5,241722,224268,232275,232275,3000.003296204,3001.316960528
c085,2,2,6,138591,126860,131365,131365,3600.004917054,3601.666251612
c085,2,2,7,108151,100871,104420,104420,4200.008774291,4202.044849532
c085,2,2,8,94057,87841,91128,91128,4800.009109804,4802.426531643
c085,2,2,9,74647,69517,72486,72486,5400.018900266,5402.773645344
c085,2,2,10,62550,58656,61317,61317,6000.021637488,6003.163857369
c085,2,2,11,59270,54924,57562,57562,6600.039141215,6603.525273529
# search time: 6600.039s
# total time: 19822.872s
c085,3,2,1,945073,776185,906696,906696,600.001345041,600.159577803
c085,3,2,2,663950,626302,644615,644615,1200.00591807,1200.414252542
c085,3,2,3,419342,390403,402005,402005,1800.0068783850002,1800.61844822
c085,3,2,4,264987,248941,258734,258734,2400.008381165,2400.872388481
c085,3,2,5,241285,223787,231630,231630,3000.0107094980003,3001.090394944
c085,3,2,6,139986,128095,132593,132593,3600.0122800320005,3601.370588759
c085,3,2,7,106956,99674,103104,103104,4200.015403314001,4201.669768544
c085,3,2,8,91641,85750,89215,89215,4800.021853646001,4801.905868737
c085,3,2,9,67109,62986,65944,65944,5400.03902601,5402.283071462
c085,3,2,10,64465,59318,62106,62106,6000.0420639700005,6002.589639713
c085,3,2,11,59050,54773,57398,57398,6600.042508881001,6602.833889228
# search time: 6600.043s
# total time: 26426.362s
c085,4,2,1,943222,772730,904386,904386,600.000979156,600.150136477
c085,4,2,2,665045,627496,645703,645703,1200.001341883,1200.37825721
c085,4,2,3,398611,370975,382518,382518,1800.001493834,1800.547071598
c085,4,2,4,265397,249289,259024,259024,2400.003099385,2400.747864004
c085,4,2,5,244301,227572,235956,235956,3000.006551374,3000.937914674
c085,4,2,6,138169,126334,130698,130698,3600.0094393540003,3601.181742051
c085,4,2,7,104343,97405,101062,101062,4200.0131159600005,4201.379273667
c085,4,2,8,94890,88690,92048,92048,4800.019173895001,4801.670518573
c085,4,2,9,73930,69003,72082,72082,5400.021389218001,5401.933407163
c085,4,2,10,68161,62974,65898,65898,6000.0311776240005,6002.18096895
c085,4,2,11,55382,50819,53492,53492,6600.032841642001,6602.36710989
# search time: 6600.033s
# total time: 33029.429s
