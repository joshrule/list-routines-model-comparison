    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.38s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c082_4.json out/1592958601/results/c082_4_best.csv out/1592958601/results/c082_4_predictions.csv out/1592958601/results/c082_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([9, 9]), o: IntList([]) }
#   Datum { i: IntList([10, 6, 2, 99, 0]), o: IntList([2]) }
#   Datum { i: IntList([22]), o: IntList([]) }
#   Datum { i: IntList([78, 8, 74, 9, 70, 78]), o: IntList([74]) }
#   Datum { i: IntList([83, 58]), o: IntList([]) }
#   Datum { i: IntList([18, 79, 7, 5, 3, 7, 3, 5, 79]), o: IntList([7]) }
#   Datum { i: IntList([91, 75, 3, 6, 8, 42, 11, 4, 1, 60]), o: IntList([3]) }
#   Datum { i: IntList([96, 40]), o: IntList([]) }
#   Datum { i: IntList([90, 90, 90, 90, 90]), o: IntList([90]) }
#   Datum { i: IntList([1, 1, 1, 1]), o: IntList([1]) }
#   Datum { i: IntList([15]), o: IntList([]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c082,0,4,1,940272,769874,901490,901490,600.0014796,601.987572032
c082,0,4,2,766955,713737,750180,750180,1200.009876341,1202.926155497
c082,0,4,3,647491,609592,631626,631626,1800.015681562,1803.922321776
c082,0,4,4,577995,546573,565093,565093,2400.017404696,2404.630755833
c082,0,4,5,365781,336344,353020,353020,3000.031672899,3005.287923935
c082,0,4,6,328965,301860,317012,317012,3600.035300431,3605.848913963
c082,0,4,7,230048,213670,222757,222757,4200.0393028729995,4206.479721873
c082,0,4,8,164584,153508,159887,159887,4800.059692367,4807.191691288
c082,0,4,9,158112,147379,153584,153584,5400.061456114,5407.839922849
c082,0,4,10,119618,112574,116790,116790,6000.064092213001,6008.537916064
c082,0,4,11,117703,110684,115254,115254,6600.065514128,6609.203566022
# search time: 6600.066s
# total time: 6609.734s
c082,1,4,1,1048688,912012,1019786,1019786,600.000267945,600.307107427
c082,1,4,2,785927,730265,768602,768602,1200.0006250689999,1200.611620838
c082,1,4,3,679296,638735,663132,663132,1800.0054332349998,1801.005873604
c082,1,4,4,594142,561273,580131,580131,2400.0118323099996,2401.365893834
c082,1,4,5,368783,337681,354424,354424,3000.0126951019997,3001.676502344
c082,1,4,6,336884,308276,323881,323881,3600.0143929789997,3601.961866529
c082,1,4,7,254912,235395,246466,246466,4200.016282326999,4202.230290155
c082,1,4,8,162418,151391,157853,157853,4800.01823516,4802.526680282
c082,1,4,9,153272,142410,147939,147939,5400.021675194999,5402.833709911
c082,1,4,10,118627,111673,115877,115877,6000.027901009999,6003.165855681
c082,1,4,11,109713,103268,107240,107240,6600.033524627,6603.525657606
# search time: 6600.034s
# total time: 13214.381s
c082,2,4,1,976860,804217,937814,937814,600.000169783,600.17287562
c082,2,4,2,796556,740854,778957,778957,1200.0013404000001,1200.420940146
c082,2,4,3,672057,632573,655424,655424,1800.0024908310002,1800.724675947
c082,2,4,4,602075,568276,588073,588073,2400.002830724,2400.985134873
c082,2,4,5,378844,348008,365285,365285,3000.002902024,3001.226065214
c082,2,4,6,338732,311008,326729,326729,3600.006100444,3601.431925202
c082,2,4,7,230799,214152,223437,223437,4200.006775813,4201.667048928
c082,2,4,8,154962,144195,150042,150042,4800.010228669,4801.910266871
c082,2,4,9,158000,147262,153496,153496,5400.015144668,5402.125528302
c082,2,4,10,126171,118723,123584,123584,6000.015255011,6002.349452244
c082,2,4,11,118199,111247,115850,115850,6600.017030118,6602.60045962
# search time: 6600.017s
# total time: 19817.637s
c082,3,4,1,976704,799387,936148,936148,600.002122624,600.160266302
c082,3,4,2,762576,712188,747315,747315,1200.002206407,1200.374648132
c082,3,4,3,673521,633572,656961,656961,1800.0024338019998,1800.613835445
c082,3,4,4,590706,558434,577456,577456,2400.0044862759996,2400.833662241
c082,3,4,5,376183,345601,362796,362796,3000.0052054569996,3001.013043769
c082,3,4,6,334203,305697,321108,321108,3600.005224183,3601.198374783
c082,3,4,7,235885,218434,228191,228191,4200.005644688,4201.371168985
c082,3,4,8,163755,152795,159183,159183,4800.013717304,4801.57452829
c082,3,4,9,154954,144522,150075,150075,5400.015398834001,5401.792255585
c082,3,4,10,117676,110688,114831,114831,6000.043270385001,6002.051788871
c082,3,4,11,117597,110667,115200,115200,6600.045181827001,6602.222536092
# search time: 6600.045s
# total time: 26420.762s
c082,4,4,1,952762,809127,921378,921378,600.002200633,600.192808471
c082,4,4,2,796589,742059,779417,779417,1200.008363502,1200.420671043
c082,4,4,3,670689,630818,654549,654549,1800.008386507,1800.647568194
c082,4,4,4,588730,556479,575524,575524,2400.008906932,2400.846315998
c082,4,4,5,377869,347494,364407,364407,3000.010786193,3001.012636034
c082,4,4,6,337058,308748,324126,324126,3600.011237324,3601.190394065
c082,4,4,7,254840,235323,246403,246403,4200.014252674,4201.339856695
c082,4,4,8,183353,169897,177753,177753,4800.019686434,4801.488759201
c082,4,4,9,176061,162897,170389,170389,5400.0221350169995,5401.651189752
c082,4,4,10,137366,128600,134292,134292,6000.024636394,6001.801343398
c082,4,4,11,125104,116307,121526,121526,6600.027509813999,6601.953917228
# search time: 6600.028s
# total time: 33023.603s
