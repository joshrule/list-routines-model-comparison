    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.66s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c090_4.json out/1592958601/results/c090_4_best.csv out/1592958601/results/c090_4_predictions.csv out/1592958601/results/c090_4_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([51, 21, 8, 40, 51, 51, 40, 21]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([25, 25, 2, 27, 25, 2, 27]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([7, 16, 38, 68, 38, 93, 84, 28, 6, 93]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([50, 5, 34, 3, 34, 5, 3, 0, 3, 0]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([79, 85, 85, 85]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([1, 1, 31, 31, 1, 31, 1, 87, 1, 1]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([2, 34, 96, 49, 83, 41, 35, 4, 39, 97]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([92, 2, 2, 7, 9, 84, 52, 5, 6, 41]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([33, 33]), o: IntList([18, 42, 77, 20, 36]) }
#   Datum { i: IntList([89, 68, 4, 3, 68, 76, 80, 6]), o: IntList([18, 42, 77, 20, 36]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c090,0,4,1,521219,443846,504048,504048,600.002548492,603.358099567
c090,0,4,2,226325,211877,218285,218285,1200.0054163599998,1205.856746789
c090,0,4,3,136048,130120,133134,133134,1800.0081054139998,1808.339886216
c090,0,4,4,80592,76640,78902,78902,2400.00896617,2411.26393525
c090,0,4,5,56934,54681,55880,55880,3000.010099529,3014.491438193
c090,0,4,6,48883,46719,47866,47866,3600.017387797,3617.442911946
c090,0,4,7,54783,50728,52115,52115,4200.027081408,4219.685021147
c090,0,4,8,43246,40384,41092,41092,4800.027924811,4821.868438591
c090,0,4,9,33030,30606,31414,31414,5400.031812565,5424.228947569
c090,0,4,10,27268,25483,25988,25988,6000.032724662,6027.112965218
c090,0,4,11,26348,24633,25089,25089,6600.053492665,6629.900562683
# search time: 6600.053s
# total time: 6630.034s
c090,1,4,1,908395,741792,870091,870091,600.000113919,600.303442728
c090,1,4,2,257346,241036,248181,248181,1200.000767333,1201.082510554
c090,1,4,3,137736,130854,134814,134814,1800.0015742120002,1801.937233246
c090,1,4,4,83553,80230,81911,81911,2400.006556507,2403.083666393
c090,1,4,5,58188,55713,57011,57011,3000.009580113,3004.232399391
c090,1,4,6,50671,48671,49585,49585,3600.015007388,3605.481509257
c090,1,4,7,55097,51388,52318,52318,4200.020978048,4206.415377379
c090,1,4,8,43155,40151,40909,40909,4800.021708634,4807.26244154
c090,1,4,9,32800,30641,31248,31248,5400.039331753,5408.256852712
c090,1,4,10,27491,25797,26275,26275,6000.039417614,6009.409688328
c090,1,4,11,26123,24383,24859,24859,6600.044895152,6610.390910315
# search time: 6600.045s
# total time: 13240.679s
c090,2,4,1,916821,791369,889621,889621,600.000166049,600.257556576
c090,2,4,2,260440,244147,251043,251043,1200.00187473,1200.721409078
c090,2,4,3,135224,128039,132410,132410,1800.002039462,1801.178799063
c090,2,4,4,80456,75769,78804,78804,2400.0066560200003,2401.92858531
c090,2,4,5,58199,55501,57016,57016,3000.0156307360003,3002.682837781
c090,2,4,6,49965,47904,48916,48916,3600.0237501,3603.362777407
c090,2,4,7,55090,51360,52315,52315,4200.032846738,4203.863816854
c090,2,4,8,42716,39931,40664,40664,4800.035533845001,4804.441849709
c090,2,4,9,32999,30891,31468,31468,5400.044086428001,5405.176279948
c090,2,4,10,27229,25434,25959,25959,6000.059731445001,6005.829058996
c090,2,4,11,26455,24703,25186,25186,6600.070121032,6606.542013472
# search time: 6600.070s
# total time: 19847.544s
c090,3,4,1,936703,818227,911770,911770,600.005096668,600.246226503
c090,3,4,2,253920,237441,244634,244634,1200.00509832,1200.565512042
c090,3,4,3,133866,124430,131074,131074,1800.00716848,1800.913774899
c090,3,4,4,84433,80807,82657,82657,2400.01095077,2401.382581524
c090,3,4,5,59099,56665,57928,57928,3000.017451236,3001.895790103
c090,3,4,6,50932,48960,49846,49846,3600.024774271,3602.356373014
c090,3,4,7,55582,51853,52748,52748,4200.036557543,4202.825931055
c090,3,4,8,43310,40399,41159,41159,4800.04889878,4803.302891048
c090,3,4,9,33121,30797,31540,31540,5400.054666957,5404.019955658
c090,3,4,10,27760,25994,26464,26464,6000.06733271,6004.605141446
c090,3,4,11,26780,25057,25470,25470,6600.079688048,6605.206125887
# search time: 6600.080s
# total time: 26452.998s
c090,4,4,1,906911,793287,882877,882877,600.004263304,600.200368052
c090,4,4,2,248722,232705,239968,239968,1200.004854599,1200.460283868
c090,4,4,3,138404,132454,135606,135606,1800.005124514,1800.768105193
c090,4,4,4,82261,77948,80505,80505,2400.008919204,2401.129992445
c090,4,4,5,58508,55930,57361,57361,3000.0122931309998,3001.552084609
c090,4,4,6,50524,48496,49522,49522,3600.01990562,3602.014960771
c090,4,4,7,54694,50784,51957,51957,4200.026427197,4202.289391935
c090,4,4,8,42670,39756,40552,40552,4800.033733815,4802.615528332
c090,4,4,9,33092,31019,31589,31589,5400.053071927,5403.152074579
c090,4,4,10,27498,25771,26287,26287,6000.063947369,6003.610099419
c090,4,4,11,26220,24528,24992,24992,6600.085771814,6604.029189541
# search time: 6600.086s
# total time: 33057.268s
