    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on build directory
    Finished release [optimized] target(s) in 0.74s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c084_1.json out/1592958601/results/c084_1_best.csv out/1592958601/results/c084_1_predictions.csv out/1592958601/results/c084_1_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([27, 27, 27, 27]), o: IntList([]) }
#   Datum { i: IntList([94, 0, 58, 62, 7, 3, 1, 55, 88]), o: IntList([1]) }
#   Datum { i: IntList([90, 8, 5, 34, 79, 65, 8, 48, 79, 9]), o: IntList([8]) }
#   Datum { i: IntList([37, 5, 82, 82, 5, 5, 37, 5, 82]), o: IntList([37]) }
#   Datum { i: IntList([6, 61, 3, 19, 80]), o: IntList([]) }
#   Datum { i: IntList([99, 1, 1, 99, 85]), o: IntList([]) }
#   Datum { i: IntList([85, 18, 85, 91, 91, 18, 91]), o: IntList([91]) }
#   Datum { i: IntList([5, 5]), o: IntList([]) }
#   Datum { i: IntList([21, 24, 41, 38, 8, 6, 4, 96]), o: IntList([4]) }
#   Datum { i: IntList([57, 97, 57, 83, 92, 3, 14]), o: IntList([14]) }
#   Datum { i: IntList([2, 42]), o: IntList([]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c084,0,1,1,965757,792175,925901,925901,600.002135013,602.01052853
c084,0,1,2,653239,601623,635136,635136,1200.002140355,1203.43493192
c084,0,1,3,407120,381252,396038,396038,1800.002879495,1804.830581815
c084,0,1,4,245072,227871,238000,238000,2400.004643786,2406.215677208
c084,0,1,5,162710,149903,156576,156576,3000.0394354630002,3007.495483676
c084,0,1,6,150189,137500,144368,144368,3600.050004816,3608.720205204
c084,0,1,7,148872,137584,144153,144153,4200.053561814,4209.78862415
c084,0,1,8,95566,89850,93819,93819,4800.054068649,4811.074856047
c084,0,1,9,99784,93010,97201,97201,5400.054830198001,5412.279489773
c084,0,1,10,79738,74407,77817,77817,6000.099592583001,6013.715686615
c084,0,1,11,66664,62721,65564,65564,6600.100519923001,6615.007667767
# search time: 6600.101s
# total time: 6615.397s
c084,1,1,1,988536,808979,947320,947320,600.003633203,600.227748932
c084,1,1,2,654491,607226,638319,638319,1200.0053494630001,1200.718166466
c084,1,1,3,420690,394217,409477,409477,1800.0067037860001,1801.276484547
c084,1,1,4,276930,256745,268257,268257,2400.007335693,2401.764934027
c084,1,1,5,178936,165048,172558,172558,3000.008867799,3002.329266542
c084,1,1,6,166524,152608,160539,160539,3600.014728786,3602.841106393
c084,1,1,7,125523,116436,121166,121166,4200.024271527,4203.403593667
c084,1,1,8,82339,77388,80378,80378,4800.026018574,4804.028573703
c084,1,1,9,100223,93519,97766,97766,5400.026082765,5404.663265084
c084,1,1,10,82171,76828,80400,80400,6000.0264167059995,6005.264549548
c084,1,1,11,66207,62376,65199,65199,6600.028104577999,6605.788960125
# search time: 6600.028s
# total time: 13221.885s
c084,2,1,1,1040952,896876,1009703,1009703,600.000114616,600.272779351
c084,2,1,2,682971,628697,663843,663843,1200.000221232,1200.599556788
c084,2,1,3,416289,390224,405374,405374,1800.0005699080002,1800.97076978
c084,2,1,4,264008,244909,256089,256089,2400.001128237,2401.313328011
c084,2,1,5,164627,151726,158344,158344,3000.001770604,3001.676878016
c084,2,1,6,166565,152891,160631,160631,3600.004109214,3602.030759187
c084,2,1,7,142538,131400,137407,137407,4200.012778488,4202.48512373
c084,2,1,8,94582,89272,92977,92977,4800.027414077,4802.775368997
c084,2,1,9,108800,100868,105797,105797,5400.029501563,5403.12104213
c084,2,1,10,89206,83194,87037,87037,6000.033564477,6003.521132577
c084,2,1,11,68616,64243,67196,67196,6600.039257636,6603.905862274
# search time: 6600.039s
# total time: 19826.473s
c084,3,1,1,1055908,925013,1028194,1028194,600.000205064,600.271057225
c084,3,1,2,658530,609091,641343,641343,1200.000268547,1200.527079223
c084,3,1,3,422396,395505,411109,411109,1800.0021077679999,1800.816833824
c084,3,1,4,251139,233446,243895,243895,2400.0081681419997,2401.124206167
c084,3,1,5,179146,165358,172850,172850,3000.009100121,3001.367318687
c084,3,1,6,165490,151719,159526,159526,3600.0095361639997,3601.643375052
c084,3,1,7,150454,139036,145646,145646,4200.009946661,4201.909034968
c084,3,1,8,95475,89721,93704,93704,4800.015998673,4802.255044987
c084,3,1,9,111591,103540,108627,108627,5400.0166219679995,5402.55036183
c084,3,1,10,87369,81295,85085,85085,6000.032539712,6002.847087831
c084,3,1,11,69274,64450,67632,67632,6600.062417822999,6603.090263838
# search time: 6600.062s
# total time: 26430.212s
c084,4,1,1,1003558,825469,962588,962588,600.010535216,600.160665902
c084,4,1,2,647021,597380,629925,629925,1200.018833358,1200.393878234
c084,4,1,3,420430,394138,409456,409456,1800.02168071,1800.622450435
c084,4,1,4,248748,230977,241311,241311,2400.023412292,2400.828483165
c084,4,1,5,167585,154258,161128,161128,3000.025163277,3001.07038589
c084,4,1,6,166440,152587,160540,160540,3600.027057494,3601.284008961
c084,4,1,7,150160,138860,145491,145491,4200.029716209,4201.488509494
c084,4,1,8,86410,81194,84428,84428,4800.045155223,4801.777783558
c084,4,1,9,111258,103377,108453,108453,5400.048128298,5401.993269098
c084,4,1,10,88949,83124,86927,86927,6000.06124894,6002.302006989
c084,4,1,11,73638,69097,72217,72217,6600.062600553,6602.528750332
# search time: 6600.063s
# total time: 33033.384s
