    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Blocking waiting for file lock on package cache
    Finished release [optimized] target(s) in 0.48s
     Running `/home/rule/library/list-routine-learning-rs/target/release/simulation big_simulation.toml 5 /home/rule/library/list-routines-model-comparison/waves/3/json/c084_2.json out/1592958601/results/c084_2_best.csv out/1592958601/results/c084_2_predictions.csv out/1592958601/results/c084_2_all.csv /dev/null`
# loaded parameters
# loaded lexicon
#   C/0: list → list
#   TRUE/0: bool
#   FALSE/0: bool
#   NIL/0: list
#   CONS/0: nat → list → list
#   0/0: digit
#   1/0: digit
#   2/0: digit
#   3/0: digit
#   4/0: digit
#   5/0: digit
#   6/0: digit
#   7/0: digit
#   8/0: digit
#   9/0: digit
#   DIGIT/0: digit → nat
#   DECC/0: nat → digit → nat
#   NAN/0: nat
#   ./2: ∀t1. ∀t2. (t1 → t2) → t1 → t2
#   EMPTY/0: list → bool
#   EQUAL/0: ∀t0. t0 → t0 → bool
#   HEAD/0: list → nat
#   IF/0: ∀t0. bool → t0 → t0 → t0
#   TAIL/0: list → list
#   +/0: nat → nat → nat
#   -/0: nat → nat → nat
#   >/0: nat → nat → bool
# loaded background
# loaded data
#   Datum { i: IntList([99, 1, 1, 99, 85]), o: IntList([]) }
#   Datum { i: IntList([21, 24, 41, 38, 8, 6, 4, 96]), o: IntList([4]) }
#   Datum { i: IntList([57, 97, 57, 83, 92, 3, 14]), o: IntList([14]) }
#   Datum { i: IntList([2, 42]), o: IntList([]) }
#   Datum { i: IntList([37, 5, 82, 82, 5, 5, 37, 5, 82]), o: IntList([37]) }
#   Datum { i: IntList([85, 18, 85, 91, 91, 18, 91]), o: IntList([91]) }
#   Datum { i: IntList([27, 27, 27, 27]), o: IntList([]) }
#   Datum { i: IntList([90, 8, 5, 34, 79, 65, 8, 48, 79, 9]), o: IntList([8]) }
#   Datum { i: IntList([6, 61, 3, 19, 80]), o: IntList([]) }
#   Datum { i: IntList([94, 0, 58, 62, 7, 3, 1, 55, 88]), o: IntList([1]) }
#   Datum { i: IntList([5, 5]), o: IntList([]) }
# searching
problem,run,order,trial,steps,hypotheses,tree,dag,search_time,total_time
c084,0,2,1,960784,844491,936629,936629,600.000028142,602.362780786
c084,0,2,2,664514,606997,643197,643197,1200.000214992,1203.892767225
c084,0,2,3,445505,421524,436374,436374,1800.0013557360003,1805.157552327
c084,0,2,4,285500,264074,275960,275960,2400.001654312,2406.285100629
c084,0,2,5,270026,248964,260991,260991,3000.001944052,3007.225217811
c084,0,2,6,176465,163765,171256,171256,3600.004818391,3608.16488402
c084,0,2,7,125200,117096,122143,122143,4200.01221687,4209.189021211
c084,0,2,8,113048,105954,110534,110534,4800.018598492,4810.22711183
c084,0,2,9,85293,79972,83644,83644,5400.019193501,5411.237486533
c084,0,2,10,79285,74441,77754,77754,6000.028936781,6012.106342167
c084,0,2,11,65084,61301,63993,63993,6600.048574833,6613.127321713
# search time: 6600.049s
# total time: 6613.523s
c084,1,2,1,967381,821942,935200,935200,600.011736051,600.266845591
c084,1,2,2,697781,636466,674946,674946,1200.011999703,1200.778231342
c084,1,2,3,453678,430121,444513,444513,1800.0129307399998,1801.28765501
c084,1,2,4,283519,262694,274761,274761,2400.0138540059997,2401.779170411
c084,1,2,5,282805,261547,274211,274211,3000.0142323459995,3002.191158475
c084,1,2,6,183096,169809,177732,177732,3600.0161643559995,3602.632463451
c084,1,2,7,117819,110157,114521,114521,4200.027527613999,4203.18450317
c084,1,2,8,113158,106136,110654,110654,4800.027929211999,4803.725814911
c084,1,2,9,85332,80064,83703,83703,5400.049634491,5404.327874034
c084,1,2,10,79185,74250,77562,77562,6000.062294877,6004.82023141
c084,1,2,11,59064,55449,57901,57901,6600.0666385839995,6605.399565205
# search time: 6600.067s
# total time: 13219.607s
c084,2,2,1,958474,786007,919204,919204,600.000019085,600.162548671
c084,2,2,2,694480,634098,672110,672110,1200.00517584,1200.517864377
c084,2,2,3,454730,431205,445873,445873,1800.0057145770002,1800.853213227
c084,2,2,4,284341,263551,275609,275609,2400.005726107,2401.219350565
c084,2,2,5,281653,260369,272848,272848,3000.009894008,3001.535452602
c084,2,2,6,159561,148847,154965,154965,3600.0107983300004,3601.895290358
c084,2,2,7,124788,116689,121779,121779,4200.013107287001,4202.256390454
c084,2,2,8,110002,102755,107402,107402,4800.015059900001,4802.647483852
c084,2,2,9,85110,79816,83476,83476,5400.022868976001,5403.079403778
c084,2,2,10,73731,68940,71986,71986,6000.023945871,6003.363322675
c084,2,2,11,58740,55128,57561,57561,6600.03017779,6603.866691139
# search time: 6600.030s
# total time: 19824.106s
c084,3,2,1,987700,807815,946450,946450,600.003902531,600.158500794
c084,3,2,2,683570,626322,662500,662500,1200.005015308,1200.453639744
c084,3,2,3,456746,433203,447780,447780,1800.006587021,1800.750315073
c084,3,2,4,268295,248331,259753,259753,2400.007799862,2401.02971461
c084,3,2,5,276149,254913,267207,267207,3000.008180623,3001.285122012
c084,3,2,6,181708,168459,176200,176200,3600.01169888,3601.493914059
c084,3,2,7,137422,127492,133586,133586,4200.012482157,4201.718642334
c084,3,2,8,121192,112521,118005,118005,4800.021697514,4802.036184594
c084,3,2,9,92743,86427,90652,90652,5400.022369512,5402.353062728
c084,3,2,10,83434,77616,81263,81263,6000.029855914,6002.693822235
c084,3,2,11,64937,60453,63390,63390,6600.033013274,6603.068005735
# search time: 6600.033s
# total time: 26427.819s
c084,4,2,1,1004116,825170,963121,963121,600.003208359,600.148159815
c084,4,2,2,660843,606419,640887,640887,1200.0041753750002,1200.38989376
c084,4,2,3,458491,433854,449440,449440,1800.0109253290002,1800.594478351
c084,4,2,4,282741,261902,273942,273942,2400.011942778,2400.804793629
c084,4,2,5,277651,256345,268716,268716,3000.012196046,3000.998463964
c084,4,2,6,182564,169182,177071,177071,3600.020250578,3601.205537619
c084,4,2,7,125678,117612,122714,122714,4200.022656688,4201.393034742
c084,4,2,8,103454,96616,100565,100565,4800.023469124,4801.639659658
c084,4,2,9,80208,75106,78301,78301,5400.029468068,5401.873890162
c084,4,2,10,74574,69747,72858,72858,6000.0471654,6002.067740835
c084,4,2,11,55626,52131,54508,54508,6600.04746984,6602.276319748
# search time: 6600.047s
# total time: 33030.737s
